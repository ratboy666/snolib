-MODULE CSNOBOL4
-LINE 24 "CSNOBOL4.lss"
-INCLUDE 'FFI.INC'
-INCLUDE 'P64.INC'
-IN72
-LINE 316 "CSNOBOL4.lss"
-STITL CSNOBOL4
-EJECT
*
************************************************************************
*                                                                      *
*  #####    #####   #     #  #######  ######   #######  #        #   # *
* #     #  #     #  ##    #  #     #  #     #  #     #  #        #   # *
* #        #        # #   #  #     #  #     #  #     #  #        #   # *
* #         #####   #  #  #  #     #  ######   #     #  #        ##### *
* #              #  #   # #  #     #  #     #  #     #  #            # *
* #     #  #     #  #    ##  #     #  #     #  #     #  #            # *
*  #####    #####   #     #  #######  ######   #######  #######      # *
*                                                                      *
* CSNOBOL4         FUNCTIONS SPECIFIC TO CSNOBOL4                      *
*                                                                      *
************************************************************************
*
* CSNOBOL4.lss
*
-LINE 29 "CSNOBOL4.lss"
-SNOBOL SLOAD('BQ.INC')
-LINE 30 "CSNOBOL4.lss"
-SNOBOL SLOAD('DYNAMIC.INC')
-LINE 31 "CSNOBOL4.lss"
-SNOBOL SLOAD('WRAPPER.INC')
-LINE 32 "CSNOBOL4.lss"
-SNOBOL SLOAD('CRACK.INC')
-LINE 33 "CSNOBOL4.lss"
-SNOBOL SLOAD('SEQ.INC')
-LINE 34 "CSNOBOL4.lss"
-SNOBOL TERMINAL = 'CSNOBOL4 (MON NOV 11 12:50:40 EST 2013)'
-LINE 35 "CSNOBOL4.lss"
-LINE 38 "CSNOBOL4.lss"
-EMBED C 'csnobol4'
#line 42 "CSNOBOL4.lss"
-SNOBOL WRAPPER_STARTFILE(.EMBED)
#line 43 "CSNOBOL4.lss"

/* Adds FORTRAN IV FORMAT to CSNOBOL4 */

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include <time.h>
#include <sys/select.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

static int status;

static int pipefds[2];

static int createpipe(void)
{
    return pipe(pipefds);
}

-SNOBOL C_WRAPPER_PROTO('CREATEPIPE()INTEGER', .EMBED)
#line 66 "CSNOBOL4.lss"

static int getpipefd(int n)
{
    if ((n < 0) || (n > 1))
        return -1;
    return pipefds[n];
}

-SNOBOL C_WRAPPER_PROTO('GETPIPEFD(INTEGER)INTEGER', .EMBED)
#line 75 "CSNOBOL4.lss"

static int get_errno(void)
{
    return errno;
}

-SNOBOL C_WRAPPER_PROTO('GET_ERRNO()INTEGER', .EMBED)
#line 82 "CSNOBOL4.lss"

/* fd_set holds a set of file descriptors. On 64 bit Linux, this is
 * a 128 byte object. This may be as little as 4 bytes on some systems
 * (which would limit the number of fd's to 32).
 */

static int sizeof_timeval(void)
{
    return sizeof (struct timeval);
}

-SNOBOL C_WRAPPER_PROTO('SIZEOF_TIMEVAL()INTEGER', .EMBED)
#line 94 "CSNOBOL4.lss"

static int set_timeval(long p, int sec, int usec)
{
    struct timeval *tv = (void *)p;
    tv->tv_sec = sec;
    tv->tv_usec = usec;
}

-SNOBOL C_WRAPPER_PROTO('SET_TIMEVAL(LONG,INTEGER,INTEGER)', .EMBED)
#line 103 "CSNOBOL4.lss"

static int sizeof_fd_set(void)
{
    return sizeof (fd_set);
}

-SNOBOL C_WRAPPER_PROTO('SIZEOF_FD_SET()INTEGER', .EMBED)
#line 110 "CSNOBOL4.lss"

static int fd_isset_(int fd, long p)
{
    return FD_ISSET(fd, (fd_set *)p);
}

-SNOBOL C_WRAPPER_PROTO('FD_ISSET_(INTEGER,LONG)INTEGER', .EMBED)
#line 117 "CSNOBOL4.lss"

static void fd_zero_(long p)
{
    FD_ZERO((fd_set *)p);
}

-SNOBOL C_WRAPPER_PROTO('FD_ZERO_(LONG)', .EMBED)
#line 124 "CSNOBOL4.lss"

static void fd_clr(int fd, long p)
{
    FD_ClR(fd, (fd_set *)p);
}

-SNOBOL C_WRAPPER_PROTO('FD_CLR_(INTEGER,LONG)', .EMBED)
#line 131 "CSNOBOL4.lss"

static void fd_set_(int fd, long p)
{
    FD_SET(fd, (fd_set *)p);
}

-SNOBOL C_WRAPPER_PROTO('FD_SET_(INTEGER,LONG)', .EMBED)
#line 138 "CSNOBOL4.lss"

static int clear_errno(void)
{
    errno = 0;
}

-SNOBOL C_WRAPPER_PROTO('CLEAR_ERRNO()', .EMBED)
#line 145 "CSNOBOL4.lss"

static int waitpid_(int pid, int options)
{
    return waitpid(pid, &status, options);
}

-SNOBOL C_WRAPPER_PROTO('WAITPID_(INTEGER,INTEGER)INTEGER', .EMBED)
#line 152 "CSNOBOL4.lss"

static int get_status(void)
{
    return status;
}

-SNOBOL C_WRAPPER_PROTO('GET_STATUS()INTEGER', .EMBED)
#line 159 "CSNOBOL4.lss"

-END
-LINE 164 "CSNOBOL4.lss"
-SNOBOL DYNAMIC_DEBUG = 1
-LINE 165 "CSNOBOL4.lss"
-SNOBOL COMPILE_DYNAMIC(csnobol4) :F(ERROR) ;
-LINE 166 "CSNOBOL4.lss"
-SNOBOL LIBS =
-LINE 167 "CSNOBOL4.lss"
-SNOBOL OBJECTS = csnobol4; OBJECTS '.c' = '.o'
-LINE 168 "CSNOBOL4.lss"
-SNOBOL LINK_DYNAMIC('./csnobol4', OBJECTS, LIBS) :F(ERROR) ;
-LINE 169 "CSNOBOL4.lss"
-CMNT ERASE TEMPORARY FILES
-CMNT     WE DON'T NEED THE C BITS, OR THE OBJECT FILES ANYMORE.
-CMNT     ALL WE REQUIRE IS csnobol4.so
-CMNT -SNOBOL A = CRACK(csnobol4 ' ' OBJECTS, ' ')
-CMNT -SNOBOL SEQ(' DELETE(A<K>) ', .K)
-LINE 180 "CSNOBOL4.lss"
-PUBLIC FORK()
         LOAD('FORK()INTEGER')
-LINE 188 "CSNOBOL4.lss"
-PUBLIC WAIT()
         LOAD('WAIT()INTEGER')
-LINE 209 "CSNOBOL4.lss"
-PUBLIC SPRINTF()
         LOAD('SPRINTF(STRING,)STRING')
-LINE 214 "CSNOBOL4.lss"
-PUBLIC CREATEPIPE(), GETPIPEFD(), GET_ERRNO()
-PUBLIC CLEAR_ERRNO(), WAITPID(), GET_STATUS(), SIZEOF_TIMEVAL()
-PUBLIC SET_TIMEVAL(), SIZEOF_FD_SET(), FD_ZERO(), FD_CLR(), FD_SET()
-PUBLIC FD_ISSET()
*
         LOAD('CREATEPIPE()INTEGER', 'csnobol4.so')
         LOAD('GETPIPEFD(INTEGER)INTEGER', 'csnobol4.so')
         LOAD('GET_ERRNO()INTEGER', 'csnobol4.so')
         LOAD('CLEAR_ERRNO()', 'csnobol4.so')
         LOAD('WAITPID_(INTEGER,INTEGER)INTEGER', 'csnobol4.so')
         LOAD('GET_STATUS()INTEGER', 'csnobol4.so')
         LOAD('SIZEOF_TIMEVAL()INTEGER', 'csnobol4.so')
         LOAD('SET_TIMEVAL(INTEGER,INTEGER,INTEGER)', 'csnobol4.so')
         LOAD('SIZEOF_FD_SET()INTEGER', 'csnobol4.so')
         LOAD('FD_ZERO_(INTEGER)', 'csnobol4.so')
         LOAD('FD_CLR_(INTEGER,INTEGER)', 'csnobol4.so')
         LOAD('FD_SET_(INTEGER,INTEGER)', 'csnobol4.so')
         LOAD('FD_ISSET_(INTEGER,INTEGER)INTEGER', 'csnobol4.so')
         DEFINE('FD_ZERO(FD_SET)')
         DEFINE('FD_CLR(FD,FD_SET)')
         DEFINE('FD_ISSET(FD,FD_SET)')
         DEFINE('FD_SET(FD,FD_SET)')
-LINE 249 "CSNOBOL4.lss"
-PUBLIC CLOSE(), SELECT(), IO_GETFP(), FILENO()
*
         CLOSE_FFI = FFI_NEW('I', 'I')
         FFI_SET_CALLP(CLOSE_FFI, DLSYM(0, 'close'))
         DEFINE('CLOSE(FD)')
         SELECT_FFI = FFI_NEW('I', 'I,P,P,P,P')
         FFI_SET_CALLP(SELECT_FFI, DLSYM(0, 'select'))
         DEFINE('SELECT(NFDS,READFDS,WRITEFDS,EXCEPTFDS,TIMEOUT)')
         IO_GETFP_FFI = FFI_NEW('P', 'I')
         FFI_SET_CALLP(IO_GETFP_FFI, DLSYM(0, 'io_getfp'))
         FILENO_FFI = FFI_NEW('I', 'P')
         FFI_SET_CALLP(FILENO_FFI, DLSYM(0, 'fileno'))
         DEFINE('IO_GETFP(UNIT)')
         DEFINE('FILENO(FP)')                            :(CSNOBOL4_END)
*
CLOSE    FFI_PAR_N_INTEGER(CLOSE_FFI, 1, FD)
         CLOSE = FFI_CALL_INTEGER(CLOSE_FFI)                   :(RETURN)
*
FD_CLR   FD_CLR_(FD, FD_SET)                                   :(RETURN)
*
FD_ISSET FD_ISSET = FD_ISSET_(FD, FD_SET)                      :(RETURN)
*
FD_SET   FD_SET_(FD, FD_SET)                                   :(RETURN)
*
FD_ZERO  FD_ZERO_(FD_SET)                                      :(RETURN)
*
IO_GETFP FFI_PAR_N_INTEGER(IO_GETFP_FFI, 1, UNIT)
         IO_GETFP = FFI_CALL_PTR(IO_GETFP_FFI)                 :(RETURN)
*
FILENO   FFI_PAR_N_PTR(FILENO_FFI, 1, FP)
         FILENO = FFI_CALL_INTEGER(FILENO_FFI)                 :(RETURN)
*
SELECT   FFI_PAR_N_INTEGER(SELECT_FFI, 1, NFDS)
         FFI_PAR_N_PTR(SELECT_FFI, 2, READFDS)
         FFI_PAR_N_PTR(SELECT_FFI, 3, WRITEFDS)
         FFI_PAR_N_PTR(SELECT_FFI, 4, EXCEPTFDS)
         FFI_PAR_N_PTR(SELECT_FFI, 5, TIMEOUT)
         SELECT = FFI_CALL_INTEGER(SELECT_FFI)                 :(RETURN)
*
CSNOBOL4_END
*
* CE: .MSNOBOL4;
