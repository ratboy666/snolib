<h1>CVAR - C Variable Declaration</h1>

To interface with other software, [[CSNOBOL4]] programs must exchange
data with this other software. This exchange can use files, pipes,
or calls. [[P64]] provides [[BASIC]]-like [[PEEK()]] and [[POKE()]]
functions.  [[CVAR]] provides a "named variable" access to these
external variables, layered on the [[P64]] facilities.

[[CVAR]] converts declarations into a symbol table. Keeps variable
names in table [[VTAB]]. Each variable is assigned an offset. When
all declarations are complete, [[VOFFSET]] will be the size of the
data region (possibly for [[malloc()]]).

Contrary to the valid declaration [['UNSIGNED LONG']], all 64 bit
integers are signed (because [[CSNOBOL4]] wants it that way). Still,
63 bits of integer are probably just fine, so we ignore this issue.
On 32 bit systems, 64 bit variables won't work well. Similarly,
on 32 bit systems, 32 bit integers are always signed.

Also, [[LONG DOUBLE]] is not supported (but will likely <b>never</b>
be supported by [[CSNOBOL4]]). Again, we ignore this.

All variables are aligned to the correct boundary (1 for [[CHAR]],
2 for [[SHORT]], 4 for [[INT/FLOAT]], 8 for [[LONG/DOUBLE]]). These
alignments are correct for 64 bit versions; they may require adjustment
for 32 bit targets.

A variable name begins with a letter or underscore, followed by
letters, digits or underscore. variables are case sensitive.

[[DECLAREV()]] will fail if an invalid declaration is passed.

Each variable is described by:

[[
    CV_OFFSET  Offset from base of data
    CV_SIZE    Variable size (1, 2, 4, 8) in bytes
    CV_DIM     Number of elements (1..N)
    CV_SIGN    0 = UNSIGNED, 1 = SIGNED (if integer)
    CV_ISINT   0 = FLOAT, 1 = INTEGER
]]

Example declarations:

[[
     CHAR S[20]         20 * 8 BIT SIGNED
     UNSIGNED CHAR C    UNSIGNED 8 BIT
     SHORT SH           SIGNED 16 BIT
     UNSIGNED INT U     UNSIGNED 32 BIT
     SIGNED I           SIGNED 32 BIT
     UNSIGNED U2        UNSIGNED 32 BIT
     LONG L             SIGNED 64 BIT
     UNSIGNED LONG L2   UNSIGNED 64 BIT
     POINTER P          64 BIT POINTER
     FLOAT F[10]        10 * 32 BIT FLOATS
     DOUBLE D           64 BIT DOUBLE
]]

[[
     CREATE NEW SYMBOL TABLE: NEWDECLV()
     DECLARE NEW VARIABLE:    DECLAREV(S)
     LOAD VAR FROM BASE:      LOADV(BASE, 'NAME' [, INDEX])
     STORE VAR TO BASE:       STOREV(BASE, 'NAME, [INDEX], VALUE)
]]

<h2>Uses</h2>
<a href="P64.html">P64</a><br>
<a href="CHARS.html">CHARS</a><br>
<a href="HASH.html">HASH</a>

<<INCLUDES>>=
-USES HASH()
-INCLUDE 'P64.INC'
-INCLUDE 'CHARS.INC'
-INCLUDE 'HASH.INC'
@

<<CVAR>>=
%SET (BITS, HOST(HOST_POINTER_BITS))
-PUBLIC CVAR(), CV_OFFSET(), CV_SIZE(), CV_DIM(), CV_SIGN(), CV_ISINT()
         DATA('CVAR(CV_OFFSET,CV_SIZE,CV_DIM,CV_SIGN,CV_ISINT)')
*
-PUBLIC PTRV(), LOADV(), STOREV(), NEWDECLV(), DECLAREV()
         DEFINE('PTRV(B,V,I)')
         DEFINE('LOADV(B,V,I)')
         DEFINE('STOREV(B,V,I,X)')
         DEFINE('NEWDECLV()')
         DEFINE('DECLAREV(L)SIGN,INT,FLOAT,AL,NU,SP,BS,BN,IDENT,DIM,'
+                          'INTDECL,FLOATDECL,DECL,SIZE,ALIGN,ISINT,'
+                          'S,T,I,N,SIGNED')         
                                                         :(DECLAREV_END)
*
PTRV     V = VTAB<V>
         IDENT(V)                                            :S(FRETURN)
         I = IDENT(I) 0
         PTRV = B + CV_OFFSET(V) + I * CV_SIZE(V)              :(RETURN)
*
STOREV   B = PTRV(B, V, I)                                   :F(FRETURN)
         V = VTAB<V>                          :($('STOREV_' CV_SIZE(V)))
STOREV_1 POKE_C(B, X)                                          :(RETURN)
STOREV_2 POKE_S(B, X)                                          :(RETURN)
STOREV_4 (EQ(CV_ISINT(V)) POKE_F(B, X))                       :S(RETURN)
         POKE_I(B, X)                                          :(RETURN)
STOREV_8 (EQ(CV_ISINT(V)) POKE_D(B, X))                       :S(RETURN)
         POKE_P(B, X)                                          :(RETURN)
*
LOADV    B = PTRV(B, V, I)                                   :F(FRETURN)
         V = VTAB<V>                           :($('LOADV_' CV_SIZE(V)))
LOADV_1  LOADV = PEEK_C(B)
         NE(CV_SIGN(V))                                       :S(RETURN)
         LOADV = LT(LOADV) (2 ** 8) + LOADV                    :(RETURN) 
LOADV_2  LOADV = PEEK_S(B)
                                                               :(RETURN)
         NE(CV_SIGN(V))                                       :S(RETURN)
         LOADV = LT(LOADV) (2 ** 16) + LOADV                   :(RETURN) 
LOADV_4  LOADV = EQ(CV_ISINT(V)) PEEK_F(B)                    :S(RETURN)
         LOADV = PEEK_I(B)
@

The next statement attempts to convert a negative 32 bit integer
to positive, keeping the same bit pattern. It will not work on a 32
CSNOBOL4 system. 2**32 will overflow, so only done on 64 bit system.
On a 32 bit system, all 32 bit integers are signed.

<<CVAR>>=
%IF (BITS EQ 32)
                                                               :(RETURN)
%ELSE
         NE(CV_SIGN(V))                                       :S(RETURN)
         LOADV = LT(LOADV) (2 ** 32) + LOADV                   :(RETURN)
%ENDIF
LOADV_8  LOADV = EQ(CV_ISINT(V)) PEEK_D(B)                    :S(RETURN)
         LOADV = PEEK_P(B)                                     :(RETURN)
*
NEWDECLV VTAB = TABLE()
         VOFFSET = 0                                           :(RETURN)
*
DECLAREV SIGN = ('signed' | 'SIGNED' | 'unsigned' | 'UNSIGNED') . S
         INT =  ('char' | 'CHAR' | 'short' | 'SHORT' | 'int' |
+                'INT' | 'long' | 'LONG' | 'pointer' | 'POINTER') . T
         FLOAT = ('float' | 'FLOAT' | 'double' | 'DOUBLE') . T
         AL = &UCASE &LCASE
         NU = &DIGITS
         SP = '_'
         BS = SPAN(' ' CHARS_TAB)
         BN = BS | NULL
         IDENT = (ANY(AL SP) (SPAN(AL NU SP) | NULL)) . I
         DIM = '[' BN SPAN(&DIGITS) . N BN ']'
         INTDECL = (SIGN BS INT) | SIGN | INT 
         FLOATDECL = FLOAT
         DECL = BN (INTDECL | FLOATDECL) BN IDENT BN (DIM | NULL)
*
         SIZE =
+           #'CHAR=1,SHORT=2,INT=4,LONG=8,POINTER=8,FLOAT=4,DOUBLE=8'
         ALIGN =
+           #'CHAR=1,SHORT=2,INT=4,LONG=8,POINTER=8,FLOAT=4,DOUBLE=8'
         ISINT =
+           #'CHAR=1,SHORT=1,INT=1,LONG=1,POINTER=1,FLOAT=,DOUBLE='
*
* ASSIGN PATTERN VARIABLE TO DEFAULTS - SIGNED INT [1]
*
         S = 'SIGNED'
         T = 'INT'
         I =
         N = 1
*
* SCAN THE DECLARATION, SETTING PATTERN VARIABLES S, T, I, N
*
         L DECL                                              :F(FRETURN)
*
* CONVERT T AND S TO UPPERCASE
*
         T = REPLACE(T, &LCASE, &UCASE)
         S = REPLACE(S, &LCASE, &UCASE)
*
* SIGNED = 1 IF SIGNED, 0 IF UNSIGNED
*
         SIGNED = 0
         S 'UNSIGNED'                                         :S(DECLV2)
         SIGNED = 1
*
* ADJUST OFFSET FOR ALIGNMENT
*
DECLV2   R = REMDR(VOFFSET, ALIGN<T>)
         VOFFSET = NE(R) VOFFSET + (ALIGN<T> - R)
*
* ALREADY DECLARED?
*
         V = VTAB<I>
         IDENT(V)                                            :F(FRETURN)
*
* CREATE CVAR() RECORD FOR NEW VARIABLE
*
         V = CVAR(VOFFSET, SIZE<T>, N, SIGNED, ISINT<T>)
*
* PUT VARIABLE INTO SYMBOL TABLE
*
         VTAB<I> = V
*
* ADJUST OFFSET BY SIZE OF NEW VARIABLE (INCLUDING DIMENSION)
*
         VOFFSET = VOFFSET + SIZE<T> * N
*
         DECLAREV = VOFFSET                                    :(RETURN)
*
DECLAREV_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'CVAR.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
<<INCLUDES>>
-STITL CVAR
-EJECT
*
************************************************************************
*                                                                      *
*                                                                      *
*                   #####   #     #     #     ######                   *
*                  #     #  #     #    # #    #     #                  *
*                  #        #     #   #   #   #     #                  *
*                  #        #     #  #     #  ######                   *
*                  #         #   #   #######  #   #                    *
*                  #     #    # #    #     #  #    #                   *
*                   #####      #     #     #  #     #                  *
*                                                                      *
* CVAR           C VARIABLE DECLARATIONS, AND LOAD/STORE               *
*                                                                      *
************************************************************************
*
* CVAR.lss
*
<<CVAR>>
*
* CE: .MSNOBOL4;
@
