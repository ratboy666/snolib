<h1>DSERVE - DDT Server (telnet)</h1>

[[DSERVE]] provides a method to allow debugging applications
that cannot normally be debugged. The application will call
[[DSERVE_INIT()]] to initialize. This creates a listener process
that waits for telnet connections. When a connection is made, two
processes will shuttle data between telnet and [[DDT]].

Runs in four physical processes: the primordial process which
creates two pipes, and returns to the application. The application
calls [[DSERVE()]] on a polling basis. The primordial processes
forks duing [[DSERVE_INIT()]], and the child process waits for
connection from telnet using [[SERV_LISTEN()]]. Once [[SERV_LISTEN()]]
returns with a new connection, it requests a login verification
(using the credential supplied to [[DSERVE_INIT()]]). If successful,
it writes a message to the primordial process. Remember that the
primordial process is polling for this message. When received, the
primordial process can enter [[DDT]] and resume the application in
debug state. When the message has been sent to primordial (from
the server handler process), the server handler forks. One side
handles copying from primordial to net, and the other handles copying
from net to primordial. So, the processes are:

[[
PRIMORDIAL
SERV_LISTEN
SERVER (BECOMES PRIMORDIAL -> NET COPY)
NET -> PRIMORDIAL COPY
]]

The primordial process communicates to the copy processes by means
of two pipes: one for each data flow.

Not very good at cleaning up the processes, but this does work.

This same idea can be used to gather logging data, or interact with
the running program in various ways. Using the debugger to "front-end"
these things is actually not a bad idea. It is be possible to send
the primordial process a SIGINT (error 34), which can be captured
with SETEXIT(). Note that this is currently the only signal which
can be used in this manner by CSNOBOL4 (1.5 and greater).

<h2>Uses</h2>

<<INCLUDES>>= 
-INCLUDE 'CHARS.INC'
-INCLUDE 'REPL.INC'
-INCLUDE 'CSNOBOL4.INC'
-INCLUDE 'TRIMB.INC'
-INCLUDE 'P64.INC'
-INCLUDE 'UNIX.INC'
-INCLUDE 'DDT.INC'
@

<<DSERVE>>=
-PUBLIC DSERVE_INIT(), DSERVE()
-PUBLIC DSERVE_PORT, DSERVE_APPNAME
*
         DEFINE('DSERVE_INIT(APPNAME,PORT,KEY)')      :(DSERVE_INIT_END)
*
DSERVE_INIT
         DSERVE_KEY = KEY
         DSERVE_PORT = PORT
         DSERVE_APPNAME = APPNAME
*
         P1 = PIPE()                                         :F(DSERVE9)
         DSERVE_P1_RFD = P1<1>
         DSERVE_P1_WFD = P1<2>
         P2 = PIPE()                                         :F(DSERVE9)
         DSERVE_P2_RFD = P2<1>
         DSERVE_P2_WFD = P2<2>
         PID = FORK()                                        :F(DSERVE9)
         LT(PID)                                             :S(DSERVE9)
         EQ(PID)                                             :S(DSERVE2)
*
* PRIMORDIAL PROCESS - POLLS WITH DSERVE() WAITING FOR CONNECTION AND
* DEBUGGER ENTRY
*
* NEEDS FD SET AND TIMEVAL FOR SELECT
*
         DSERVE_FDS = NEW_FD_SET()
         DSERVE_TV = NEW_TIMEVAL()                             :(RETURN)
*
DSERVE_INIT_END
*
         DEFINE('DSERVE()N,S')                             :(DSERVE_END)
*
* IF DDT IS ALREADY ACTIVE, WE ARE DEBUGGING THROUGH A DSERVE() POLL,
* JUST RETURN. IF DSERVE_APPNAME IS NULL, RETURN, DSERVE HAS NOT
* BEEN SET UP CORRECTLY YET.
*
DSERVE   NE(DDT_ACTIVE)                                       :S(RETURN)
         IDENT(DSERVE_APPNAME)                                :S(RETURN)
*
* SEE IF THERE IS INPUT AVAILABLE FROM THE NET. USE SELECT() TO POLL
* THE READ FILE DESCRIPTOR, WITH A TIMEOUT OF 0 (NO WAIT)
*
         SET_TIMEVAL(DSERVE_TV, 0, 0)
         FD_ZERO(DSERVE_FDS)
         FD_SET(DSERVE_P2_RFD, DSERVE_FDS)
         N = SELECT(DSERVE_P2_RFD + 1, DSERVE_FDS, 0, 0, DSERVE_TV)
         EQ(N)                                                :S(RETURN)
*
* WE HAVE DATA ON THE READ FD. CREATE I/O CHANNELS TO TELNET I/O
* PROCESSES.
*
         OUTPUT(.DDT_T, 10, 'W', '/dev/fd/' DSERVE_P1_WFD)   :F(DSERVE9)
         INPUT(.DDT_R, 11,, '/dev/fd/' DSERVE_P2_RFD)        :F(DSERVE9)
*
* READ MESSAGE FROM NET PROCESS. WE HAVE A MESSAGE TO BE READ
* (BUT IT MAY NOT BE COMPLETE YET). WE RELY ON NORMAL I/O MECHANISM
* TO DELIVER COMPLETE MESSAGE LINE.
*
         S = DDT_R
         IDENT(S, 'DDT')                                     :S(DSERVE7)
         DSERVE = S                                            :(RETURN)
DSERVE7  DDT_T = NE(DDT_ACTIVE) 'APP ALREADY IN DDT'          :S(RETURN)
         DDT_USE_R = 1
         DSERVE = 'DDT'
*
* THE MESSAGE IS 'DDT' WHICH MEANS ENTER DEBUGGER. THE DEBUGGER IS
* NOT YET ACTIVE. WHEN DSERVE() RETURNS, IT WILL BE UNDER DDT CONTROL.
* WE SET DDT_USE_R TO 1 TO INFORM DDT OF THE I/O NEEDED (READLINE
* CANNOT BE USED).
*
         DDT(DSERVE_APPNAME)
                                                               :(RETURN)
*
* CONNECTION LISTENER PROCESS
*
* CREATE I/O CHANNELS TO PRIMORDIAL PROCESS. THE PRIMORDIAL PROCESS
* WILL POLL WAITING FOR A MESSAGE TO BE WRITTEN TO TO_PRIMORDIAL.
*
DSERVE2  INPUT(.FROM_PRIMORDIAL, 12,, '/dev/fd/' DSERVE_P1_RFD)
+                                                            :F(DSERVE9)
         OUTPUT(.TO_PRIMORDIAL, 13, 'W', '/dev/fd/' DSERVE_P2_WFD)
+                                                            :F(DSERVE9)
*
* WAIT FOR A CONNECTION ON DSERVE_PORT
*
DSERVE3  FDN = SERV_LISTEN('inet', 'stream', DSERVE_PORT)    :F(DSERVE9)
         INPUT(.NET, 9, 'UWT', '/dev/fd/' FDN)               :F(DSERVE9)
         OUTPUT(.NET, 9)                                     :F(DSERVE9)
         CRLF = CHARS_CR CHARS_LF
*
* WE HAVE A CONNECTION. DISPLAY SIGNON, AND REQUEST LOGIN. THE LOGIN
* IS A SIMPLE STRING PASSED AS DSERVE_KEY
*
         NET = 'DSERVE ' DSERVE_APPNAME CRLF
         NET = CRLF
         NET = 'LOGIN REQUIRED: ' CRLF
         S = NET
         S = REPL(S, CRLF)
         S = TRIMB(S)
*
* LOGIN IS PLAINTEXT. THIS SHOULD ONLY BE USED OVER TELNET RUNNING ON
* THE SAME HOST AS THE APPLICATION BEING DEBUGGED. THERE IS NO USER
* NAME/PASSWORD -- JUST A SINGLE MAGIC WORD.
*
         IDENT(S, DSERVE_KEY)                                :S(DSERVE8)
         NET = 'BAD LOGIN' CRLF                                   :(END)
DSERVE8  NET = 'LOGIN CONFIRMED' CRLF
         NET = 'REDIRECT TO /dev/fd/' DSERVE_P1_WFD ' TO SEND OUTPUT '
+              'TO TELNET USING X (EG ls)'
*
* THE CORRECT KEY WAS SUPPLIED. SEND MESSAGE TO PRIMORDIAL.
*
         TO_PRIMORDIAL = 'DDT'
*
* FORK TO TWO COPY LOOPS: PRIMORDIAL -> NET AND NET -> PRIMORDIAL
*
         PID = FORK()
         LT(PID)                                             :S(DSERVE9)
         EQ(PID)                                            :S(DSERVE12)
*
* PRIMORDIAL -> NET COPY PROCESS
*
DSERVE11 S = FROM_PRIMORDIAL                                     :F(END)
         NET = S CRLF                                        :(DSERVE11)
*
* NET -> PRIMORDIAL COPY PROCESS
*
DSERVE12 S = NET                                                 :F(END)
         S = REPL(S, CHARS_CR)
         S = REPL(S, CHARS_LF)
         TO_PRIMORDIAL = S                                   :(DSERVE12)
*
DSERVE9  TERMINAL = 'DSERVE: INTERNAL FAILURE'                    :(END)
*
DSERVE_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'DSERVE.INC'
         &CODE = 1
*
* INITIALIZE DSERVE WITH APPLICATION NAME, PORT, AND SIGNON KEY
*
         DSERVE_INIT('DSERVE TEST', 54321, 'magic')
*
* THE APPLICATION. A SIMPLE COUNTING LOOP. AT THE BEGINNING OF EACH
* MAJOR LOOP, POLL DSERVE(), WHICH POSSIBLY ENTERS THE DEBUGGER.
*
LUP      DSERVE()
         MAJOR = MAJOR + 1
         TERMINAL = 'MAJOR = ' MAJOR
         N = 0
LUP2     N = N + 1
         LT(N, 10000000)                                  :S(LUP2)F(LUP)
         &CODE = 0
END
@

<<>>=
-MODULE DSERVE
<<INCLUDES>>
-IN72
-STITL DSERVE
-EJECT
*
************************************************************************
*                                                                      *
*         ######    #####   #######  ######   #     #  #######         *
*         #     #  #     #  #        #     #  #     #  #               *
*         #     #  #        #        #     #  #     #  #               *
*         #     #   #####   #####    ######   #     #  #####           *
*         #     #        #  #        #   #     #   #   #               *
*         #     #  #     #  #        #    #     # #    #               *
*         ######    #####   #######  #     #     #     #######         *
*                                                                      *
* DSERVE                  DDT TELNET SERVER                            *
*                                                                      *
************************************************************************
*
* DSERVE.lss
*
<<DSERVE>>
*
* CE: .MSNOBOL4;
@
