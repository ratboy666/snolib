<h1>DYNAMIC - Create Dynamic Modules for CSNOBOL4</h1>

Create dynamic modules for [[CSNOBOL4]].

<h2>Uses</h2>
<a href="BQ.html">BQ</a><br>
<a href="HOST.html">HOST</a><br>
<a href="REPL.html">REPL</a><br>

<<INCLUDES>>=
-INCLUDE 'BQ.INC'
-INCLUDE 'HOST.INC'
-INCLUDE 'REPL.INC'
@

<<DYNAMIC>>=
-MODULE DYNAMIC
-PUBLIC COMPILE_COBOL(), COMPILE_FORTRAN(), COMPILE_SCHEME()
-PUBLIC COMPILE_DYNAMIC(), LIBS_FORTRAN(), LIBS_COBOL(), LIBS_SCHEME()
DYNAMIC  DEFINE('COMPILE_COBOL(SRC)CMD,COBC')
         DEFINE('COMPILE_FORTRAN(SRC)CMD')
         DEFINE('COMPILE_SCHEME(SRC)CMD,CC,DL_CFLAGS,COPT')
         DEFINE('COMPILE_DYNAMIC(SRC)CMD,CC,DL_CFLAGS,COPT,CINC')
         DEFINE('LIBS_FORTRAN()')
         DEFINE('LIBS_COBOL()')
         DEFINE('LIBS_SCHEME()')                  :(COMPILE_DYNAMIC_END)
*
@

Return libraries needed for [[FORTRAN]] subprograms.

<<DYNAMIC>>=
LIBS_FORTRAN
         LIBS_FORTRAN = '-lgfortran'                           :(RETURN)
*
@

Return libraries needed for [[COBOL]] subprograms. Use [[cob-config]]
to provide the information needed.

<<DYNAMIC>>=
LIBS_COBOL
         LIBS_COBOL = BQ('cob-config --libs')                  :(RETURN)
*
@

Return libraries needed for [[SCHEME]] subprograms.

<<DYNAMIC>>=
LIBS_SCHEME
         LIBS_SCHEME = 'prog_.o -lgambc -ldl -lm -lutil'       :(RETURN)
@

Compile [[COBOL]] source to [[.o]], prior to building [[.so]] shared
object.  Uses [[cobc]] to compile [[COBOL]] to [[C]], and then [[gcc]]
to compile [[C]] to [[object]].

<<DYNAMIC>>=
*
* DYNAMIC COMPILE COBOL SOURCE
*
COMPILE_COBOL
         CMD = 'cobc -C ' SRC
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
*
         COBC = BQ('cob-config --cflags')
         SRC '.cbl' =
         SRC '.CBL' = 
         CC = HOST(HOST_CC)                                  :F(FRETURN)
         IDENT(CC)                                           :S(FRETURN)
         DL_CFLAGS = HOST(HOST_DL_CFLAGS) ' '
         COPT = HOST(HOST_COPT) ' '
         CMD = CC ' -c ' COPT DL_CFLAGS ' -DPIC -O3 ' COBC ' ' SRC '.c'
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
*
         DELETE(SRC '.c')
         DELETE(SRC '.c.h')
         DELETE(SRC '.c.l.h')                                  :(RETURN)
@

Compile [[FORTRAN]] source to [[.o]], prior to building [[.so]]
shared object. Uses [[gfortran]] as the compiler. [[-ff2c]] and
[[-std=legacy]] used to control parameter passing, and some details
of the compilation. I am mostly interested in running older code using
[[FORTRAN 77]] or earlier standards.

<<DYNAMIC>>=
*
* DYNAMIC COMPILE FORTRAN SOURCE
*
COMPILE_FORTRAN
         CMD = 'gfortran -c -fpic -O3 -ff2c -std=legacy ' SRC
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                     :F(FRETURN)S(RETURN)
*
@

Only compile in a single [[SCHEME]] module. In turn, that can load
other files as needed. The issue is the link file that is needed
(second invocation of [[gsc]] -- yes, it should be factored out).

<<DYNAMIC>>=
COMPILE_SCHEME
         CMD = 'gsc -c ' SRC
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
         SRC '.scm' = '.c'
         SRC '.six' = '.c'
         CMD = 'gsc -link -o prog_.c ' SRC
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
*
         CC = HOST(HOST_CC)                                  :F(FRETURN)
         IDENT(CC)                                           :S(FRETURN)
         DL_CFLAGS = HOST(HOST_DL_CFLAGS) ' '
         COPT = HOST(HOST_COPT) ' '
         CMD = CC ' -c -D___LIBRARY ' COPT DL_CFLAGS ' ' SRC ' prog_.c'
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
*
         DELETE(SRC)
         DELETE('prog_.c')                                     :(RETURN)
@

Compile [[C]] source to object. Uses the same compiler used for
building [[CSNOBOL4]] itself.

<<DYNAMIC>>=
*
* DYNAMIC COMPILE C SOURCE
*
COMPILE_DYNAMIC
         CC = HOST(HOST_CC)                                  :F(FRETURN)
         IDENT(CC)                                           :S(FRETURN)
         DL_CFLAGS = HOST(HOST_DL_CFLAGS) ' '
         COPT = HOST(HOST_COPT) ' '
         CINC = HOST(HOST_SNOLIB_DIR)
         CINC = HOST(HOST_INCLUDE_DIR)
         CMD = CC ' -c ' COPT DL_CFLAGS ' -I' CINC ' ' SRC
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                     :F(FRETURN)S(RETURN)
*
COMPILE_DYNAMIC_END
*
-PUBLIC LINK_DYNAMIC()
         DEFINE('LINK_DYNAMIC(OUT,OBJ,LIBS)'
+               'CMD,DL_LD,DL_EXT,DL_LDFLAGS,DSEP')  :(LINK_DYNAMIC_END)
*
LINK_DYNAMIC
         DL_LD = HOST(HOST_DL_LD)                            :F(FRETURN)
         IDENT(DL_LD)                                        :S(FRETURN)
         DL_EXT = HOST(HOST_DL_EXT)
         OUT = DIFFER(DL_EXT) OUT DL_EXT
         DL_LDFLAGS = HOST(HOST_DL_LDFLAGS) ' '
         CMD = DL_LD ' ' DL_LDFLAGS '-o ' OUT ' ' OBJ ' ' LIBS
         TERMINAL = DIFFER(DYNAMIC_DEBUG) CMD
         HOST(HOST_SYSCMD, CMD)                              :F(FRETURN)
         LINK_DYNAMIC = OUT
         DSEP = HOST(HOST_DIR_SEP)
         LINK_DYNAMIC BREAK(DSEP) DSEP                        :S(RETURN)
         LINK_DYNAMIC = '.' DSEP LINK_DYNAMIC                  :(RETURN)
LINK_DYNAMIC_END
*
* MAKE A DYNAMIC MODULE, GIVEN C SOURCES
* LIBS MAY CONTAIN BOTH OBJECTS AND LIBRARIES
*
-PUBLIC MAKE_DYNAMIC_MODULE()
         DEFINE('MAKE_DYNAMIC_MODULE(OUT,SRC,LIBS)OBJ')
                                              :(MAKE_DYNAMIC_MODULE_END)
MAKE_DYNAMIC_MODULE
         IDENT(SRC)                                         :S(MDM_LINK)
         COMPILE_DYNAMIC(SRC)                                :F(FRETURN)
         OBJ = REPL(SRC, '.o', '.c')
MDM_LINK IDENT(OBJ LIBS)                                     :S(FRETURN)
         MAKE_DYNAMIC_MODULE = LINK_DYNAMIC(OUT, OBJ, LIBS)  :F(FRETURN)
                                                               :(RETURN)
MAKE_DYNAMIC_MODULE_END
*
DYNAMIC_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'DYNAMIC.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
<<INCLUDES>>
-STITL DYNAMIC
-EJECT
*
************************************************************************
*                                                                      *
*    ######   #     #  #     #     #     #     #  ###   #####          *
*    #     #   #   #   ##    #    # #    ##   ##   #   #     #         *
*    #     #    # #    # #   #   #   #   # # # #   #   #               *
*    #     #     #     #  #  #  #     #  #  #  #   #   #               *
*    #     #     #     #   # #  #######  #     #   #   #               *
*    #     #     #     #    ##  #     #  #     #   #   #     #         *
*    ######      #     #     #  #     #  #     #  ###   #####          *
*                                                                      *
* DYNAMIC       CREATE DYNAMICALLY LOADABLE MODULE FOR LOAD()          *
*                                                                      *
* PHIL BUDNE, NOVEMBER 2005                                            *
*                                                                      *
************************************************************************
*
* DYNAMIC.lss
*
<<DYNAMIC>>
*
* CE: .MSNOBOL4;
@
