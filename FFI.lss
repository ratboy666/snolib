<h1>FFI - Foreign function interface</h1>

An interface to [[libffi]] providing a Foreign Function Interface
(FFI) for SNOBOL4.

<h2>Uses</h2>

When building, the following INCLUDEs are also needed:

<a href="BQ.html">BQ</a><br>
<a href="DYNAMIC.html">DYNAMIC</a><br>
<a href="WRAPPER.html">WRAPPER</a><br>
<a href="CRACK.html">CRACK</a><br>
<a href="SEQ.html">SEQ</a>

<<INCLUDES>>=
@

When building ffi.so the following INCLUDES are needed.

<<FFI>>=
-SNOBOL SLOAD('BQ.INC')
-SNOBOL SLOAD('DYNAMIC.INC')
-SNOBOL SLOAD('WRAPPER.INC')
-SNOBOL SLOAD('CRACK.INC')
-SNOBOL SLOAD('SEQ.INC')
-SNOBOL TERMINAL = 'FFI (MON NOV 11 12:50:40 EST 2013)'
@

<<FFI>>=
-EMBED C 'ffi'
@

<<FFI,TYPE=C>>=
-SNOBOL WRAPPER_STARTFILE(.EMBED)

#include <ffi.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>

static int errors;
static ffi_status ffi_error;

@

Interpret types - these are expressed as strings, separated by comma.
Spaces are ignored.

[[
U8, U16, U32, U64
S8, S16, S32, S64
F, D, E for FLOAT, DOUBLE, EXTENDED (E is LONG DOUBLE)
C, T, I, L, P for CHAR, SHORT, INT, LONG, POINTER
]]

Default is SIGNED, 32 bit
Examine string encoded type in [[**s]], return ffi_type pointer,
or NULL. Increment [[errors]] on an error.

<<FFI,TYPE=C>>=

static void *interpret_ptype(char **s)
{
    int w = 32;
    int t = 2;
    if (**s == ',')
	++(*s);
    if (**s == 0)
	return NULL;
    for (; **s && (**s != ','); ++(*s)) {
	switch (**s) {
	case ' ':
	case '3':
	case '6':         break;
	case 'v':
	case 'V': t =  0; break;
	case 'u':
	case 'U': t =  1; break;
	case 's':
	case 'S': t =  2; break;
	case 'f':
	case 'F': t =  3; break;
	case 'd':
	case 'D': t =  4; break;
	case 'p':
	case 'P': t =  5; break;
	case 'e':
	case 'E': t =  6; break;
	case 'c':
	case 'C':
	case '8': w =  8; break;
	case '1': w = 16; break;
	case 'i':
	case 'I':
	case '2': w = 32; break;
	case 'l':
	case 'L':
	case '4': w = 64; break;
	default: ++errors; return NULL;
	}
    }
    switch (t) {
    case 0: return &ffi_type_void;
    case 1: switch (w) {
	    case  8: return &ffi_type_uint8;
	    case 16: return &ffi_type_uint16;
	    case 32: return &ffi_type_uint32;
	    case 64: return &ffi_type_uint64;
	    default: ++errors; return NULL;
	    }
    case 2: switch (w) {
	    case  8: return &ffi_type_sint8;
	    case 16: return &ffi_type_sint16;
	    case 32: return &ffi_type_sint32;
	    case 64: return &ffi_type_sint64;
	    default: +errors; return NULL;
	    }
    case 3: return &ffi_type_float;
    case 4: return &ffi_type_double;
    case 5: return &ffi_type_pointer;
    case 6: return &ffi_type_longdouble;
    default: ++errors; return NULL;
    }
    ++errors;
    return NULL;
}

@

Structure describing an FFI call. Contains the [[ffi_cif]],
vectors for the argument types, argument pointers [[arg_ptrs]], the
[[result]] and its type ([[result_type]]), [[nargs]] - number of
arguments, and a vector which indicates whether [[free()]] is needed
on the parameter after the call returns.

<<FFI,TYPE=C>>=

typedef struct {
    ffi_cif *cif;
    ffi_type **arg_types;
    ffi_arg *arg_values;
    void **arg_ptrs;
    int *arg_needfree;
    ffi_type *result_type;
    ffi_arg result;
    int nargs;
    void *callp;
} ffi_t;

@

Create a new FFI descriptor, given return type [[*r]] with argument
types [[*s]]. Return 0 on error, else the new descriptor.

<<FFI,TYPE=C>>=

static long ffi_new(char *r, char *s)
{
    ffi_t *ffip;
    int n = 0;
    char *s2 = s;
    ffi_error = FFI_OK;
    ffip = malloc(sizeof(ffi_t));
    if (ffip == NULL) {
	return 0;
    }
    ffip->result_type = interpret_ptype(&r);
    if (ffip->result_type == NULL) {
	return 0;
    }
    errors = 0;
    while (interpret_ptype(&s)) {
	++n;
	if (errors)
	    return 0;
    }
    ffip->nargs = n;
    if (n == 0)
	n = 1;
    ffip->cif = malloc(sizeof(ffi_cif));
    ffip->arg_types = malloc((n + 1) * (sizeof(ffi_type *)));
    ffip->arg_values = malloc((n + 1) * (sizeof(ffi_arg)));
    ffip->arg_needfree = malloc((n + 1) * (sizeof(int)));
    ffip->arg_ptrs = malloc((n + 1) * (sizeof(void *)));
    if ((ffip->arg_types == NULL) ||
	(ffip->arg_values == NULL) ||
	(ffip->arg_ptrs == NULL) ||
	(ffip->arg_needfree == NULL) ||
	(ffip->cif == NULL))
	return 0;
    s = s2;
    n = 0;
    while ((ffip->arg_types[n] = interpret_ptype(&s)) != NULL) {
	ffip->arg_ptrs[n] = &ffip->arg_values[n];
	ffip->arg_needfree[n] = 0;
	++n;
    }
    ffi_error = ffi_prep_cif(ffip->cif,
			     FFI_DEFAULT_ABI,
			     ffip->nargs,
			     ffip->result_type,
			     ffip->arg_types);
    if (ffi_error != FFI_OK)
	return 0;
    return (long)ffip;
}

-SNOBOL C_WRAPPER_PROTO('FFI_NEW(STRING,STRING)LONG', .EMBED)

@

Clear FFI descriptor after a call has been made. Deallocates
([[free()]]) any parameters indicated by [[arg_needfree]].

<<FFI,TYPE=C>>=

static void ffi_clear(long p)
{
    ffi_t *ffip = (void *)p;
    int i;
    for (i = 0; i < ffip->nargs; ++i) {
	if (ffip->arg_needfree[i]) {
	    free((void *)ffip->arg_values[i]);
	    ffip->arg_needfree[i] = 0;
	}
    }
}

-SNOBOL C_WRAPPER_PROTO('FFI_CLEAR(LONG)', .EMBED)

@

Destroy FFI descriptor.

<<FFI,TYPE=C>>=

static void ffi_free(long p)
{
    ffi_t *ffip = (void *)p;
    free(ffip->arg_values);
    free(ffip->arg_types);
    free(ffip->arg_needfree);
    free(ffip->cif);
    free(ffip);
}

-SNOBOL C_WRAPPER_PROTO('FFI_FREE(LONG)', .EMBED)

@

Indicate that parameter [[n]] (counting from 1) requires deallocation
([[free()]]) after call.

<<FFI,TYPE=C>>=

static int ffi_par_n_needfree(long p,int n)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_needfree[n - 1] = 1;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_NEEDFREE(LONG,INTEGER)PREDICATE',   +
           .EMBED)

@

Set value of parameter [[n]] to integer [[v]] (32 bit).

<<FFI,TYPE=C>>=

static int ffi_par_n_integer(long p, int n, int v)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = v;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_INTEGER('                       +
                        'LONG,INTEGER,INTEGER)PREDICATE', .EMBED)

@

Set value of parameter [[n]] to double [[v]]. Nominally type [[double]]
but this should be useable to get a REAL parameter into a double.

<<FFI,TYPE=C>>=

static int ffi_par_n_real(long p, int n, double v)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = v;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_REAL('                              +
                        'LONG,INTEGER,REAL)PREDICATE', .EMBED)

@

Set value of parameter [[n]] to 64 bit [[p]]. [[p2]] will be the
FFI descriptor and [[p]] the 64 bit long or pointer argument.

<<FFI,TYPE=C>>=

static int ffi_par_n_ptr(long p, int n, long p2)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = (long)p2;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_PTR(LONG,INTEGER,LONG)PREDICATE',   +
                        .EMBED)

@

Set value of parameter [[n]] to float [[f]].

<<FFI,TYPE=C>>=

static int ffi_par_n_f(long p, int n, double f)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = (float)f;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_F(LONG,INTEGER,REAL)PREDICATE',     +
                        .EMBED)

@

Set value of parameter [[n]] to double [[d]].

<<FFI,TYPE=C>>=

static int ffi_par_n_d(long p, int n, double d)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = (double)d;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_D(LONG,INTEGER,REAL)PREDICATE',     +
                        .EMBED)

@

Set value of parameter [[n]] to long double [[ld]].

<<FFI,TYPE=C>>=

static int ffi_par_n_ld(long p, int n, double d)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
	return 0;
    ffip->arg_values[n - 1] = (long double)d;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_LD(LONG,INTEGER,REAL)PREDICATE',    +
                        .EMBED)

@

Set value of parameter [[n]] to string [[s]]. Uses [[strdup()]] to make
a copy of the string, and marks it for [[free()]] after call returns.

<<FFI,TYPE=C>>=

static int ffi_par_n_string(long p, int n, char *s)
{
    ffi_t *ffip = (void *)p;
    if ((n < 1) || (n > ffip->nargs))
        return 0;
    ffip->arg_values[n - 1] = (long)strdup(s);
    if (ffip->arg_values[n - 1] == (long)NULL)
        return 0;
    ffip->arg_needfree[n - 1] = 1;
    return 1;
}

-SNOBOL C_WRAPPER_PROTO('FFI_PAR_N_STRING('                            +
                        'LONG,INTEGER,STRING)PREDICATE', .EMBED)

@

Set pointer to function in FFI descriptor.

<<FFI,TYPE=C>>=

/* CIF in P2, FN in P */
static void ffi_set_callp(long p2, long p)
{
    ffi_t *ffip = (void *)p2;
    ffip->callp = (void *)p;
}

-SNOBOL C_WRAPPER_PROTO('FFI_SET_CALLP(LONG,LONG)', .EMBED)

@

Call FFI function.

<<FFI,TYPE=C>>=

static void call_ffi(long p)
{
    ffi_t *ffip = (void *)p;
    ffi_call(ffip->cif, FFI_FN(ffip->callp),
	     &ffip->result, ffip->arg_ptrs);
}

-SNOBOL C_WRAPPER_PROTO('CALL_FFI(LONG)', .EMBED)

/* Return address of call result, use peek_() function to retrieve */
static long ffi_resultp(long p)
{
    ffi_t *ffip = (void *)p;
    return (long)(&(ffip->result));
}

-SNOBOL C_WRAPPER_PROTO('FFI_RESULTP(LONG)LONG', .EMBED)

@

Simplified calls, actually returning result (instead of just leaving
it in the ffi structure).

<<FFI,TYPE=C>>=

static long call_integer_ffi(long p)
{
    ffi_t *ffip = (void *)p;
    ffi_call(ffip->cif, FFI_FN(ffip->callp),
	     &ffip->result, ffip->arg_ptrs);
    return (long)ffip->result;
}

-SNOBOL C_WRAPPER_PROTO('CALL_INTEGER_FFI(LONG)INTEGER', .EMBED)

static long call_ptr_ffi(long p)
{
    ffi_t *ffip = (void *)p;
    ffi_call(ffip->cif, FFI_FN(ffip->callp),
	     &ffip->result, ffip->arg_ptrs);
    return (long)ffip->result;
}

-SNOBOL C_WRAPPER_PROTO('CALL_PTR_FFI(LONG)LONG', .EMBED)

/* WARNING - Be careful with floating point calls - assigning through
 * generic result (ffip->result) doesn't actually work. Instead, we
 * provide a variable here to hold the result. FIXME. In future,
 * perhaps provide double and float variables as targets in ffi_t
 * -- but, this works as a stopgap measure.
 */
static double call_real_ffi(long p)
{
    ffi_t *ffip = (void *)p;
    double result;
    ffi_call(ffip->cif, FFI_FN(ffip->callp),
	     &result, ffip->arg_ptrs);
    return result;
//    ffi_call(ffip->cif, FFI_FN(ffip->callp),
//	     &ffip->result, ffip->arg_ptrs);
//    return (double)ffip->result;
}

-SNOBOL C_WRAPPER_PROTO('CALL_REAL_FFI(LONG)REAL', .EMBED)

static char *call_string_ffi(long p)
{
    ffi_t *ffip = (void *)p;
    ffi_call(ffip->cif, FFI_FN(ffip->callp),
	     &ffip->result, ffip->arg_ptrs);
    return (char *)ffip->result;
}

-SNOBOL C_WRAPPER_PROTO('CALL_STRING_FFI(LONG)STRING', .EMBED)

@

DL (Dynamic Library) functions, Open, close, retrieve error and
resolve symbols in an external library (or within the program itself,
if a handle of NULL is used).

<<FFI,TYPE=C>>=

/* DL functions
 */
static long dlopen_(char *s, int n) { return (long)dlopen(s, n); }

-SNOBOL C_WRAPPER_PROTO('DLOPEN_(STRING,INTEGER)LONG', .EMBED)

static char *dlerror_(void)
{
    char *s = dlerror();
    if (s == NULL) return "";
    return s;
}

-SNOBOL C_WRAPPER_PROTO('DLERROR_()STRING', .EMBED)

static long dlsym_(long p, char *s)
{
    return (long)dlsym((void *)p, s);
}

-SNOBOL C_WRAPPER_PROTO('DLSYM_(LONG,STRING)LONG', .EMBED)

static int dlclose_(long p) { return dlclose((void *)p); }

-SNOBOL C_WRAPPER_PROTO('DLCLOSE_(LONG)INTEGER', .EMBED)

-END
@

Build ffi.so.

<<FFI>>=
-SNOBOL DYNAMIC_DEBUG = 1
-SNOBOL COMPILE_DYNAMIC(ffi) :F(ERROR) ;
-SNOBOL LIBS = '-lffi -ldl'
-SNOBOL OBJECTS = ffi ; OBJECTS '.c' = '.o'
-SNOBOL LINK_DYNAMIC('./ffi', OBJECTS, LIBS) :F(ERROR) ;
-CMNT ERASE TEMPORARY FILES
-CMNT     WE DON'T NEED THE C BITS, OR THE OBJECT FILES ANYMORE.
-CMNT     ALL WE REQUIRE IS FFI.SO
-CMNT -SNOBOL A = CRACK(ffi ' ' OBJECTS, ' ')
-CMNT -SNOBOL SEQ(' DELETE(A<K>) ', .K)
@

Actually [[LOAD()]] the functions defined into CSNOBOL4.

<<FFI>>=
         LOAD('FFI_FREE(INTEGER)', 'ffi.so')
         LOAD('FFI_CLEAR(INTEGER)', 'ffi.so')
         LOAD('FFI_NEW(STRING,STRING)INTEGER', 'ffi.so')
         LOAD('FFI_PAR_N_NEEDFREE(INTEGER,INTEGER)', 'ffi.so')
         LOAD('FFI_PAR_N_INTEGER(INTEGER,INTEGER,INTEGER)', 'ffi.so')
         LOAD('FFI_PAR_N_PTR(INTEGER,INTEGER,INTEGER)', 'ffi.so')
         LOAD('FFI_PAR_N_REAL(INTEGER,INTEGER,REAL)', 'ffi.so')
         LOAD('FFI_PAR_N_STRING(INTEGER,INTEGER,STRING)', 'ffi.so')
         LOAD('FFI_PAR_N_F(INTEGER,INTEGER,REAL)', 'ffi.so')
         LOAD('FFI_PAR_N_D(INTEGER,INTEGER,REAL)', 'ffi.so')
         LOAD('FFI_PAR_N_LD(INTEGER,INTEGER,REAL)', 'ffi.so')
         LOAD('FFI_SET_CALLP(INTEGER,INTEGER)', 'ffi.so')
         LOAD('FFI_RESULTP(INTEGER)INTEGER', 'ffi.so')
         LOAD('CALL_FFI(INTEGER)', 'ffi.so')
         LOAD('CALL_INTEGER_FFI(INTEGER)INTEGER', 'ffi.so')
         LOAD('CALL_PTR_FFI(INTEGER)INTEGER', 'ffi.so')
         LOAD('CALL_REAL_FFI(INTEGER)REAL', 'ffi.so')
         LOAD('CALL_STRING_FFI(INTEGER)STRING', 'ffi.so')
*
         RTLD_LAZY   = 1
         RTLD_NOW    = 2
         RTLD_GLOBAL = 256
         RTLD_LOCAL  = 0
*
         LOAD('DLOPEN_(STRING,INTEGER)INTEGER', 'ffi.so')
         LOAD('DLERROR_()STRING', 'ffi.so')
         LOAD('DLSYM_(INTEGER,STRING)', 'ffi.so')
         LOAD('DLCLOSE_(INTEGER)INTEGER', 'ffi.so')
*
@

The actual “API” for FFI.

<<FFI>>=
-PUBLIC DLOPEN(), DLERROR(), DLSYM(), DLCLOSE()
*
         DEFINE('DLOPEN(S,I)')
         DEFINE('DLERROR()')
         DEFINE('DLSYM(H,S)')
         DEFINE('DLCLOSE(H)')
*
-PUBLIC FFI_NEW(), FFI_FREE(), FFI_CLEAR(), FFI_PAR_N_NEEDFREE()
-PUBLIC FFI_PAR_N_INTEGER(), FFI_PAR_N_PTR(), FFI_PAR_N_REAL()
-PUBLIC FFI_PAR_N_STRING(),  FFI_SET_CALLP()
-PUBLIC FFI_CALL_VOID(), FFI_CALL_INTEGER(), FFI_CALL_REAL()
-PUBLIC FFI_CALL_STRING(), FFI_CALL_PTR(), CALL_FFI(), FFI_RESULTP()
*
         DEFINE('FFI_CALL_INTEGER(FFI)')
         DEFINE('FFI_CALL_REAL(FFI)')
         DEFINE('FFI_CALL_STRING(FFI)')
         DEFINE('FFI_CALL_PTR(FFI)')
         DEFINE('FFI_CALL_VOID(FFI)')                         :(FFI_END)
*
DLOPEN   DLOPEN = DLOPEN_(S, I)                                :(RETURN)
*
DLERROR  DLERROR = DLERROR_()                                  :(RETURN)
*
DLSYM    DLSYM = DLSYM_(H, S)                                  :(RETURN)
*
DLCLOSE  DLCLOSE = DLCLOSE_(H)                                 :(RETURN)
*
FFI_CALL_VOID
         CALL_FFI(FFI)
         FFI_CLEAR(FFI)                                        :(RETURN)
*
FFI_CALL_INTEGER
         FFI_CALL_INTEGER = CALL_INTEGER_FFI(FFI)
         FFI_CLEAR(FFI)                                        :(RETURN)
*
FFI_CALL_REAL
         FFI_CALL_REAL = CALL_REAL_FFI(FFI)
         FFI_CLEAR(FFI)                                        :(RETURN)
*
FFI_CALL_STRING
         FFI_CALL_STRING = CALL_STRING_FFI(FFI)
         FFI_CLEAR(FFI)                                        :(RETURN)
*
FFI_CALL_PTR
         FFI_CALL_PTR = CALL_PTR_FFI(FFI)
         FFI_CLEAR(FFI)                                        :(RETURN)
*
FFI_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'FFI.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
-MODULE FFI
-CASE 1
-PLUSOPS 1
<<INCLUDES>>
-IN72
-STITL FFI
-EJECT
*
************************************************************************
*                                                                      *
*                         #######  #######  ###                        *
*                         #        #         #                         *
*                         #        #         #                         *
*                         #####    #####     #                         *
*                         #        #         #                         *
*                         #        #         #                         *
*                         #        #        ###                        *
*                                                                      *
* FFI                  FOREIGN FUNCTION INTERFACE                      *
*                                                                      *
************************************************************************
*
* FFI.lss
*
<<FFI>>
*
* CE: .F.MSNOBOL4;
@
