<h1>INFINIP - Infinite precision integer math</h1>

Infinite precision integer math.

<h2>Uses</h2>
<a href="REDEFINE.html">REDEFINE</a><br>
<a href="SWAP.html">SWAP</a>

<<INCLUDES>>=
-INCLUDE 'REDEFINE.INC'
-INCLUDE 'SWAP.INC'
@

<<INFINIP>>=
         SIGN_OFF  = POS(0) '-'
         LDG_ZEROS = BREAK('123456789') | RTAB(1)
         NO_DIGITS = 4
*
         DEFINE('XYZERO()')
         DEFINE('INFFLOAT()')
         DEFINE('SMALL()')
         DEFINE('SPLIT(NAME,PAT)')
         DEFINE('INFINIP_START()')
         DEFINE('INFINIP_STOP()')                         :(INFINIP_END)
*
INFINIP_START
         REDEFINE('-', 'MINUS(X)Y')
         REDEFINE(   , 'GT(X,Y)')
         REDEFINE(   , 'EQ(X,Y)')
         REDEFINE(   , 'GE(X,Y)')
         REDEFINE(   , 'NE(X,Y)')
         REDEFINE(   , 'LT(X,Y)')
         REDEFINE(   , 'LE(X,Y)')
         REDEFINE('-', 'DIFF(X,Y)')
         REDEFINE('+', 'SUM(X,Y)X1,X2,Y1,Y2,K')
         REDEFINE('*', 'MULT(X,Y)X1,X2,K')
         REDEFINE('/', 'DIV(X,Y)X1,X2,Y1,Y2,T,T1,T2,KX,KY')
         REDEFINE(   , 'REMDR(X,Y)')                           :(RETURN)
*
INFINIP_STOP
         REDEFINERESTORE('-', 'MINUS(X)Y')
         REDEFINERESTORE(   , 'GT(X,Y)')
         REDEFINERESTORE(   , 'EQ(X,Y)')
         REDEFINERESTORE(   , 'GE(X,Y)')
         REDEFINERESTORE(   , 'NE(X,Y)')
         REDEFINERESTORE(   , 'LT(X,Y)')
         REDEFINERESTORE(   , 'LE(X,Y)')
         REDEFINERESTORE('-', 'DIFF(X,Y)')
         REDEFINERESTORE('+', 'SUM(X,Y)X1,X2,Y1,Y2,K')
         REDEFINERESTORE('*', 'MULT(X,Y)X1,X2,K')
         REDEFINERESTORE('/', 'DIV(X,Y)X1,X2,Y1,Y2,T,T1,T2,KX,KY')
         REDEFINERESTORE(   , 'REMDR(X,Y)')                    :(RETURN)
*
* FMGW:
* ADDED XYZERO TO ALLOW '' + 1 ETC. TO WORK AS NORMAL
* INFFLOAT TO ALLOW REAL TO WORK AS NORMAL
*
* THERE IS STILL THE PROBLEM OF MIXING A LARGE INTEGER WITH A REAL IN
* ARITHMETIC. THIS WILL NOT WORK CORRECTLY. IF THE LARGE INTEGER CANNOT
* BE CONVERTED, AN ERROR WILL BE RAISED. WE SHOULD CHECK THE RANGE,
* AND CONVERT THE INTEGER TO REAL OURSELVES. THIS CAN BE DONE IN
* THE INFFLOAT() FUNCTION. NOTE THAT INFFLOAT() IS CALLED AFTER
* XYZERO(), SO BOTH X AND Y ARE (AT LEAST) 0, AND NOT THE EMPTY STRING.
*
* XYZERO() AND INFFLOAT() COULD BE MERGED, BUT ARE KEPT SEPARATE FOR
* CLARITY.
*
* INFINIP_START() AND INFINIP_STOP() ADDED TO CONTROL THE REDEFINITION
* OF OPERATIONS.
*
INFFLOAT DATATYPE(X) 'REAL'                                   :S(RETURN)
         DATATYPE(Y) 'REAL'                                   :S(RETURN)
                                                              :(FRETURN)
*
XYZERO   X = IDENT(X) 0
         Y = IDENT(Y) 0                                        :(RETURN)
*
SMALL    (LE.(SIZE(X), NO_DIGITS)
+         LE.(SIZE(Y), NO_DIGITS))                  :S(RETURN)F(FRETURN)
*
SPLIT    PAT = IDENT(PAT) LEN(SIZE($NAME) / 2)
         $NAME (PAT | '') . $(NAME 1) @SPLIT  (SPAN('0') | '')
+           REM . $(NAME 2)
         SPLIT = SIZE($NAME) - SPLIT                           :(RETURN)
*
MINUS    XYZERO()
         MINUS = INFFLOAT() MINUS.(X)                         :S(RETURN)
         MINUS = SMALL() MINUS.(X)                            :S(RETURN)
         MINUS = X
         MINUS SIGN_OFF =                                     :S(RETURN)
         MINUS = '-' X                                         :(RETURN)
*
GT       XYZERO()
         INFFLOAT()                                             :S(GT_3)
         SMALL()                                                :F(GT_1)
GT_3     GT.(X,Y)                                   :S(RETURN)F(FRETURN)
GT_1     X SIGN_OFF =                                           :F(GT_2)
         Y SIGN_OFF =                                        :F(FRETURN)
         SWAP(.X, .Y)
GT_2     Y SIGN_OFF =                                         :S(RETURN)
         LGT(LPAD(X, SIZE(Y), '0'),
+            LPAD(Y, SIZE(X), '0'))                 :S(RETURN)F(FRETURN)
*
EQ       XYZERO()
         INFFLOAT()                                             :S(EQ_2)
         SMALL()                                                :F(EQ_1)
EQ_2     EQ.(X, Y)                                  :S(RETURN)F(FRETURN)
EQ_1     IDENT(X, Y)                                :S(RETURN)F(FRETURN)
*
GE       ~(~GT(X, Y) ~EQ(X, Y))                     :S(RETURN)F(FRETURN)
*
NE       EQ(X, Y)                                   :S(FRETURN)F(RETURN)
*
LT       GE(X, Y)                                   :S(FRETURN)F(RETURN)
*
LE       GT(X, Y)                                   :S(FRETURN)F(RETURN)
*
DIFF     DIFF = X + -Y                                         :(RETURN)
*
SUM      XYZERO()
         SUM = INFFLOAT() SUM.(X, Y)                          :S(RETURN)
         SUM = SMALL() SUM.(X, Y)                             :S(RETURN)
         SUM = LT(X,0) -(-X + -Y)                             :S(RETURN)
         Y SIGN_OFF =                                          :S(SUM_1)
         (LT(X, Y) SWAP(.X, .Y))
         K = SPLIT(.X)
         Y = Y + X2
         SPLIT(.Y, RTAB(K))
         SUM = (Y1 + X1) LPAD(Y2, K, '0')                      :(RETURN)
SUM_1    SUM = GT(Y, X) -(Y - X)                              :S(RETURN)
         Y = LPAD(Y, SIZE(X), '0')
* ADD 10's COMPLEMENT OF Y
         SUM = X + 1 + REPLACE(Y, '0123456789', '9876543210')
         SUM '1' LDG_ZEROS REM . SUM                           :(RETURN)
*
MULT     XYZERO()
         MULT = INFFLOAT() MULT.(X, Y)                        :S(RETURN)
         MULT = LE(SIZE(X) + SIZE(Y), NO_DIGITS)
+           MULT.(X, Y)                                       :S(RETURN)
         MULT = LT(X, 0) -X * -Y                              :S(RETURN)
         MULT = LT(Y, 0) -(X * -Y)                            :S(RETURN)
         (GT(Y, X)  SWAP(.X, .Y))
         MULT = EQ(Y, 0) 0                                    :S(RETURN)
         K = SPLIT(.X)
         MULT = (Y * X1) DUPL('0', K)
         MULT = MULT + X2 * Y                                  :(RETURN)
*
DIV      XYZERO()
         DIV = INFFLOAT() DIV.(X, Y)                          :S(RETURN)
         DIV = SMALL() DIV.(X, Y)                             :S(RETURN)
         DIV = LT(X, 0) -(-X / Y)                             :S(RETURN)
         DIV = LT(Y, 0) -(X / -Y)                             :S(RETURN)
         DIV = GT(Y, X) 0                                     :S(RETURN)
* ORIGINAL STATEMENTS FROM BOOK:
*        KY = SPLIT(.Y, LEN(NO_DIGITS / 2) | REM)
*        KX = SPLIT(.X, LEN(NO_DIGITS))
* SUGGESTED REPLACEMENT TO AVOID GENERATING ERROR TERMS THAT ARE
* LARGER THAN THE INCOMING NUMERATOR. SUCH A SITUATION CAN PRODUCE
* CYCLES.
         KY = SPLIT(.Y, LEN(NO_DIGITS / 2) | REM)
         KX = SPLIT(.X, LEN(NO_DIGITS / 2) | REM)
         KX = LT.(X1, Y1) SPLIT(.X, LEN(NO_DIGITS / 2 + 1) | REM)
* END OF REPLACEMENT STATEMENTS.
         T1 = X1 / Y1
         T2 = DUPL('0', KX - KY)
         T = X - ((T1 * Y)  T2)
         DIV = T1 T2
         T = LT(T, 0) T + 1 - Y
         DIV = DIV + (T / Y)                                   :(RETURN)
*
REMDR    REMDR = X - (X / Y) * Y                               :(RETURN)
*
INFINIP_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'INFINIP.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
<<INCLUDES>>
-STITL INFINIP
-EJECT
*
************************************************************************
*                                                                      *
*            ###  #     #  #######  ###  #     #  ###  ######          *
*             #   ##    #  #         #   ##    #   #   #     #         *
*             #   # #   #  #         #   # #   #   #   #     #         *
*             #   #  #  #  #####     #   #  #  #   #   ######          *
*             #   #   # #  #         #   #   # #   #   #               *
*             #   #    ##  #         #   #    ##   #   #               *
*            ###  #     #  #        ###  #     #  ###  #               *
*                                                                      *
* INFINIP          INFINITE PRECISION INTEGER MATH                     *
*                                                                      *
************************************************************************
*
* INFINIP.lss
*
<<INFINIP>>
*
* CE: .MSNOBOL4;
@
