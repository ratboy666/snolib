-LINE 16 "JIT.lss"
-INCLUDE 'CRACK.INC'
-INCLUDE 'SEQ.INC'
-INCLUDE 'P64.INC'
-STITL JIT
-EJECT
-LINE 2094 "JIT.lss"
*
************************************************************************
*                                                                      *
*                              #  ###  #######                         *
*                              #   #      #                            *
*                              #   #      #                            *
*                              #   #      #                            *
*                        #     #   #      #                            *
*                        #     #   #      #                            *
*                         #####   ###     #                            *
*                                                                      *
* JIT                JUST-IN-TIME CODE GENERATION                      *
*                                                                      *
************************************************************************
*
* QMUL/QDIV NOT YET SUPPORTED
*
* JIT.lss
*
-LINE 22 "JIT.lss"
-CASE 1
-PLUSOPS 1
-SNOBOL TERMINAL = 'JIT (THU JUL  4 14:54:49 EDT 2013)'
-LINE 25 "JIT.lss"
-SNOBOL SLOAD('CRACK.INC')
-LINE 26 "JIT.lss"
-SNOBOL SLOAD('SEQ.INC')
-LINE 27 "JIT.lss"
-SNOBOL SLOAD('DYNAMIC.INC')
-LINE 28 "JIT.lss"
-SNOBOL SLOAD('WRAPPER.INC')
-LINE 29 "JIT.lss"
-LINE 32 "JIT.lss"
-EMBED C 'jit'
#line 36 "JIT.lss"
-SNOBOL WRAPPER_STARTFILE(.EMBED)
#line 37 "JIT.lss"

#include <lightning.h>
#include "p64.h"

/* Setup, state and misc */
-SNOBOL C_WRAPPER_PROTO('INIT_JIT(STRING)', .EMBED)
#line 43 "JIT.lss"
-SNOBOL C_WRAPPER_PROTO('FINISH_JIT()', .EMBED)
#line 44 "JIT.lss"

static jit_state_t *_jit;

static void get_state_jit(void) { p = _jit; }

-SNOBOL C_WRAPPER_PROTO('GET_STATE_JIT()', .EMBED)
#line 50 "JIT.lss"

static void set_state_jit(void) { _jit = p; }

-SNOBOL C_WRAPPER_PROTO('SET_STATE_JIT()', .EMBED)
#line 54 "JIT.lss"

static void new_state_jit(void) { p = jit_new_state(); }

-SNOBOL C_WRAPPER_PROTO('NEW_STATE_JIT()', .EMBED)
#line 58 "JIT.lss"

static void destroy_state_jit(void) { jit_destroy_state(); }

-SNOBOL C_WRAPPER_PROTO('DESTROY_STATE_JIT()', .EMBED)
#line 62 "JIT.lss"

static void clear_state_jit(void) { jit_clear_state(); }

-SNOBOL C_WRAPPER_PROTO('CLEAR_STATE_JIT()', .EMBED)
#line 66 "JIT.lss"

static void prolog_jit(void) { jit_prolog(); }

-SNOBOL C_WRAPPER_PROTO('PROLOG_JIT()', .EMBED)
#line 70 "JIT.lss"

static void epilog_jit(void) { jit_epilog(); }

-SNOBOL C_WRAPPER_PROTO('EPILOG_JIT()', .EMBED)
#line 74 "JIT.lss"

static void note_jit(char *s, int n) { p = jit_note(s, n); }

-SNOBOL C_WRAPPER_PROTO('NOTE_JIT(STRING,INTEGER)', .EMBED)
#line 78 "JIT.lss"

static void name_jit(char *s) { p = jit_name(s); }

-SNOBOL C_WRAPPER_PROTO('NAME_JIT(STRING)', .EMBED)
#line 82 "JIT.lss"

static void address_jit(void) { p = jit_address(p); }

-SNOBOL C_WRAPPER_PROTO('ADDRESS_JIT()', .EMBED)
#line 86 "JIT.lss"

static void disassemble_jit(void) { jit_disassemble(); }

-SNOBOL C_WRAPPER_PROTO('DISASSEMBLE_JIT()', .EMBED)
#line 90 "JIT.lss"

static void emit_jit(void) { p = jit_emit(); }

-SNOBOL C_WRAPPER_PROTO('EMIT_JIT()', .EMBED)
#line 94 "JIT.lss"

static void print_jit(void) { jit_print(); }

-SNOBOL C_WRAPPER_PROTO('PRINT_JIT()', .EMBED)
#line 98 "JIT.lss"

static void label_jit(void) { p = jit_label(); }

-SNOBOL C_WRAPPER_PROTO('LABEL_JIT()', .EMBED)
#line 102 "JIT.lss"

static void ellipsis_jit(void) { jit_ellipsis(); }

-SNOBOL C_WRAPPER_PROTO('ELLIPSIS_JIT()', .EMBED)
#line 106 "JIT.lss"

static int get_note_jit(void)
{
    int notei;
    jit_get_note(p, (char **)&p, (char **)&p2, &notei);
    return notei;
}

-SNOBOL C_WRAPPER_PROTO('GET_NOTE_JIT()INTEGER', .EMBED)
#line 115 "JIT.lss"

static int pointer_p_jit(void) { return jit_pointer_p(p); }

-SNOBOL C_WRAPPER_PROTO('POINTER_P_JIT()PREDICATE', .EMBED)
#line 119 "JIT.lss"

static int callee_save_p(int r) { return jit_callee_save_p(r); }

-SNOBOL C_WRAPPER_PROTO('CALLEE_SAVE_P_JIT(INTEGER)PREDICATE', .EMBED)
#line 123 "JIT.lss"

static void patch_at_jit(void) { jit_patch_at(p, p2); }

-SNOBOL C_WRAPPER_PROTO('PATCH_AT_JIT()', .EMBED)
#line 127 "JIT.lss"

static void patch_abs_jit(void) { jit_patch_abs(p, p2); }

-SNOBOL C_WRAPPER_PROTO('PATCH_ABS_JIT()', .EMBED)
#line 131 "JIT.lss"

static void patch_jit(void) { jit_patch(p); }

-SNOBOL C_WRAPPER_PROTO('PATCH_JIT()', .EMBED)
#line 135 "JIT.lss"

static void prepare_jit(void) { jit_prepare(); }

-SNOBOL C_WRAPPER_PROTO('PREPARE_JIT()', .EMBED)
#line 139 "JIT.lss"

static int allocai_jit(int n) { return jit_allocai(n); }

-SNOBOL C_WRAPPER_PROTO('ALLOCAI_JIT(INTEGER)INTEGER', .EMBED)
#line 143 "JIT.lss"

/* DATA, LENGTH, ALIGNMENT (0..4). DATA/LENGTH HASHED */
static void data_jit(int l, int a) { p = jit_data(p, l, a); }

-SNOBOL C_WRAPPER_PROTO('DATA_JIT(INTEGER,INTEGER)', .EMBED)
#line 148 "JIT.lss"

static void forward_jit(void) { p = jit_forward(); }

-SNOBOL C_WRAPPER_PROTO('FORWARD_JIT()', .EMBED)
#line 152 "JIT.lss"

static void live_jit(int r) { jit_live(r); }

-SNOBOL C_WRAPPER_PROTO('LIVE_JIT(INTEGER)', .EMBED)
#line 156 "JIT.lss"

static void link_jit(void) { jit_link(p); }

-SNOBOL C_WRAPPER_PROTO('LINK_JIT()', .EMBED)
#line 160 "JIT.lss"

/* REGISTERS */
static int r_num_jit(void) { return jit_r_num(); }

-SNOBOL C_WRAPPER_PROTO('R_NUM_JIT()INTEGER', .EMBED)
#line 165 "JIT.lss"

static int v_num_jit(void) { return jit_v_num(); }

-SNOBOL C_WRAPPER_PROTO('V_NUM_JIT()INTEGER', .EMBED)
#line 169 "JIT.lss"

static int f_num_jit(void) { return jit_f_num(); }

-SNOBOL C_WRAPPER_PROTO('F_NUM_JIT()INTEGER', .EMBED)
#line 173 "JIT.lss"

-SNOBOL L = 'r0 r1 r2 r3 v0 v1 v2 v3 f0 f1 f2 f3 f4 f5 f6 f7 fp'
#line 175 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 176 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 177 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 178 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static int get_' A<I> '_jit(void) { '; "        +
            " EMBED = '#ifdef JIT_' AU<I>; "                           +
            " EMBED = '    return JIT_' AU<I> ';'; "                   +
            " EMBED = DIFFER(A<I>) '#else'; "                          +
            " EMBED = DIFFER(A<I>) '    return -1;'; "                 +
            " EMBED = DIFFER(A<I>) '#endif'; "                         +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO('GET_' AU<I> '_JIT()INTEGER', .EMBED) "  +
            , .I)
#line 187 "JIT.lss"

/* REGISTER MATH */
-SNOBOL L = 'addr addcr addxr subr subcr subxr mulr divr divr_u '      +
            'remr remr_u andr orr xorr lshr rshr rshr_u '              +
            'ltr ltr_u ler ler_u ger ger_u gtr gtr_u eqr ner '         +
            'addr_f addr_d subr_f subr_d mulr_f mulr_d divr_f divr_d ' +
            'ltr_f ler_f eqr_f ger_f gtr_f ner_f unltr_f unler_f '     +
            'uneqr_f unger_f ungtr_f ltgtr_f ordr_f unordr_f '         +
            'ltr_d ler_d eqr_d ger_d gtr_d ner_d unltr_d unler_d '     +
            'uneqr_d unger_d ungtr_d ltgtr_d ordr_d unordr_d '         +
            'ldxr_c ldxr_uc ldxr_s ldxr_us ldxr_i ldxr_ui ldxr_l '     +
            'ldxr ldxr_f ldxr_d '                                      +
            'stxr_c stxr_s stxr_i stxr stxr_l stxr_f stxr_d '
#line 200 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 201 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 202 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 203 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' "                                 +
            " A<I> '_jit(int r1, int r2, int r3) { '; "                +
            " EMBED = '    jit_' A<I> '(r1, r2, r3);'; "               +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER,INTEGER)', " +
            " .EMBED) ", .I)
#line 209 "JIT.lss"

/* INTEGER IMMEDIATE MATH */
-SNOBOL L = 'addi addci addxi subi subci subxi muli divi divi_u '      +
            'remi remi_u andi ori xori lshi rshi rshi_u '              +
            'lti lti_u lei lei_u gei gei_u gti gti_u eqi nei '         +
            'ldxi_c ldxi_uc ldxi_s ldxi_us ldxi_i ldxi_ui ldxi_l '     +
            'ldxi ldxi_f ldxi_d '
#line 216 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 217 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 218 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 219 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    jit_' A<I> '(r1, r2, (long)p);'; "          +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 224 "JIT.lss"

-SNOBOL L = 'stxi_c stxi_s stxi_i stxi_l stxi stxi_f stxi_d '
#line 226 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 227 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 228 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 229 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    jit_' A<I> '(r1, (long)p, r2);'; "          +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 234 "JIT.lss"

/* FLOAT IMMEDIATE MATH */
-SNOBOL L = 'addi_f subi_f muli_f divi_f '
#line 237 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 238 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 239 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 240 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    jit_' A<I> '(r1, r2, f);'; "                +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 245 "JIT.lss"

/* DOUBLE IMMEDIATE MATH */
-SNOBOL L = 'addi_d subi_d muli_d divi_d '
#line 248 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 249 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 250 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 251 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    jit_' A<I> '(r1, r2, d);'; "                +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 256 "JIT.lss"

/* BRANCH - REGISTER */
-SNOBOL L = 'bltr bltr_u bler bler_u bgtr bgtr_u bger bger_u '         +
            'beqr bner bmsr bmcr boaddr bxaddr bosubr bxsubr '         +
            'boaddr_u bxaddr_u bosubr_u bxsubr_u '                     +
            'bltr_f bler_f bgtr_f bger_f beqr_f bner_f '               +
            'bunltr_f bunler_f buneqr_f bunger_f bungtr_f '            +
            'bltgtr_f bordr_f bunordr_f '                              +
            'bltr_d bler_d bgtr_d bger_d beqr_d bner_d '               +
            'bunltr_d bunler_d buneqr_d bunger_d bungtr_d '            +
            'bltgtr_d bordr_d bunordr_d '
#line 267 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 268 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 269 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 270 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    p = jit_' A<I> '(r1, r2);'; "               +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 275 "JIT.lss"

/* TWO REGISTER MOV, HTONR, NTOHR, COM, NEG, ABS, SQRT, EXT, TRUNC */
-SNOBOL L = 'movr movr_f movr_d movr_f_w movr_w_f movr_d_w movr_w_d '  +
            'htonr ntohr comr negr negr_f negr_d absr_f absr_d '       +
            'sqrtr_f sqrtr_d '                                         +
            'extr_c extr_uc extr_s extr_us extr_i extr_ui '            +
            'extr_f extr_d_f extr_d extr_f_d '                         +
            'truncr_f_i truncr_f truncr_f_l truncr_d_i truncr_d '      +
            'truncr_d_l '                                              +
            'ldr_c ldr_uc ldr_s ldr_us ldr_i ldr ldr_ui ldr_l '        +
            'ldr_f ldr_d '                                             +
            'str_c str_s str_i str str_l str_f str_d'
#line 287 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 288 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 289 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 290 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r1, int r2) { '; " +
            " EMBED = '    jit_' A<I> '(r1, r2);'; "                   +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER)', "         +
            " .EMBED) ", .I)
#line 295 "JIT.lss"

/* THREE REGISTER MOV */
-SNOBOL L = 'movr_d_ww movr_ww_d'
#line 298 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 299 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 300 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 301 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void '"                                  +
            " A<I> '_jit(int r,int s,int t) { '; "                     +
            " EMBED = '    jit_' A<I> '(r, s, t);'; "                  +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER,INTEGER,INTEGER)', " +
            " .EMBED) ", .I)
#line 307 "JIT.lss"

static void movi_jit(int r1)
{
    p = jit_movi(r1, (jit_word_t)p);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_JIT(INTEGER)', .EMBED)
#line 314 "JIT.lss"

static void movi_f_jit(int r1)
{
    jit_movi_f(r1, f);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_F_JIT(INTEGER)', .EMBED)
#line 321 "JIT.lss"

static void movi_d_jit(int r1)
{
    jit_movi_d(r1, d);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_D_JIT(INTEGER)', .EMBED)
#line 328 "JIT.lss"

static void movi_f_w_jit(int r1)
{
    jit_movi_f_w(r1, f);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_F_W_JIT(INTEGER)', .EMBED)
#line 335 "JIT.lss"

static void movi_d_w_jit(int r1)
{
    jit_movi_d_w(r1, d);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_D_W_JIT(INTEGER)', .EMBED)
#line 342 "JIT.lss"

static void movi_d_ww_jit(int r1, int r2)
{
    jit_movi_d_ww(r1, r2, d);
}

-SNOBOL C_WRAPPER_PROTO('MOVI_D_WW_JIT(INTEGER,INTEGER)', .EMBED)
#line 349 "JIT.lss"

/* ARG */
-SNOBOL L = 'arg arg_f arg_d'
#line 352 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 353 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 354 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 355 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(void) { '; "           +
            " EMBED = '    p = jit_' A<I> '();'; "                     +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT()', "                        +
            " .EMBED) ", .I)
#line 360 "JIT.lss"

-SNOBOL L = 'getarg getarg_c getarg_uc getarg_s getarg_us getarg_i '   +
            'getarg_ui getarg_l getarg_f getarg_d '                    +
            'ldi_c ldi_uc ldi_s ldi_us ldi_i ldi ldi_ui ldi_l ldi_f '  +
            'ldi_d '
#line 365 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 366 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 367 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 368 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r) { '; "          +
            " EMBED = '    jit_' A<I> '(r, p);'; "                     +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER)', "                 +
            " .EMBED) ", .I)
#line 373 "JIT.lss"

-SNOBOL L = 'blti blti_u blei blei_u beqi bgei bgei_u bgti bgti_u '    +
            'bnei bmsi bmci boaddi boaddi_u bxaddi bxaddi_u '          +
            'bosubi bosubi_u bxsubi bxsubi_u '
#line 377 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 378 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 379 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 380 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r) { '; "          +
            " EMBED = '    p = jit_' A<I> '(r, (jit_word_t)p);'; "     +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER)', "                 +
            " .EMBED) ", .I)
#line 385 "JIT.lss"

-SNOBOL L = 'sti_c sti_s sti_i sti sti_l sti_f sti_d '
#line 387 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 388 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 389 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 390 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r) { '; "          +
            " EMBED = '    jit_' A<I> '(p, r);'; "                     +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER)', "                 +
            " .EMBED) ", .I)
#line 395 "JIT.lss"

-SNOBOL L = 'pushargr pushargr_f pushargr_d '                          +
            'retr retval_c retval_uc retval_s retval_us retval_i '     +
            'retval retval_ui retval_l retr_f retval_f '               +
            'retr_d retval_d '
#line 400 "JIT.lss"
-SNOBOL LU = REPLACE(L, &LCASE, &UCASE)
#line 401 "JIT.lss"
-SNOBOL A = CRACK(L, ' ')
#line 402 "JIT.lss"
-SNOBOL AU = CRACK(LU, ' ')
#line 403 "JIT.lss"
-SNOBOL SEQ(" EMBED = 'static void ' A<I> '_jit(int r) { '; "          +
            " EMBED = '    jit_' A<I> '(r);'; "                        +
            " EMBED = DIFFER(A<I>) '}'; "                              +
            " C_WRAPPER_PROTO(AU<I> '_JIT(INTEGER)', "                 +
            " .EMBED) ", .I)
#line 408 "JIT.lss"

static void pushargi_jit(void) { jit_pushargi((jit_word_t)p); }

-SNOBOL C_WRAPPER_PROTO('PUSHARGI_JIT()', .EMBED)
#line 412 "JIT.lss"

static void pushargi_f_jit(void) { jit_pushargi_f(f); }

-SNOBOL C_WRAPPER_PROTO('PUSHARGI_F_JIT()', .EMBED)
#line 416 "JIT.lss"

static void pushargi_d_jit(void) { jit_pushargi_d(d); }

-SNOBOL C_WRAPPER_PROTO('PUSHARGI_D_JIT()', .EMBED)
#line 420 "JIT.lss"

static void jmpr_jit(int r) { jit_jmpr(r); }

-SNOBOL C_WRAPPER_PROTO('JMPR_JIT(INTEGER)', .EMBED)
#line 424 "JIT.lss"

static void jmpi_jit(void) { p = jit_jmpi(); }

-SNOBOL C_WRAPPER_PROTO('JMPI_JIT()', .EMBED)
#line 428 "JIT.lss"

static void callr_jit(int r) { jit_callr(r); }

-SNOBOL C_WRAPPER_PROTO('CALLR_JIT(INTEGER)', .EMBED)
#line 432 "JIT.lss"

static void calli_jit(void) { p = jit_calli(p); }

-SNOBOL C_WRAPPER_PROTO('CAllI_JIT()', .EMBED)
#line 436 "JIT.lss"

static void finishr_jit(int r) { jit_finishr(r); }

-SNOBOL C_WRAPPER_PROTO('FINISHR_JIT(INTEGER)', .EMBED)
#line 440 "JIT.lss"

static void finishi_jit(void) { p = jit_finishi(p); }

-SNOBOL C_WRAPPER_PROTO('FINISHI_JIT()', .EMBED)
#line 444 "JIT.lss"

static void ret_jit(void) { jit_ret(); }

-SNOBOL C_WRAPPER_PROTO('RET_JIT()', .EMBED)
#line 448 "JIT.lss"

static void reti_jit(void) { jit_reti((jit_word_t)p); }

-SNOBOL C_WRAPPER_PROTO('RETI_JIT()', .EMBED)
#line 452 "JIT.lss"

static void reti_f_jit(void) { jit_reti_f(f); }

-SNOBOL C_WRAPPER_PROTO('RETI_F_JIT()', .EMBED)
#line 456 "JIT.lss"

static void reti_d_jit(void) { jit_reti_d(d); }

-SNOBOL C_WRAPPER_PROTO('RETI_D_JIT()', .EMBED)
#line 460 "JIT.lss"

-END
-LINE 465 "JIT.lss"
-SNOBOL DYNAMIC_DEBUG = 1
-LINE 466 "JIT.lss"
-SNOBOL COMPILE_DYNAMIC(jit) :F(ERROR) ;
-LINE 467 "JIT.lss"
-SNOBOL P64 = BQ('pwd') '/p64.so'
-LINE 468 "JIT.lss"
-SNOBOL LIBS = P64 ' -L/usr/local/lib -llightning'
-LINE 469 "JIT.lss"
-SNOBOL OBJECTS = jit ; OBJECTS '.c' = '.o'
-LINE 470 "JIT.lss"
-SNOBOL LINK_DYNAMIC('./jit', OBJECTS, LIBS) :F(ERROR) ;
-LINE 471 "JIT.lss"
-CMNT ERASE TEMPORARY FILES
-CMNT     WE DON'T NEED THE C BITS, OR THE OBJECT FILES ANYMORE.
-CMNT     ALL WE REQUIRE IS JIT.SO
-SNOBOL  A = CRACK(jit ' ' OBJECTS, ' ')
-LINE 475 "JIT.lss"
-SNOBOL  SEQ(' DELETE(A<K>) ', .K)
-LINE 476 "JIT.lss"
-LINE 479 "JIT.lss"
         LOAD('INIT_JIT(STRING)', 'jit.so')
         LOAD('R_NUM_JIT()INTEGER', 'jit.so')
         LOAD('V_NUM_JIT()INTEGER', 'jit.so')
         LOAD('F_NUM_JIT()INTEGER', 'jit.so')
         LOAD('FINISH_JIT()', 'jit.so')
*
         LOAD('GET_STATE_JIT()', 'jit.so')
         LOAD('SET_STATE_JIT()', 'jit.so')
         LOAD('NEW_STATE_JIT()', 'jit.so')
         LOAD('DESTROY_STATE_JIT()', 'jit.so')
         LOAD('CLEAR_STATE_JIT()', 'jit.so')
*
         LOAD('PROLOG_JIT()', 'jit.so')
         LOAD('EPILOG_JIT()', 'jit.so')
         LOAD('NOTE_JIT(STRING,INTEGER)', 'jit.so')
         LOAD('NAME_JIT(STRING)', 'jit.so')
         LOAD('ADDRESS_JIT()', 'jit.so')
         LOAD('DISASSEMBLE_JIT()', 'jit.so')
         LOAD('EMIT_JIT()', 'jit.so')
         LOAD('PRINT_JIT()', 'jit.so')
         LOAD('LABEL_JIT()', 'jit.so')
         LOAD('ELLIPSIS_JIT()', 'jit.so')
         LOAD('GET_NOTE_JIT()INTEGER', 'jit.so')
         LOAD('POINTER_P_JIT()', 'jit.so')
         LOAD('CALLEE_SAVE_P_JIT(INTEGER)', 'jit.so')
         LOAD('PATCH_AT_JIT()', 'jit.so')
         LOAD('PATCH_ABS_JIT()', 'jit.so')
         LOAD('PATCH_JIT()', 'jit.so')
         LOAD('PREPARE_JIT()', 'jit.so')
         LOAD('ALLOCAI_JIT(INTEGER)INTEGER', 'jit.so')
         LOAD('DATA_JIT(INTEGER,INTEGER)', 'jit.so')
         LOAD('FORWARD_JIT()', 'jit.so')
         LOAD('LIVE_JIT(INTEGER)', 'jit.so')
         LOAD('LINK_JIT()', 'jit.so')
*
* WE DO R0..R3, V0..V3, F0..F7 AND FP, EVEN THOUGH NOT ALL OF THESE
* REGISTERS MAY EXIST. THE ONES THAT DON'T WILL BE -1. USE JIT_R_NUM(),
* JIT_V_NUM() AND JIT_F_NUM() TO DETERMINE THE ACTUAL NUMBER OF
* REGISTERS. NOTE THAT WORST CASE, R0..R2, V0..V2 AND F0..F5 ARE
* USABLE.
*
         L = 'R0 R1 R2 R3 V0 V1 V2 V3 F0 F1 F2 F3 F4 F5 F6 F7 FP'
         A = CRACK(L, ' ')
         SEQ(" LOAD('GET_' A<I> '_JIT()INTEGER', 'jit.so'); "
+            " $('JIT_' A<I>) = EVAL('GET_' A<I> '_JIT()') ", .I)
*
         L = 'ADDR ADDCR ADDXR SUBR SUBCR SUBXR MULR DIVR DIVR_U '
+            'REMR REMR_U ANDR ORR XORR LSHR RSHR RSHR_U '
+            'LTR LTR_U LER LER_U GER GER_U GTR GTR_U EQR NER '
+            'ADDR_F ADDR_D SUBR_F SUBR_D MULR_F MULR_D DIVR_F DIVR_D '
+            'LTR_F LER_F EQR_F GER_F GTR_F NER_F UNLTR_F UNLER_F '
+            'UNEQR_F UNGER_F UNGTR_F LTGTR_F ORDR_F UNORDR_F '
+            'LTR_D LER_D EQR_D GER_D GTR_D NER_D UNLTR_D UNLER_D '
+            'UNEQR_D UNGER_D UNGTR_D LTGTR_D ORDR_D UNORDR_D '
+            'LDXR_C LDXR_UC LDXR_S LDXR_US LDXR_I LDXR_UI LDXR_L '
+            'LDXR LDXR_F LDXR_D '
+            'STXR_C STXR_S STXR_I STXR STXR_L STXR_F STXR_D '
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER,INTEGER,INTEGER)', 'jit.so') "
+            , .I)
*
         L = 'ADDI ADDCI ADDXI SUBI SUBCI SUBXI MULI DIVI DIVI_U '
+            'REMI REMI_U ANDI ORI XORI LSHI RSHI RSHI_U '
+            'LTI LTI_U LEI LEI_U GEI GEI_U GTI GTI_U EQI NEI '
+            'ADDI_F SUBI_F MULI_F DIVI_F '
+            'ADDI_D SUBI_D MULI_D DIVI_D '
+            'LDXI_C LDXI_UC LDXI_S LDXI_US LDXI_I LDXI_UI LDXI_L LDXI '
+            'LDXI_F LDXI_D '
+            'STXI_C STXI_S STXI_I STXI_L STXI STXI_F STXI_D '
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER,INTEGER)', 'jit.so') "
+            , .I)
*
         L = 'BLTR BLTR_U BLER BLER_U BGTR BGTR_U BGER BGER_U '
+            'BEQR BNER BMSR BMCR BOADDR BXADDR BOSUBR BXSUBR'
+            'BOADDR_U BXADDR_U BOSUBR_U BXSUBR_U '
+            'BLTR_F BLER_F BGTR_F BGER_F BEQR_F BNER_R '
+            'BUNLTR_F BUNLER_F BUNEQR_F BUNGER_F BUNGTR_F '
+            'BLTGTR_F BORDR_F BUNORDR_F '
+            'BLTR_D BLER_D BGTR_D BGER_D BEQR_D BNER_D '
+            'BUNLTR_D BUNLER_D BUNEQR_D BUNGER_D BUNGTR_D '
+            'BLTGTR_D BORDR_D BUNORDR_D '
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER,INTEGER)', 'jit.so') "
+            , .I)
*
         L = 'MOVR MOVR_F MOVR_D MOVR_F_W MOVR_W_F MOVR_D_W MOVR_W_D '
+            'HTONR NTOHR COMR NEGR NEGR_F NEGR_D ABSR_F ABSR_D '
+            'SQRTR_F SQRTR_D '
+            'EXTR_C EXTR_UC EXTR_S EXTR_US EXTR_I EXTR_UI '
+            'EXTR_F EXTR_D_F EXTR_D EXTR_F_D '
+            'TRUNCR_F_I TRUNCR_F TRUNCR_F_L TRUNCR_D_I TRUNCR_D '
+            'TRUNCR_D_L '
+            'LDR_C LDR_UC LDR_S LDR_US LDR_I LDR LDR_UI LDR_L '
+            'LDR_F LDR_D '
+            'STR_C STR_S STR_I STR STR_L STR_F STR_D'
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER,INTEGER)', 'jit.so') "
+            , .I)
*
         L = 'MOVR_D_WW MOVR_WW_D'
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER,INTEGER,INTEGER)', 'jit.so') "
+            , .I)
*
         LOAD('MOVI_JIT(INTEGER)', 'jit.so')
         LOAD('MOVI_F_JIT(INTEGER)', 'jit.so')
         LOAD('MOVI_D_JIT(INTEGER)', 'jit.so')
         LOAD('MOVI_F_W_JIT(INTEGER,INTEGER)', 'jit.so')
         LOAD('MOVI_D_W_JIT(INTEGER,INTEGER)', 'jit.so')
         LOAD('MOVI_D_WW_JIT(INTEGER,INTEGER)', 'jit.so')
*
         L = 'ARG ARG_F ARG_D'
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT()', 'jit.so') ", .I)
*
         L = 'GETARG GETARG_C GETARG_UC GETARG_S GETARG_US GETARG_I '
+            'GETARG_UI GETARG_L GETARG_F GETARG_D '
+            'LDI_C LDI_UC LDI_S LDI_US LDI_I LDI LDI_UI LDI_L LDI_F '
+            'LDI_D STI_C STI_S STI_I STI STI_L STI_F STI_D '
+            'BLTI BLTI_U BLEI BLEI_U BEQI BGEI BGEI_U BGTI BGTI_U '
+            'BNEI BMSI BMCI BOADDI BOADDI_U BXADDI BXADDI_U '
+            'BOSUBI BOSUBI_U BXSUBI BXSUBI_U '
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER)', 'jit.so') ", .I)
*
         L = 'PUSHARGR PUSHARGR_F PUSHARGR_D '
+            'RETR RETVAL_C RETVAL_UC RETVAL_S RETVAL_US RETVAL_I '
+            'RETVAL RETVAL_UI RETVAL_L RETR_F RETVAL_F '
+            'RETR_D RETVAL_D '
         A = CRACK(L, ' ')
         SEQ(" LOAD(A<I> '_JIT(INTEGER)', 'jit.so') ", .I)
         LOAD('PUSHARGI_JIT()', 'jit.so')
         LOAD('PUSHARGI_F_JIT()', 'jit.so')
         LOAD('PUSHARGI_D_JIT()', 'jit.so')
*
         LOAD('JMPR_JIT(INTEGER)', 'jit.so')
         LOAD('JMPI_JIT()', 'jit.so')
*
         LOAD('CALLR_JIT(INTEGER)', 'jit.so')
         LOAD('CALLI_JIT()', 'jit.so')
*
         LOAD('FINISHR_JIT(INTEGER)', 'jit.so')
         LOAD('FINISHI_JIT()', 'jit.so')
*
         LOAD('RET_JIT()', 'jit.so')
         LOAD('RETI_JIT()', 'jit.so')
         LOAD('RETI_F_JIT()', 'jit.so')
         LOAD('RETI_D_JIT()', 'jit.so')
*
* PROXY FUNCTIONS TO HIDE SET_P()/GET_P(). THESE ARE SHORT FUNCTIONS (1
* OR 2 LINES). USE THESE FUNCTIONS TO USE JIT, RATHER THAN THE ..._JIT
* FUNCTIONS. THESE FUNCTIONS TAKE CARE OF ANY INT/POINTER ISSUES,
* WHEREAS USING THE UNDERLYING FUNCTIONS WILL NOT, AND THE CODE WILL BE
* NOT BE PORTABLE.
*
JIT_DEFINE
*
         DEFINE('JIT_R_NUM()')
         DEFINE('JIT_V_NUM()')
         DEFINE('JIT_F_NUM()')
         DEFINE('JIT_ARG()')
         DEFINE('JIT_ARG_F()')
         DEFINE('JIT_ARG_D()')
         DEFINE('JIT_RET()')
         DEFINE('JIT_RETI(P)')
         DEFINE('JIT_RETI_F(F)')
         DEFINE('JIT_RETI_D(D)')
         DEFINE('JIT_FINISHR(R)')
         DEFINE('JIT_FINISHI(P)')
         DEFINE('JIT_INIT(S)')
         DEFINE('JIT_FINISH()')
         DEFINE('JIT_MOVI(R,P)')
         DEFINE('JIT_MOVI_F(R,F)')
         DEFINE('JIT_MOVI_D(R,D)')
         DEFINE('JIT_GETARG(R,A)')
         DEFINE('JIT_GETARG_C(R,A)')
         DEFINE('JIT_GETARG_UC(R,A)')
         DEFINE('JIT_GETARG_S(R,A)')
         DEFINE('JIT_GETARG_US(R,A)')
         DEFINE('JIT_GETARG_I(R,A)')
         DEFINE('JIT_GETARG_UI(R,A)')
         DEFINE('JIT_GETARG_L(R,A)')
         DEFINE('JIT_GETARG_F(R,A)')
         DEFINE('JIT_GETARG_D(R,A)')
         DEFINE('JIT_PROLOG()')
         DEFINE('JIT_EPILOG()')
         DEFINE('JIT_PRINT()')
         DEFINE('JIT_DISASSEMBLE()')
         DEFINE('JIT_LABEL()')
         DEFINE('JIT_ELLIPSIS()')
         DEFINE('JIT_EMIT()')
         DEFINE('JIT_ADDRESS(P)')
         DEFINE('JIT_RETR(R)')
         DEFINE('JIT_RETR_F(R)')
         DEFINE('JIT_RETR_D(R)')
         DEFINE('JIT_GET_STATE()')
         DEFINE('JIT_SET_STATE(JIT)')
         DEFINE('JIT_NEW_STATE()')
         DEFINE('JIT_DESTROY_STATE()')
         DEFINE('JIT_CLEAR_STATE()')
         DEFINE('JIT_JMPR(R)')
         DEFINE('JIT_JMPI(P)')
         DEFINE('JIT_CALLR(R)')
         DEFINE('JIT_CALLI(P)')
         DEFINE('JIT_NOTE(S,N)')
         DEFINE('JIT_NAME(S)')
         DEFINE('JIT_PREPARE()')
         DEFINE('JIT_ALLOCAI(N)')
         DEFINE('JIT_PATCH_AT(P,P2)')
         DEFINE('JIT_PATCH_ABS(P,P2)')
         DEFINE('JIT_PATCH(P)')
         DEFINE('JIT_ADDR(R1,R2,R3)')
         DEFINE('JIT_ADDCR(R1,R2,R3)')
         DEFINE('JIT_ADDXR(R1,R2,R3)')
         DEFINE('JIT_SUBR(R1,R2,R3)')
         DEFINE('JIT_SUBCR(R1,R2,R3)')
         DEFINE('JIT_SUBXR(R1,R2,R3)')
         DEFINE('JIT_MULR(R1,R2,R3)')
         DEFINE('JIT_DIVR(R1,R2,R3)')
         DEFINE('JIT_DIVR_U(R1,R2,R3)')
         DEFINE('JIT_REMR(R1,R2,R3)')
         DEFINE('JIT_REMR_U(R1,R2,R3)')
         DEFINE('JIT_ANDR(R1,R2,R3)')
         DEFINE('JIT_ORR(R1,R2,R3)')
         DEFINE('JIT_XORR(R1,R2,R3)')
         DEFINE('JIT_LSHR(R1,R2,R3)')
         DEFINE('JIT_RSHR(R1,R2,R3)')
         DEFINE('JIT_RSHR_U(R1,R2,R3)')
         DEFINE('JIT_LTR(R1,R2,R3)')
         DEFINE('JIT_LTR_U(R1,R2,R3)')
         DEFINE('JIT_LER(R1,R2,R3)')
         DEFINE('JIT_LER_U(R1,R2,R3)')
         DEFINE('JIT_GER(R1,R2,R3)')
         DEFINE('JIT_GER_U(R1,R2,R3)')
         DEFINE('JIT_GTR(R1,R2,R3)')
         DEFINE('JIT_GTR_U(R1,R2,R3)')
         DEFINE('JIT_EQR(R1,R2,R3)')
         DEFINE('JIT_NER(R1,R2,R3)')
         DEFINE('JIT_ADDR_F(R1,R2,R3)')
         DEFINE('JIT_ADDR_D(R1,R2,R3)')
         DEFINE('JIT_SUBR_F(R1,R2,R3)')
         DEFINE('JIT_SUBR_D(R1,R2,R3)')
         DEFINE('JIT_MULR_F(R1,R2,R3)')
         DEFINE('JIT_MULR_D(R1,R2,R3)')
         DEFINE('JIT_DIVR_F(R1,R2,R3)')
         DEFINE('JIT_DIVR_D(R1,R2,R3)')
         DEFINE('JIT_LTR_F(R1,R2,R3)')
         DEFINE('JIT_LER_F(R1,R2,R3)')
         DEFINE('JIT_EQR_F(R1,R2,R3)')
         DEFINE('JIT_GER_F(R1,R2,R3)')
         DEFINE('JIT_GTR_F(R1,R2,R3)')
         DEFINE('JIT_NER_F(R1,R2,R3)')
         DEFINE('JIT_UNLTR_F(R1,R2,R3)')
         DEFINE('JIT_UNLER_F(R1,R2,R3)')
         DEFINE('JIT_UNEQR_F(R1,R2,R3)')
         DEFINE('JIT_UNGER_F(R1,R2,R3)')
         DEFINE('JIT_UNGTR_F(R1,R2,R3)')
         DEFINE('JIT_LTGTR_F(R1,R2,R3)')
         DEFINE('JIT_ORDR_F(R1,R2,R3)')
         DEFINE('JIT_UNORDR_F(R1,R2,R3)')
         DEFINE('JIT_LTR_D(R1,R2,R3)')
         DEFINE('JIT_LER_D(R1,R2,R3)')
         DEFINE('JIT_EQR_D(R1,R2,R3)')
         DEFINE('JIT_GER_D(R1,R2,R3)')
         DEFINE('JIT_GTR_D(R1,R2,R3)')
         DEFINE('JIT_NER_D(R1,R2,R3)')
         DEFINE('JIT_UNLTR_D(R1,R2,R3)')
         DEFINE('JIT_UNLER_D(R1,R2,R3)')
         DEFINE('JIT_UNEQR_D(R1,R2,R3)')
         DEFINE('JIT_UNGER_D(R1,R2,R3)')
         DEFINE('JIT_UNGTR_D(R1,R2,R3)')
         DEFINE('JIT_LTGTR_D(R1,R2,R3)')
         DEFINE('JIT_ORDR_D(R1,R2,R3)')
         DEFINE('JIT_UNORDR_D(R1,R2,R3)')
         DEFINE('JIT_LDXR_C(R1,R2,R3)')
         DEFINE('JIT_LDXR_UC(R1,R2,R3)')
         DEFINE('JIT_LDXR_S(R1,R2,R3)')
         DEFINE('JIT_LDXR_US(R1,R2,R3)')
         DEFINE('JIT_LDXR_I(R1,R2,R3)')
         DEFINE('JIT_LDXR_UI(R1,R2,R3)')
         DEFINE('JIT_LDXR_L(R1,R2,R3)')
         DEFINE('JIT_LDXR(R1,R2,R3)')
         DEFINE('JIT_LDXR_F(R1,R2,R3)')
         DEFINE('JIT_LDXR_D(R1,R2,R3)')
         DEFINE('JIT_STXR_C(R1,R2,R3)')
         DEFINE('JIT_STXR_S(R1,R2,R3)')
         DEFINE('JIT_STXR_I(R1,R2,R3)')
         DEFINE('JIT_STXR(R1,R2,R3)')
         DEFINE('JIT_STXR_L(R1,R2,R3)')
         DEFINE('JIT_STXR_F(R1,R2,R3)')
         DEFINE('JIT_STXR_D(R1,R2,R3)')
         DEFINE('JIT_BLTR(R1,R2)')
         DEFINE('JIT_BLTR_U(R1,R2)')
         DEFINE('JIT_BLER(R1,R2)')
         DEFINE('JIT_BLER_U(R1,R2)')
         DEFINE('JIT_BGTR(R1,R2)')
         DEFINE('JIT_BGTR_U(R1,R2)')
         DEFINE('JIT_BGER(R1,R2)')
         DEFINE('JIT_BGER_U(R1,R2)')
         DEFINE('JIT_BEQR(R1,R2)')
         DEFINE('JIT_BNER(R1,R2)')
         DEFINE('JIT_BMSR(R1,R2)')
         DEFINE('JIT_BMCR(R1,R2)')
         DEFINE('JIT_BOADDR(R1,R2)')
         DEFINE('JIT_BXADDR(R1,R2)')
         DEFINE('JIT_BOSUBR(R1,R2)')
         DEFINE('JIT_BXSUBR(R1,R2)')
         DEFINE('JIT_BOADDR_U(R1,R2)')
         DEFINE('JIT_BXADDR_U(R1,R2)')
         DEFINE('JIT_BOSUBR_U(R1,R2)')
         DEFINE('JIT_BXSUBR_U(R1,R2)')
         DEFINE('JIT_BLTR_F(R1,R2)')
         DEFINE('JIT_BLER_F(R1,R2)')
         DEFINE('JIT_BGTR_F(R1,R2)')
         DEFINE('JIT_BGER_F(R1,R2)')
         DEFINE('JIT_BEQR_F(R1,R2)')
         DEFINE('JIT_BNER_R(R1,R2)')
         DEFINE('JIT_BUNLTR_F(R1,R2)')
         DEFINE('JIT_BUNLER_F(R1,R2)')
         DEFINE('JIT_BUNEQR_F(R1,R2)')
         DEFINE('JIT_BUNGER_F(R1,R2)')
         DEFINE('JIT_BUNGTR_F(R1,R2)')
         DEFINE('JIT_BLTGTR_F(R1,R2)')
         DEFINE('JIT_BORDR_F(R1,R2)')
         DEFINE('JIT_BUNORDR_F(R1,R2)')
         DEFINE('JIT_BLTR_D(R1,R2)')
         DEFINE('JIT_BLER_D(R1,R2)')
         DEFINE('JIT_BGTR_D(R1,R2)')
         DEFINE('JIT_BGER_D(R1,R2)')
         DEFINE('JIT_BEQR_D(R1,R2)')
         DEFINE('JIT_BNER_D(R1,R2)')
         DEFINE('JIT_BUNLTR_D(R1,R2)')
         DEFINE('JIT_BUNLER_D(R1,R2)')
         DEFINE('JIT_BUNEQR_D(R1,R2)')
         DEFINE('JIT_BUNGER_D(R1,R2)')
         DEFINE('JIT_BUNGTR_D(R1,R2)')
         DEFINE('JIT_BLTGTR_D(R1,R2)')
         DEFINE('JIT_BORDR_D(R1,R2)')
         DEFINE('JIT_BUNORDR_D(R1,R2)')
         DEFINE('JIT_ADDI(R1,R2,P)')
         DEFINE('JIT_ADDCI(R1,R2,P)')
         DEFINE('JIT_ADDXI(R1,R2,P)')
         DEFINE('JIT_SUBI(R1,R2,P)')
         DEFINE('JIT_SUBCI(R1,R2,P)')
         DEFINE('JIT_SUBXI(R1,R2,P)')
         DEFINE('JIT_MULI(R1,R2,P)')
         DEFINE('JIT_DIVI(R1,R2,P)')
         DEFINE('JIT_DIVI_U(R1,R2,P)')
         DEFINE('JIT_REMI(R1,R2,P)')
         DEFINE('JIT_REMI_U(R1,R2,P)')
         DEFINE('JIT_ANDI(R1,R2,P)')
         DEFINE('JIT_ORI(R1,R2,P)')
         DEFINE('JIT_XORI(R1,R2,P)')
         DEFINE('JIT_LSHI(R1,R2,P)')
         DEFINE('JIT_RSHI(R1,R2,P)')
         DEFINE('JIT_RSHI_U(R1,R2,P)')
         DEFINE('JIT_LTI(R1,R2,P)')
         DEFINE('JIT_LTI_U(R1,R2,P)')
         DEFINE('JIT_LEI(R1,R2,P)')
         DEFINE('JIT_LEI_U(R1,R2,P)')
         DEFINE('JIT_GEI(R1,R2,P)')
         DEFINE('JIT_GEI_U(R1,R2,P)')
         DEFINE('JIT_GTI(R1,R2,P)')
         DEFINE('JIT_GTI_U(R1,R2,P)')
         DEFINE('JIT_EQI(R1,R2,P)')
         DEFINE('JIT_NEI(R1,R2,P)')
         DEFINE('JIT_LDXI_C(R1,R2,P)')
         DEFINE('JIT_LDXI_UC(R1,R2,P)')
         DEFINE('JIT_LDXI_S(R1,R2,P)')
         DEFINE('JIT_LDXI_US(R1,R2,P)')
         DEFINE('JIT_LDXI_I(R1,R2,P)')
         DEFINE('JIT_LDXI_UI(R1,R2,P)')
         DEFINE('JIT_LDXI_L(R1,R2,P)')
         DEFINE('JIT_LDXI(R1,R2,P)')
         DEFINE('JIT_LDXI_F(R1,R2,P)')
         DEFINE('JIT_LDXI_D(R1,R2,P)')
         DEFINE('JIT_STXI_C(R1,P,R2)')
         DEFINE('JIT_STXI_S(R1,P,R2)')
         DEFINE('JIT_STXI_I(R1,P,R2)')
         DEFINE('JIT_STXI_L(R1,P,R2)')
         DEFINE('JIT_STXI(R1,P,R2)')
         DEFINE('JIT_STXI_F(R1,P,R2)')
         DEFINE('JIT_STXI_D(R1,P,R2)')
         DEFINE('JIT_ADDI_F(R1,R2,F)')
         DEFINE('JIT_SUBI_F(R1,R2,F)')
         DEFINE('JIT_MULI_F(R1,R2,F)')
         DEFINE('JIT_DIVI_F(R1,R2,F)')
         DEFINE('JIT_ADDI_D(R1,R2,D)')
         DEFINE('JIT_SUBI_D(R1,R2,D)')
         DEFINE('JIT_MULI_D(R1,R2,D)')
         DEFINE('JIT_DIVI_D(R1,R2,D)')
         DEFINE('JIT_MOVR(R1,R2)')
         DEFINE('JIT_MOVR_F(R1,R2)')
         DEFINE('JIT_MOVR_D(R1,R2)')
         DEFINE('JIT_HTONR(R1,R2)')
         DEFINE('JIT_NTOHR(R1,R2)')
         DEFINE('JIT_COMR(R1,R2)')
         DEFINE('JIT_NEGR(R1,R2)')
         DEFINE('JIT_NEGR_F(R1,R2)')
         DEFINE('JIT_NEGR_D(R1,R2)')
         DEFINE('JIT_ABSR_F(R1,R2)')
         DEFINE('JIT_ABSR_D(R1,R2)')
         DEFINE('JIT_SQRTR_F(R1,R2)')
         DEFINE('JIT_SQRTR_D(R1,R2)')
         DEFINE('JIT_EXTR_C(R1,R2)')
         DEFINE('JIT_EXTR_UC(R1,R2)')
         DEFINE('JIT_EXTR_S(R1,R2)')
         DEFINE('JIT_EXTR_US(R1,R2)')
         DEFINE('JIT_EXTR_I(R1,R2)')
         DEFINE('JIT_EXTR_UI(R1,R2)')
         DEFINE('JIT_EXTR_F(R1,R2)')
         DEFINE('JIT_EXTR_D_F(R1,R2)')
         DEFINE('JIT_EXTR_D(R1,R2)')
         DEFINE('JIT_EXTR_F_D(R1,R2)')
         DEFINE('JIT_TRUNCR_F_I(R1,R2)')
         DEFINE('JIT_TRUNCR_F(R1,R2)')
         DEFINE('JIT_TRUNCR_F_L(R1,R2)')
         DEFINE('JIT_TRUNCR_D_I(R1,R2)')
         DEFINE('JIT_TRUNCR_D(R1,R2)')
         DEFINE('JIT_TRUNCR_D_L(R1,R2)')
         DEFINE('JIT_LDR_C(R1,R2)')
         DEFINE('JIT_LDR_UC(R1,R2)')
         DEFINE('JIT_LDR_S(R1,R2)')
         DEFINE('JIT_LDR_US(R1,R2)')
         DEFINE('JIT_LDR_I(R1,R2)')
         DEFINE('JIT_LDR(R1,R2)')
         DEFINE('JIT_LDR_UI(R1,R2)')
         DEFINE('JIT_LDR_L(R1,R2)')
         DEFINE('JIT_LDR_F(R1,R2)')
         DEFINE('JIT_LDR_D(R1,R2)')
         DEFINE('JIT_STR_C(R1,R2)')
         DEFINE('JIT_STR_S(R1,R2)')
         DEFINE('JIT_STR_I(R1,R2)')
         DEFINE('JIT_STR(R1,R2)')
         DEFINE('JIT_STR_L(R1,R2)')
         DEFINE('JIT_STR_F(R1,R2)')
         DEFINE('JIT_STR_D(R1,R2)')
         DEFINE('JIT_LDI_C(R,P)')
         DEFINE('JIT_LDI_UC(R,P)')
         DEFINE('JIT_LDI_S(R,P)')
         DEFINE('JIT_LDI_US(R,P)')
         DEFINE('JIT_LDI_I(R,P)')
         DEFINE('JIT_LDI(R,P)')
         DEFINE('JIT_LDI_UI(R,P)')
         DEFINE('JIT_LDI_L(R,P)')
         DEFINE('JIT_LDI_F(R,P)')
         DEFINE('JIT_LDI_D(R,P)')
         DEFINE('JIT_PUSHARGI(P)')
         DEFINE('JIT_PUSHARGI_F(F)')
         DEFINE('JIT_PUSHARGI_D(D)')
         DEFINE('JIT_BLTI(R,P)')
         DEFINE('JIT_BLTI_U(R,P)')
         DEFINE('JIT_BLEI(R,P)')
         DEFINE('JIT_BLEI_U(R,P)')
         DEFINE('JIT_BEQI(R,P)')
         DEFINE('JIT_BGEI(R,P)')
         DEFINE('JIT_BGEI_U(R,P)')
         DEFINE('JIT_BGTI(R,P)')
         DEFINE('JIT_BGTI_U(R,P)')
         DEFINE('JIT_BNEI(R,P)')
         DEFINE('JIT_BMSI(R,P)')
         DEFINE('JIT_BMCI(R,P)')
         DEFINE('JIT_BOADDI(R,P)')
         DEFINE('JIT_BOADDI_U(R,P)')
         DEFINE('JIT_BXADDI(R,P)')
         DEFINE('JIT_BXADDI_U(R,P)')
         DEFINE('JIT_BOSUBI(R,P)')
         DEFINE('JIT_BOSUBI_U(R,P)')
         DEFINE('JIT_BXSUBI(R,P)')
         DEFINE('JIT_BXSUBI_U(R,P)')
         DEFINE('JIT_STI_C(P,R)')
         DEFINE('JIT_STI_S(P,R)')
         DEFINE('JIT_STI_I(P,R)')
         DEFINE('JIT_STI(P,R)')
         DEFINE('JIT_STI_L(P,R)')
         DEFINE('JIT_STI_F(P,R)')
         DEFINE('JIT_STI_D(P,R)')
         DEFINE('JIT_PUSHARGR(R)')
         DEFINE('JIT_PUSHARGR_F(R)')
         DEFINE('JIT_PUSHARGR_D(R)')
         DEFINE('JIT_RETVAL_C(R)')
         DEFINE('JIT_RETVAL_UC(R)')
         DEFINE('JIT_RETVAL_S(R)')
         DEFINE('JIT_RETVAL_US(R)')
         DEFINE('JIT_RETVAL_I(R)')
         DEFINE('JIT_RETVAL(R)')
         DEFINE('JIT_RETVAL_UI(R)')
         DEFINE('JIT_RETVAL_L(R)')
         DEFINE('JIT_RETVAL_F(R)')
         DEFINE('JIT_RETVAL_D(R)')                            :(JIT_END)
*
JIT_R_NUM
         JIT_R_NUM = R_NUM_JIT()                               :(RETURN)
*
JIT_V_NUM
         JIT_V_NUM = V_NUM_JIT()                               :(RETURN)
*
JIT_F_NUM
         JIT_F_NUM = F_NUM_JIT()                               :(RETURN)
*
JIT_ARG  ARG_JIT()
         JIT_ARG = GET_P()                                     :(RETURN)
*
JIT_ARG_F
         ARG_F_JIT()
         JIT_ARG_F = GET_P()                                   :(RETURN)
*
JIT_ARG_D
         ARG_D_JIT()
         JIT_ARG_D = GET_P()                                   :(RETURN)
*
JIT_RET  RET_JIT()                                             :(RETURN)
*
JIT_RETI SET_P(P)
         RETI_JIT()                                            :(RETURN)
*
JIT_RETI_F
         SET_F(F)
         RETI_F_JIT()                                          :(RETURN)
*
JIT_RETI_D
         SET_D(D)
         RETI_D_JIT()                                          :(RETURN)
*
JIT_FINISHR
         FINISHR_JIT(R)                                        :(RETURN)
*
JIT_FINISHI
         SET_P(P)
         FINISHI_JIT()                                         :(RETURN)
*
JIT_INIT INIT_JIT(S)                                           :(RETURN)
*
JIT_FINISH
         FINISH_JIT()                                          :(RETURN)
*
JIT_MOVI SET_P(P)
         MOVI_JIT(R)
         JIT_MOVI = GET_P()                                    :(RETURN)
*
JIT_MOVI_F
         SET_F(F)
         MOVI_F_JIT(R)                                         :(RETURN)
*
JIT_MOVI_D(R,D)
         SET_D(D)
         MOVI_D_JIT(R)                                         :(RETURN)
*
JIT_GETARG
         SET_P(A)
         GETARG_JIT(R)                                         :(RETURN)
*
JIT_GETARG_C
         SET_P(A)
         GETARG_C_JIT(R)                                       :(RETURN)
*
JIT_GETARG_UC
         SET_P(A)
         GETARG_UC_JIT(R)                                      :(RETURN)
*
JIT_GETARG_S
         SET_P(A)
         GETARG_S_JIT(R)                                       :(RETURN)
*
JIT_GETARG_US
         SET_P(A)
         GETARG_US_JIT(R)                                      :(RETURN)
*
JIT_GETARG_I
         SET_P(A)
         GETARG_I_JIT(R)                                       :(RETURN)
*
JIT_GETARG_UI
         SET_P(A)
         GETARG_UI_JIT(R)                                      :(RETURN)
*
JIT_GETARG_L
         SET_P(A)
         GETARG_L_JIT(R)                                       :(RETURN)
*
JIT_GETARG_F
         SET_P(A)
         GETARG_F_JIT(R)                                       :(RETURN)
*
JIT_GETARG_D
         SET_P(A)
         GETARG_D_JIT(R)                                       :(RETURN)
*
JIT_PROLOG
         PROLOG_JIT()                                          :(RETURN)
*
JIT_EPILOG
         EPILOG_JIT()                                          :(RETURN)
*
JIT_PRINT
         PRINT_JIT()                                           :(RETURN)
*
JIT_DISASSEMBLE
         DISASSEMBLE_JIT()                                     :(RETURN)
*
JIT_LABEL
         LABEL_JIT()
         JIT_LABEL = GET_P()                                   :(RETURN)
*
JIT_ELLIPSIS
         ELLIPSIS_JIT()                                        :(RETURN)
*
JIT_EMIT EMIT_JIT()
         JIT_EMIT = GET_P()                                    :(RETURN)
*
JIT_ADDRESS
         SET_P(P)
         ADDRESS_JIT()
         JIT_ADDRESS = GET_P()                                 :(RETURN)
*
JIT_RETR RETR_JIT(R)                                           :(RETURN)
*
JIT_RETR_F
         RETR_F_JIT(R)                                         :(RETURN)
*
JIT_RETR_D
         RETR_D_JIT(R)                                         :(RETURN)
*
JIT_GET_STATE
         GET_STATE_JIT()
         JIT_GET_STATE = GET_P()                               :(RETURN)
*
JIT_SET_STATE
         SET_P(JIT)
         SET_STATE_JIT()                                       :(RETURN)
*
JIT_NEW_STATE
         NEW_STATE_JIT()
         JIT_NEW_STATE = GET_P()                               :(RETURN)
*
JIT_DESTROY_STATE
         DESTROY_STATE_JIT()                                   :(RETURN)
*
JIT_CLEAR_STATE
         CLEAR_STATE_JIT()                                     :(RETURN)
*
JIT_JMPR JMPR_JIT(R)                                           :(RETURN)
*
JIT_JMPI SET_P(P)
         JMPI_JIT()
         JIT_JMPI = GET_P()                                    :(RETURN)
*
JIT_CALLR
         CALLR_JIT(R)                                          :(RETURN)
*
JIT_CALLI
         SET_P(P)
         CALLI_JIT()
         JIT_CALLI = GET_P()                                   :(RETURN)
*
JIT_NOTE NOTE_JIT(S, N)
         JIT_NOTE = GET_P()                                    :(RETURN)
*
JIT_NAME NAME_JIT(S)
         JIT_NAME = GET_P()                                    :(RETURN)
*
JIT_PREPARE
         PREPARE_JIT()                                         :(RETURN)
*
JIT_ALLOCAI
         JIT_ALLOCAI = ALLOCAI_JIT(N)                          :(RETURN)
*
JIT_PATCH_AT
         SET_P(P2)
         P_TO_P2()
         SET_P(P)
         PATCH_AT_JIT()                                        :(RETURN)
*
JIT_PATCH_ABS
         SET_P(P2)
         P_TO_P2()
         SET_P(P)
         PATCH_ABS_JIT()                                       :(RETURN)
*
JIT_PATCH
         SET_P(P)
         PATCH_JIT()                                           :(RETURN)
*
JIT_ADDR ADDR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_ADDCR
         ADDCR_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_ADDXR
         ADDXR_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_SUBR SUBR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_SUBCR
         SUBCR_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_SUBXR
         SUBXR_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_MULR MULR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_DIVR DIVR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_DIVR_U
         DIVR_U_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_REMR REMR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_REMR_U
         REMR_U_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_ANDR ANDR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_ORR  ORR_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_XORR XORR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_LSHR LSHR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_RSHR RSHR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_RSHR_U
         RSHR_U_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LTR  LTR_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_LTR_U
         LTR_U_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_LER  LER_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_LER_U
         LER_U_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GER  GER_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_GER_U
         GER_U_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GTR  GTR_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_GTR_U
         GTR_U_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_EQR  EQR_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_NER  NER_JIT(R1, R2, R3)                                   :(RETURN)
*
JIT_ADDR_F
         ADDR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_ADDR_D
         ADDR_D_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_SUBR_F
         SUBR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_SUBR_D
         SUBR_D(R1, R2, R3)                                    :(RETURN)
*
JIT_MULR_F
         MULR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_MULR_D
         MULR_D_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_DIVR_F
         DIVR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_DIVR_D
         DIVR_D_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LTR_F
         LTR_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_LER_F
         LER_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_EQR_F
         EQR_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GER_F
         GER_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GTR_F
         GTR_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_NER_F
         NER_F_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_UNLTR_F
         UNLTR_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNLER_F
         UNLER_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNEQR_F
         UNEQR_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNGER_F
         UNGER_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNGTR_F
         UNGTR_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_LTGTR_F
         LTGTR_F_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_ORDR_F
         ORDR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_UNORDR_F
         UNORDR_F_JIT(R1, R2, R3)                              :(RETURN)
*
JIT_LTR_D
         LTR_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_LER_D
         LER_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_EQR_D
         EQR_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GER_D
         GER_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_GTR_D
         GTR_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_NER_D
         NER_D_JIT(R1, R2, R3)                                 :(RETURN)
*
JIT_UNLTR_D
         UNLTR_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNLER_D
         UNLER_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNEQR_D
         UNEQR_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNGER_D
         UNGER_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_UNGTR_D
         UNGTR_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_LTGTR_D
         LTGTR_D_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_ORDR_D
         ORDR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_UNORDR_D
         UNORDR_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR_C
         LDXR_C_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR_UC
         LDXR_UC_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_LDXR_S
         LDXR_S_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR_US
         LDXR_US_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_LDXR_I
         LDXR_I_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR_UI
         LDXR_UI_JIT(R1, R2, R3)                               :(RETURN)
*
JIT_LDXR_L
         LDXR_L_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR LDXR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_LDXR_F
         LDXR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_LDXR_D
         LDXR_D_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR_C
         STXR_C_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR_S
         STRX_S_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR_I
         STXR_I_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR STXR_JIT(R1, R2, R3)                                  :(RETURN)
*
JIT_STXR_L
         STXR_L_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR_F
         SRXR_F_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_STXR_D
         STXR_D_JIT(R1, R2, R3)                                :(RETURN)
*
JIT_BLTR BLTR_JIT(R1, R2)
         JIT_BLTR = GET_P()                                    :(RETURN)
*
JIT_BLTR_U
         BLTR_U_JIT(R1, R2)
         JIT_BLTR_U = GET_P()                                  :(RETURN)
*
JIT_BLER BLER_JIT(R1, R2)
         JIT_BLER = GET_P()                                    :(RETURN)
*
JIT_BLER_U
         BLER_U_JIT(R1, R2)
         JIT_BLER_U = GET_P()                                  :(RETURN)
*
JIT_BGTR BGTR_JIT(R1, R2)
         JIT_BGTR = GET_P()                                    :(RETURN)
*
JIT_BGTR_U
         BGTR_U_JIT(R1, R2)
         JIT_BGTR_U = GET_P()                                  :(RETURN)
*
JIT_BGER BGER_JIT(R1, R2)
         JIT_BGER = GET_P()                                    :(RETURN)
*
JIT_BGER_U
         BGER_U_JIT(R1, R2)
         JIT_BGER_U = GET_P()                                  :(RETURN)
*
JIT_BEQR BEQR_JIT(R1, R2)
         JIT_BEQR = GET_P()                                    :(RETURN)
*
JIT_BNER BNER_JIT(R1, R2)
         JIT_BNER = GET_P()                                    :(RETURN)
*
JIT_BMSR BMSR_JIT(R1, R2)
         JIT_BMSR = GET_P()                                    :(RETURN)
*
JIT_BMCR BMCR_JIT(R1, R2)
         JIT_BMCR = GET_P()                                    :(RETURN)
*
JIT_BOADDR
         BOADDR_JIT(R1, R2)
         JIT_BOADDR = GET_P()                                  :(RETURN)
*
JIT_BXADDR
         BXADDR_JIT(R1, R2)
         JIT_BXADDR = GET_P()                                  :(RETURN)
*
JIT_BOSUBR
         BOSUBR_JIT(R1, R2)
         JIT_BOSUBR = GET_P()                                  :(RETURN)
*
JIT_BXSUBR
         BXSUBR_JIT(R1, R2)
         JIT_BXSUBR = GET_P()                                  :(RETURN)
*
JIT_BOADDR_U
         BOADDR_U_JIT(R1, R2)
         JIT_BOADDR_U = GET_P()                                :(RETURN)
*
JIT_BXADDR_U
         BXADDR_U_JIT(R1, R2)
         JIT_BXADDR_U = GET_P()                                :(RETURN)
*
JIT_BOSUBR_U
         BOSUBR_U_JIT(R1, R2)
         JIT_BOSUBR_U = GET_P()                                :(RETURN)
*
JIT_BXSUBR_U
         BXSUBR_U_JIT(R1, R2)
         JIT_BXSUBR_U = GET_P()                                :(RETURN)
*
JIT_BLTR_F
         BLTR_F_JIT(R1, R2)
         JIT_BLTR_F = GET_P()                                  :(RETURN)
*
JIT_BLER_F
         BLER_F_JIT(R1, R2)
         JIT_BLER_F = GET_P()                                  :(RETURN)
*
JIT_BGTR_F
         BGTR_F_JIT(R1, R2)
         JIT_BGTR_F = GET_P()                                  :(RETURN)
*
JIT_BGER_F
         BGER_F_JIT(R1, R2)
         JIT_BGER_F = GET_P()                                  :(RETURN)
*
JIT_BEQR_F
         BEQR_F_JIT(R1, R2)
         JIT_BEQR_F = GET_P()                                  :(RETURN)
*
JIT_BNER_R
         BNER_R_JIT(R1, R2)
         JIT_BNER_R = GET_P()                                  :(RETURN)
*
JIT_BUNLTR_F
         BUNLTR_F_JIT(R1, R2)
         JIT_BUNLTR_F = GET_P()                                :(RETURN)
*
JIT_BUNLER_F
         BUNLER_F_JIT(R1, R2)
         JIT_BUNLER_F = GET_P()                                :(RETURN)
*
JIT_BUNEQR_F
         BUNEQR_F_JIT(R1, R2)
         JIT_BUNEQR_F = GET_P()                                :(RETURN)
*
JIT_BUNGER_F
         BUNGER_F_JIT(R1, R2)
         JIT_BUNGER_F = GET_P()                                :(RETURN)
*
JIT_BUNGTR_F
         BUNGTR_F_JIT(R1, R2)
         JIT_BUNGTR_F = GET_P()                                :(RETURN)
*
JIT_BLTGTR_F
         BLTGTR_F_JIT(R1, R2)
         JIT_BLTGTR_F = GET_P()                                :(RETURN)
*
JIT_BORDR_F
         BORDR_F_JIT(R1, R2)
         JIT_BORDR_F = GET_P()                                 :(RETURN)
*
JIT_BUNORDR_F
         BUNORDR_F_JIT(R1, R2)
         JIT_BUNORDR_F = GET_P()                               :(RETURN)
*
JIT_BLTR_D
         BLTR_D_JIT(R1, R2)
         JIT_BLTR_D = GET_P()                                  :(RETURN)
*
JIT_BLER_D
         BLER_D_JIT(R1, R2)
         JIT_BLER_D = GET_P()                                  :(RETURN)
*
JIT_BGTR_D
         BGTR_D_JIT(R1, R2)
         JIT_BGTR_D = GET_P()                                  :(RETURN)
*
JIT_BEQR_D
         BEQR_D_JIT(R1, R2)
         JIT_BEQR_D = GET_P()                                  :(RETURN)
*
JIT_BNER_D
         BNER_D_JIT(R1, R2)
         JIT_BNER_D = GET_P()                                  :(RETURN)
*
JIT_BUNLTR_D
         BUNLTR_D_JIT(R1, R2)
         JIT_BUNLTR_D = GET_P()                                :(RETURN)
*
JIT_BUNLER_D
         BUNLER_D_JIT(R1, R2)
         JIT_BUNLER_D = GET_P()                                :(RETURN)
*
JIT_BUNEQR_D
         BUNEQR_D_JIT(R1, R2)
         JIT_BUNEQR_D = GET_P()                                :(RETURN)
*
JIT_BUNGER_D
         BUNGER_D_JIT(R1, R2)
         JIT_BUNGER_D = GET_P()                                :(RETURN)
*
JIT_BUNGTR_D
         BUNGTR_D_JIT(R1, R2)
         JIT_BUNGTR_D = GET_P()                                :(RETURN)
*
JIT_BLTGTR_D
         BLTGTR_D_JIT(R1, R2)
         JIT_BLTGTR_D = GET_P()                                :(RETURN)
*
JIT_BORDR_D
         BORDR_D_JIT(R1, R2)
         JIT_BORDR_D = GET_P()                                 :(RETURN)
*
JIT_BUNORDR_D
         BUNORDR_D_JIT(R1, R2)
         JIT_BUNORDR_D = GET_P()                               :(RETURN)
*
JIT_ADDI SET_P(P)
         ADDI_JIT(R1, R2)                                      :(RETURN)
*
JIT_ADDCI
         SET_P(P)
         ADDCI_JIT(R1, R2)                                     :(RETURN)
*
JIT_ADDXI
         SET_P(P)
         ADDXI_JIT(R1, R2)                                     :(RETURN)
*
JIT_SUBI SET_P(P)
         SUBI_JIT(R1, R2)                                      :(RETURN)
*
JIT_SUBCI
         SET_P(P)
         SUBCI_JIT(R1, R2)                                     :(RETURN)
*
JIT_SUBXI
         SET_P(P)
         SUBXI_JIT(R1, R2)                                     :(RETURN)
*
JIT_MULI SET_P(P)
         MULI_JIT(R1, R2)                                      :(RETURN)
*
JIT_DIVI SET_P(P)
         DIVI_JIT(R1, R2)                                      :(RETURN)
*
JIT_DIVI_U
         SET_P(P)
         DIVI_U_JIT(R1, R2)                                    :(RETURN)
*
JIT_REMI SET_P(P)
         REMI_JIT(R1, R2)                                      :(RETURN)
*
JIT_REMI_U
         SET_P(P)
         REMI_U_JIT(R1, R2)                                    :(RETURN)
*
JIT_ANDI SET_P(P)
         ANDI_JIT(R1, R2)                                      :(RETURN)
*
JIT_ORI  SET_P(P)
         ORI_JIT(R1, R2)                                       :(RETURN)
*
JIT_XORI SET_P(P)
         XORI_JIT(R1, R2)                                      :(RETURN)
*
JIT_LSHI SET_P(P)
         LSHI_JIT(R1, R2)                                      :(RETURN)
*
JIT_RSHI SET_P(P)
         RSHI_JIT(R1, R2)                                      :(RETURN)
*
JIT_RSHI_U
         SET_P(P)
         RSHI_U_JIT(R1, R2)                                    :(RETURN)
*
JIT_LTI  SET_P(P)
         LTI_JIT(R1, R2)                                       :(RETURN)
*
JIT_LTI_U
         SET_P(P)
         LTI_U_JIT(R1, R2)                                     :(RETURN)
*
JIT_LEI  SET_P(P)
         LEI_JIT(R1, R2)                                       :(RETURN)
*
JIT_LEI_U
         SET_P(P)
         LEI_U_JIT(R1, R2)                                     :(RETURN)
*
JIT_GEI  SET_P(P)
         GEI_JIT(R1, R2)                                       :(RETURN)
*
JIT_GEI_U
         SET_P(P)
         GEI_U_JIT(R1, R2)                                     :(RETURN)
*
JIT_GTI  SET_P(P)
         GTI_JIT(R1, R2)                                       :(RETURN)
*
JIT_GTI_U
         SET_P(P)
         GTI_U_JIT(R1, R2)                                     :(RETURN)
*
JIT_EQI  SET_P(P)
         EQI_JIT(R1, R2)                                       :(RETURN)
*
JIT_NEI  SET_P(P)
         NEI_JIT(R1, R2)                                       :(RETURN)
*
JIT_LDXI_C
         SET_P(P)
         LDXI_C_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDXI_UC
         SET_P(P)
         LDXI_UC_JIT(R1, R2)                                   :(RETURN)
*
JIT_LDXI_S
         SET_P(P)
         LDXI_S_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDXI_US
         SET_P(P)
         LDXI_US_JIT(R1, R2)                                   :(RETURN)
*
JIT_LDXI_I
         SET_P(P)
         LDXI_I_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDXI_UI
         SET_P(P)
         LDXI_UI_JIT(R1, R2)                                   :(RETURN)
*
JIT_LDXI_L
         SET_P(P)
         LDXI_L_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDXI SET_P(P)
         LDXI_JIT(R1, R2)                                      :(RETURN)
*
JIT_LDXI_F
         SET_P(P)
         LDXI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDXI_D
         SET_P(P)
         LDXI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI_C
         SET_P(P)
         STXI_C_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI_S
         SET_P(P)
         STXI_S_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI_I
         SET_P(P)
         STXI_I_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI_L
         SET_P(P)
         STXI_L_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI
         SET_P(P)
         STXI_JIT(R1, R2)                                      :(RETURN)
*
JIT_STXI_F
         SET_P(P)
         STXI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_STXI_D
         SET_P(P)
         STXI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_ADDI_F
         SET_F(F)
         ADDI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_SUBI_F
         SET_F(F)
         SUBI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_MULI_F
         SET_F(F)
         MULI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_DIVI_F
         SET_F(F)
         DIVI_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_ADDI_D
         SET_D(D)
         ADDI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_SUBI_D
         SET_D(D)
         SUBI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_MULI_D
         SET_D(D)
         MULI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_DIVI_D
         SET_D(D)
         DIVI_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_MOVR MOVR_JIT(R1, R2)                                      :(RETURN)
*
JIT_MOVR_F
         MOVR_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_MOVR_D
         MOVR_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_HTONR
         HTONR_JIT(R1, R2)                                     :(RETURN)
*
JIT_NTOHR
         NTOHR_JIT(R1, R2)                                     :(RETURN)
*
JIT_COMR COMR_JIT(R1, R2)                                      :(RETURN)
*
JIT_NEGR NEGR_JIT(R1, R2)                                      :(RETURN)
*
JIT_NEGR_F
         NEGR_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_NEGR_D
         NEGR_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_ABSR_F
         ABSR_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_ABSR_D
         ABSR_D_JIT(R1, R2)                                    :(RETURN)
JIT_SQRTR_F
         SQRTR_F_JIT(R1, R2)                                   :(RETURN)
*
JIT_SQRTR_D
         SQRTR_D_JIT(R1, R2)                                   :(RETURN)
*
JIT_EXTR_C
         EXTR_C_JIT(R1, R2)                                    :(RETURN)
*
JIT_EXTR_UC
         EXTR_UC_JIT(R1, R2)                                   :(RETURN)
*
JIT_EXTR_S
         EXTR_S_JIT(R1, R2)                                    :(RETURN)
*
JIT_EXTR_US
         EXTR_US_JIT(R1, R2)                                   :(RETURN)
*
JIT_EXTR_I
         EXTR_I_JIT(R1, R2)                                    :(RETURN)
*
JIT_EXTR_UI
         EXTR_UI_JIT(R1, R2)                                   :(RETURN)
*
JIT_EXTR_F
         EXTR_F_JIT(R1, R2)                                    :(RETURN)
*
JIT_EXTR_D_F
         EXTR_D_F_JIT(R1, R2)                                  :(RETURN)
*
JIT_EXTR_D
         EXTR_D_JIT(R1, R2)                                    :(RETURN)
*
JIT_EXTR_F_D
         EXTR_F_D_JIT(R1, R2)                                  :(RETURN)
*
JIT_TRUNCR_F_I
         TRUNCR_F_I_JIT(R1, R2)                                :(RETURN)
*
JIT_TRUNCR_F
         TRUNCR_F_JIT(R1, R2)                                  :(RETURN)
*
JIT_TRUNCR_F_L
         TRUNCR_F_L_JIT(R1, R2)                                :(RETURN)
*
JIT_TRUNCR_D_I
         TRUNCR_D_I_JIT(R1, R2)                                :(RETURN)
*
JIT_TRUNCR_D
         TRUNCR_D_JIT(R1, R2)                                  :(RETURN)
*
JIT_TRUNCR_D_L
         TRUNCR_D_L_JIT(R1, R2)                                :(RETURN)
*
JIT_LDR_C
         LDR_C_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDR_UC
         LDR_UC_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDR_S
         LDR_S_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDR_US
         LDR_US_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDR_I
         LDR_I_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDR
         LDR_JIT(R1, R2)                                       :(RETURN)
*
JIT_LDR_UI
         LDR_UI_JIT(R1, R2)                                    :(RETURN)
*
JIT_LDR_L
         LDR_L_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDR_F
         LDR_F_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDR_D
         LDR_D_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR_C
         STR_C_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR_S
         STR_S_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR_I
         STR_I_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR  STR_JIT(R1, R2)                                       :(RETURN)
*
JIT_STR_L
         STR_L_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR_F
         STR_F_JIT(R1, R2)                                     :(RETURN)
*
JIT_STR_D
         STR_D_JIT(R1, R2)                                     :(RETURN)
*
JIT_LDI_C
         SET_P(P)
         LDI_C_JIT(R)                                          :(RETURN)
*
JIT_LDI_UC
         SET_P(P)
         LDI_UC_JIT(R)                                         :(RETURN)
*
JIT_LDI_S
         SET_P(P)
         LDI_S_JIT(R)                                          :(RETURN)
*
JIT_LDI_US
         SET_P(P)
         LDI_US_JIT(R)                                         :(RETURN)
*
JIT_LDI_I
         SET_P(P)
         LDI_I_JIT(R)                                          :(RETURN)
*
JIT_LDI  SET_P(P)
         LDI_JIT(R)                                            :(RETURN)
*
JIT_LDI_UI
         SET_P(P)
         LDI_UI_JIT(R)                                         :(RETURN)
*
JIT_LDI_L
         SET_P(P)
         LDI_L_JIT(R)                                          :(RETURN)
*
JIT_LDI_F
         SET_P(P)
         LDI_F_JIT(R)                                          :(RETURN)
*
JIT_LDI_D
         SET_P(P)
         LDI_D_JIT(R)                                          :(RETURN)
*
JIT_PUSHARGI
         SET_P(P)
         PUSHARGI_JIT()                                        :(RETURN)
*
JIT_PUSHARGI_F
         SET_F(F)
         PUSHARGI_F_JIT()                                      :(RETURN)
*
JIT_PUSHARGI_D
         SET_D(D)
         PUSHARGI_D_JIT()                                      :(RETURN)
*
JIT_BLTI SET_P(P)
         BLTI_JIT(R)                                           :(RETURN)
*
JIT_BLTI_U
         SET_P(P)
         BLTI_U_JIT(R)                                         :(RETURN)
*
JIT_BLEI SET_P(P)
         BLEI_JIT(R)                                           :(RETURN)
*
JIT_BLEI_U
         SET_P(P)
         BLEI_U_JIT(R)                                         :(RETURN)
*
JIT_BEQI SET_P(P)
         BEQI_JIT(R)                                           :(RETURN)
*
JIT_BGEI SET_P(P)
         BGEI_JIT(R)                                           :(RETURN)
*
JIT_BGEI_U
         SET_P(P)
         BGEI_U_JIT(R)                                         :(RETURN)
*
JIT_BGTI SET_P(P)
         BGTI_JIT(R)                                           :(RETURN)
*
JIT_BGTI_U
         SET_P(P)
         BGTI_U_JIT(R)                                         :(RETURN)
*
JIT_BNEI SET_P(P)
         BNEI_JIT(R)                                           :(RETURN)
*
JIT_BMSI SET_P(P)
         BMSI_JIT(R)                                           :(RETURN)
*
JIT_BMCI SET_P(P)
         BMCI_JIT(R)                                           :(RETURN)
*
JIT_BOADDI
         SET_P(P)
         BOADDI_JIT(R)                                         :(RETURN)
*
JIT_BOADDI_U
         SET_P(P)
         BOADDI_U_JIT(R)                                       :(RETURN)
*
JIT_BXADDI
         SET_P(P)
         BXADDI_JIT(R)                                         :(RETURN)
*
JIT_BXADDI_U
         SET_P(P)
         BXADDI_U_JIT(R)                                       :(RETURN)
*
JIT_BOSUBI
         SET_P(P)
         BOSUBI_JIT(R)                                         :(RETURN)
*
JIT_BOSUBI_U
         SET_P(P)
         BOSUBI_U_JIT(R)                                       :(RETURN)
*
JIT_BXSUBI
         SET_P(P)
         BXSUBI_JIT(R)                                         :(RETURN)
*
JIT_BXSUBI_U
         SET_P(P)
         BXSUBI_U_JIT(R)                                       :(RETURN)
*
JIT_STI_C
         SET_P(P)
         STI_C_JIT(R)                                          :(RETURN)
*
JIT_STI_S
         SET_P(P)
         STI_S_JIT(R)                                          :(RETURN)
*
JIT_STI_I
         SET_P(P)
         STI_I_JIT(R)                                          :(RETURN)
*
JIT_STI  SET_P(P)
         STI_JIT(R)                                            :(RETURN)
*
JIT_STI_L
         SET_P(P)
         STI_L_JIT(R)                                          :(RETURN)
*
JIT_STI_F
         SET_P(P)
         STI_F_JIT(R)                                          :(RETURN)
*
JIT_STI_D
         SET_P(P)
         STI_D_JIT(R)                                          :(RETURN)
*
JIT_PUSHARGR
         PUSHARGR_JIT(R)                                       :(RETURN)
*
JIT_PUSHARGR_F
         PUSHARGR_F_JIT(R)                                     :(RETURN)
*
JIT_PUSHARGR_D
         PUSHARGR_D_JIT(R)                                     :(RETURN)
*
JIT_RETVAL_C
         RETVAL_C_JIT(R)                                       :(RETURN)
*
JIT_RETVAL_UC
         RETVAL_UC_JIT(R)                                      :(RETURN)
*
JIT_RETVAL_S
         RETVAL_S_JIT(R)                                       :(RETURN)
*
JIT_RETVAL_US
         RETVAL_US_JIT(R)                                      :(RETURN)
*
JIT_RETVAL_I
         RETVAL_I_JIT(R)                                       :(RETURN)
*
JIT_RETVAL
         RETVAL_JIT(R)                                         :(RETURN)
*
JIT_RETVAL_UI
         RETVAL_UI_JIT(R)                                      :(RETURN)
*
JIT_RETVAL_L
         RETVAL_L_JIT(R)                                       :(RETURN)
*
JIT_RETVAL_F
         RETVAL_F_JIT(R)                                       :(RETURN)
*
JIT_RETVAL_D
         RETVAL_D_JIT(R)                                       :(RETURN)
*
JIT_END  CODE('JIT_DEFINE')
*
* CE: .MSNOBOL4;
