<h1>P64 - Pointer Utilities</h1>

Pointer utilities Includes peek and poke of various types (_p = pointer,
_c = char, _s = short, _i = int, _f = float, _d = double, _ld = long
double). Note that long long is excluded.

[[POKE_STRING(P,STRING)]] puts a C string into memory. A zero byte is
added to the string. This is used for compatibility with C routines.
[[PEEK_STRING(P)]] retrieves the C string at location P.
[[POKE_BUFFER(P,STRING)]] is similar to [[POKE_STRING]]. [[POKE_BUFFER]]
does not add a zero byte. Note that both [[POKE_STRING]] and
[[POKE_BUFFER]] copy all bytes of the string; C routines will stop at
the first zero byte [[CHAR(0)]] (which is added by [[POKE_STRING]]).
[[PEEK_BUFFER(P,N)]] returns the data at location P for N bytes.

The long long type can be supported using _buffer, if really needed.
CSNOBOL4 does not support integers of that size -- however, these
can be done with INFINIP.INC, and custom conversion code (but, be
careful about the sign of the numbers).

[[PEEK_C(P)]] is equivalent to [[ORD(PEEK_BUFFER(P,1))]], except that
the [[PEEK_C]] function is four times faster in this case. However,
note that composing [[PEEK_BUFFER]] from [[PEEK_C]] will quickly
be a loss, because running the compose code in CSNOBOL4 will be much
slower.

[[INCLUDE]]s used while building p64.so are:

<a href="CRACK.html">CRACK</a><br>
<a href="DYNAMIC.html">DYNAMIC</a><br>
<a href="SEQ.html">SEQ</a><br>
<a href="WRAPPER.html">WRAPPER</a>

<h2>Uses</h2>

<<INCLUDES>>=
@

<<P64>>=
-SNOBOL TERMINAL = 'P64 (FRI JUL 18 18:01:13 EDT 2014)'
-SNOBOL SLOAD('CRACK.INC')
-SNOBOL SLOAD('DYNAMIC.INC')
-SNOBOL SLOAD('SEQ.INC')
-SNOBOL SLOAD('WRAPPER.INC')
@

Build [[p64.c]] so we can produce our shared library.

<<P64>>=
-EMBED C 'p64'
@

<<P64,TYPE=C>>=
-SNOBOL WRAPPER_STARTFILE(.EMBED)

#include <stdlib.h>
#include <string.h>

/* PEEK_STRING(INTEGER)STRING */

PEEK_STRING( LA_ALIST ) LA_DCL
{
    char *p = LA_PTR(0);
    RETSTR(p);
}

/* POKE_STRING(INTEGER,STRING) */

POKE_STRING( LA_ALIST ) LA_DCL
{
    char *p = LA_PTR(0);
    char *s = LA_STR_PTR(1);
    int n = LA_STR_LEN(1);
    memcpy(p, s, n);
    p[n] = 0;
    RETNULL;
}

/* PEEK_BUFFER(INTEGER,INTEGER)STRING */

PEEK_BUFFER( LA_ALIST ) LA_DCL
{
    char *p = LA_PTR(0);
    int n = LA_INT(1);
    RETSTR2(p, n);
}

/* POKE_BUFFER(INTEGER,STRING) */

POKE_BUFFER( LA_ALIST ) LA_DCL
{
    char *p = LA_PTR(0);
    char *s = LA_STR_PTR(1);
    int n = LA_STR_LEN(1);
    memcpy(p, s, n);
    RETNULL;
}

static long peek_p(long p) { return (long)*(void **)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_P(LONG)LONG', .EMBED)

static long peek_c(long p) { return *(unsigned char *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_C(LONG)INTEGER', .EMBED)

static long peek_s(long p) { return *(short *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_S(LONG)INTEGER', .EMBED)

static long peek_i(long p) { return *(int *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_I(LONG)INTEGER', .EMBED)

static double peek_d(long p) { return *(double *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_D(LONG)REAL', .EMBED)

static double peek_f(long p) { return *(float *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_F(LONG)REAL', .EMBED)

static double peek_ld(long p) { return *(long double *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_LD(LONG)REAL', .EMBED)

static void poke_p(long p, long v) { *(void **)p = (void *)v; }

-SNOBOL C_WRAPPER_PROTO('POKE_P(LONG,LONG)', .EMBED)

static void poke_c(long p, int c)
{
    *(unsigned char *)p = (unsigned char)c;
}

-SNOBOL C_WRAPPER_PROTO('POKE_C(LONG,INTEGER)', .EMBED)

static void poke_s(long p, int s) { *(short *)p = (short)s; }

-SNOBOL C_WRAPPER_PROTO('POKE_S(LONG,INTEGER)', .EMBED)

static void poke_i(long p, int i) { *(int *)p = (int)i; }

-SNOBOL C_WRAPPER_PROTO('POKE_I(LONG,INTEGER)', .EMBED)

static void poke_d(long p, double v) { *(double *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_D(LONG,REAL)', .EMBED)

static void poke_f(long p, double v) { *(float *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_F(LONG,REAL)', .EMBED)

static void poke_ld(long p, double v) { *(long double *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_LD(LONG,REAL)', .EMBED)

-END
@

Build [[p64.so]] shared library.

<<P64>>=
-SNOBOL DYNAMIC_DEBUG = 1
-SNOBOL COMPILE_DYNAMIC(p64) :F(ERROR) ;
-SNOBOL OBJECTS = p64; OBJECTS '.c' = '.o'
-SNOBOL LINK_DYNAMIC('./p64', OBJECTS) :F(ERROR) ;
-CMNT ERASE TEMPORARY FILES
-CMNT     WE DON'T NEED THE C BITS, OR THE OBJECT FILES ANYMORE.
-CMNT     ALL WE REQUIRE IS p64.so
-CMNT -SNOBOL A = CRACK(p64 ' ' OBJECTS, ' ')
-CMNT -SNOBOL SEQ(' DELETE(A<K>) ', .K)
@

<<P64>>=
-PUBLIC PEEK_STRING(), POKE_STRING(), PEEK_BUFFER(), POKE_BUFFER()
*
         LOAD('PEEK_STRING(INTEGER)STRING', 'p64.so')
         LOAD('POKE_STRING(INTEGER,STRING)', 'p64.so')
         LOAD('PEEK_BUFFER(INTEGER,INTEGER)STRING', 'p64.so')
         LOAD('POKE_BUFFER(INTEGER,STRING)', 'p64.so')
*
-PUBLIC PEEK_P(), PEEK_C(), PEEK_S(), PEEK_I(), PEEK_D(), PEEK_F()
-PUBLIC PEEK_LD()
-PUBLIC POKE_P(), POKE_C(), POKE_S(), POKE_I(), POKE_D(), POKE_F()
-PUBLIC POKE_LD() 
*
         LOAD('PEEK_P(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_C(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_S(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_I(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_D(INTEGER)REAL', 'p64.so')
         LOAD('PEEK_F(INTEGER)REAL', 'p64.so')
         LOAD('PEEK_LD(INTEGER)REAL', 'p64.so')
         LOAD('POKE_P(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_C(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_S(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_I(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_D(INTEGER,REAL)', 'p64.so')
         LOAD('POKE_F(INTEGER,REAL)', 'p64.so')
         LOAD('POKE_LD(INTEGER,REAL)', 'p64.so')
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'P64.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
-MODULE P64
<<INCLUDES>>
-IN72
-CASE 1
-STITL P64
-EJECT
*
************************************************************************
*                                                                      *
*                       ######    ###   #   #                          *
*                       #     #  #   #  #   #                          *
*                       #     #  #      #   #                          *
*                       ######   ####   #####                          *
*                       #        #   #      #                          *
*                       #        #   #      #                          *
*                       #         ###       #                          *
*                                                                      *
* P64                    POINTER UTILITIES                             *
*                                                                      *
************************************************************************
*
* P64.lss
*
<<P64>>
*
* CE: .F.MSNOBOL4;
@
