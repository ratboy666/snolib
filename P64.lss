<h1>P64 - Pointer Utilities</h1>

Pointer utilities Includes peek and poke of various types (_p = pointer,
_c = char, _s = short, _i = int, _f = float, _d = double, _ld = long
double). Note that long long is excluded.

Defines interface to malloc(), free(), strdup() and strlen().

[[INCLUDE]]s used while building p64.so are:

<a href="CRACK.html">CRACK</a><br>
<a href="DYNAMIC.html">DYNAMIC</a><br>
<a href="SEQ.html">SEQ</a><br>
<a href="WRAPPER.html">WRAPPER</a>

<h2>Uses</h2>

<<INCLUDES>>=
@

<<P64>>=
-SNOBOL TERMINAL = 'P64 (SUN NOV 10 03:57:08 EST 2013)'
-SNOBOL SLOAD('CRACK.INC')
-SNOBOL SLOAD('DYNAMIC.INC')
-SNOBOL SLOAD('SEQ.INC')
-SNOBOL SLOAD('WRAPPER.INC')
@

Build [[p64.c]] so we can produce our shared library.

<<P64>>=
-EMBED C 'p64'
@

<<P64,TYPE=C>>=
-SNOBOL WRAPPER_STARTFILE(.EMBED)

#include <stdlib.h>
#include <string.h>

static long peek_p(long p) { return (long)*(void **)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_P(LONG)LONG', .EMBED)

static long peek_c(long p) { return *(char *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_C(LONG)INTEGER', .EMBED)

static long peek_s(long p) { return *(short *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_S(LONG)INTEGER', .EMBED)

static long peek_i(long p) { return *(int *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_I(LONG)INTEGER', .EMBED)

static double peek_d(long p) { return *(double *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_D(LONG)REAL', .EMBED)

static double peek_f(long p) { return *(float *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_F(LONG)REAL', .EMBED)

static double peek_ld(long p) { return *(long double *)p; }

-SNOBOL C_WRAPPER_PROTO('PEEK_LD(LONG)REAL', .EMBED)

static void poke_p(long p, long v) { *(void **)p = (void *)v; }

-SNOBOL C_WRAPPER_PROTO('POKE_P(LONG,LONG)', .EMBED)

static void poke_c(long p, int c) { *(char *)p = (char)c; }

-SNOBOL C_WRAPPER_PROTO('POKE_C(LONG,INTEGER)', .EMBED)

static void poke_s(long p, int s) { *(short *)p = (short)s; }

-SNOBOL C_WRAPPER_PROTO('POKE_S(LONG,INTEGER)', .EMBED)

static void poke_i(long p, int i) { *(int *)p = (int)i; }

-SNOBOL C_WRAPPER_PROTO('POKE_I(LONG,INTEGER)', .EMBED)

static void poke_d(long p, double v) { *(double *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_D(LONG,REAL)', .EMBED)

static void poke_f(long p, double v) { *(float *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_F(LONG,REAL)', .EMBED)

static void poke_ld(long p, double v) { *(long double *)p = v; }

-SNOBOL C_WRAPPER_PROTO('POKE_LD(LONG,REAL)', .EMBED)

static long malloc_(int n) { return (long)malloc(n); }

-SNOBOL C_WRAPPER_PROTO('MALLOC_(INTEGER)LONG', .EMBED)

static void free_(long p) { free((void *)p); }

-SNOBOL C_WRAPPER_PROTO('FREE_(LONG)', .EMBED)

static long strdup_(char *s) { return (long)strdup(s); }

-SNOBOL C_WRAPPER_PROTO('STRDUP_(STRING)LONG', .EMBED)

static long strlen_(long p) { return strlen((char *)p); }

-SNOBOL C_WRAPPER_PROTO('STRLEN_(LONG)INTEGER', .EMBED)

-END
@

Build [[p64.so]] shared library.

<<P64>>=
-SNOBOL DYNAMIC_DEBUG = 1
-SNOBOL COMPILE_DYNAMIC(p64) :F(ERROR) ;
-SNOBOL OBJECTS = p64; OBJECTS '.c' = '.o'
-SNOBOL LINK_DYNAMIC('./p64', OBJECTS) :F(ERROR) ;
-CMNT ERASE TEMPORARY FILES
-CMNT     WE DON'T NEED THE C BITS, OR THE OBJECT FILES ANYMORE.
-CMNT     ALL WE REQUIRE IS p64.so
-CMNT -SNOBOL A = CRACK(p64 ' ' OBJECTS, ' ')
-CMNT -SNOBOL SEQ(' DELETE(A<K>) ', .K)
@

<<P64>>=
-PUBLIC PEEK_P(), PEEK_C(), PEEK_S(), PEEK_I(), PEEK_D(), PEEK_F()
-PUBLIC PEEK_LD()
-PUBLIC POKE_P(), POKE_C(), POKE_S(), POKE_I(), POKE_D(), POKE_F()
-PUBLIC POKE_LD() 
*
         LOAD('PEEK_P(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_C(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_S(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_I(INTEGER)INTEGER', 'p64.so')
         LOAD('PEEK_D(INTEGER)REAL', 'p64.so')
         LOAD('PEEK_F(INTEGER)REAL', 'p64.so')
         LOAD('PEEK_LD(INTEGER)REAL', 'p64.so')
         LOAD('POKE_P(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_C(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_S(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_I(INTEGER,INTEGER)', 'p64.so')
         LOAD('POKE_D(INTEGER,REAL)', 'p64.so')
         LOAD('POKE_F(INTEGER,REAL)', 'p64.so')
         LOAD('POKE_LD(INTEGER,REAL)', 'p64.so')
         LOAD('MALLOC_(INTEGER)INTEGER', 'p64.so')
         LOAD('FREE_(INTEGER)', 'p64.so')
         LOAD('STRDUP_(STRING)INTEGER', 'p64.so')
         LOAD('STRLEN_(INTEGER)INTEGER', 'p64.so')
*
@

Define the actual “API” for the P64 module.

<<P64>>=
-PUBLIC MALLOC(), FREE(), STRDUP(), STRLEN()
         DEFINE('MALLOC(N)')
         DEFINE('FREE(P)')
         DEFINE('STRDUP(S)')
         DEFINE('STRLEN(P)')                                  :(P64_END)
*
MALLOC   MALLOC = MALLOC_(N)                                   :(RETURN)
*
FREE     FREE_(P)                                              :(RETURN)
*
STRDUP   STRDUP = STRDUP_(S)                                   :(RETURN)
*
STRLEN   STRLEN = STRLEN_(P)                                   :(RETURN)
*
P64_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'P64.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
-MODULE P64
<<INCLUDES>>
-IN72
-CASE 1
-STITL P64
-EJECT
*
************************************************************************
*                                                                      *
*                       ######    ###   #   #                          *
*                       #     #  #   #  #   #                          *
*                       #     #  #      #   #                          *
*                       ######   ####   #####                          *
*                       #        #   #      #                          *
*                       #        #   #      #                          *
*                       #         ###       #                          *
*                                                                      *
* P64                    POINTER UTILITIES                             *
*                                                                      *
************************************************************************
*
* P64.lss
*
<<P64>>
*
* CE: .F.MSNOBOL4;
@
