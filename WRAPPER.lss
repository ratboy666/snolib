<h1>WRAPPER - Create C code to wrap a function for LOAD()ing</h1>

Writes a C function to do parameter and result conversion to allow
an external function to be used with [[LOAD()]].

<h2>Uses</h2>

<<INCLUDES>>=
@

<<WRAPPER>>=
         WPMAXSTR = 1024
         WPSTRTYPE = 'STRING'
         WPSTRFREE = 'STRING_FREE'
         WPSTRTYP2 = 'STRING2'
         WPINTTYPE = 'INTEGER'
         WPPTRTYPE = 'POINTER'
         WPLONGTYPE = 'LONG'
         WPREALTYPE = 'REAL'
         WPREDTYPE = 'PREDICATE'
         WPSPREDTYPE = 'SYSPRED'
         WPTYPES = WPLONGTYPE | WPINTTYPE | WPREALTYPE | WPSTRTYPE |
+                  WPPTRTYPE
         WPRTYPES = WPTYPES | WPREDTYPE | WPSPREDTYPE | WPSTRFREE |
+                   WPSTRTYP2 | ''
         WPNAME = ANY(&UCASE &LCASE '_')
+                 SPAN(&UCASE &LCASE '0123456789_')
         WPEND = ANY(',)')
         WP4SP = '    '
         WP8SP = '	'
*
* WRAPPER_STARTFILE(OUTPUT_NAME)
*
* OUTPUT_NAME: THE NAME (STRING) OF OUTPUT VAR FOR C FILE
*
-PUBLIC WRAPPER_STARTFILE()
         DEFINE('WRAPPER_STARTFILE(FN)')        :(WRAPPER_STARTFILE_END)
*
WRAPPER_STARTFILE
         $FN = '/* Generated by WRAPPER on ' DATE() ' */'
         $FN =
         $FN = '#include "config.h"'
         $FN = '#include "h.h"'
         $FN = '#include "snotypes.h"'
         $FN = '#include "macros.h"'
         $FN = '#include "load.h"'
         $FN = '#include "equ.h"'
         $FN = '#include <string.h>'
         $FN =                                                 :(RETURN)
*
WRAPPER_STARTFILE_END
*
-PUBLIC WRAPPER_COBOL()
         DEFINE('WRAPPER_COBOL(FN)')                :(WRAPPER_COBOL_END)
*
WRAPPER_COBOL
         $FN = '#include <libcob.h>'                           :(RETURN)
*
WRAPPER_COBOL_END
*
* WRAPPER_PROTO(PROTOTYPE,OUTPUT_NAME)
*
* PROTOTYPE:   A PROTOTYPE, AS PASSED TO SNOBOL LOAD() FUNCTION
*              C FUNCTION TO CALL IS THE LOWERCASE VERSION
*              OF THE FUNCTION NAME.
* OUTPUT_NAME: THE NAME (STRING) OF OUTPUT VARIABLE FOR C FILE
*
-PUBLIC WRAPPER_PROTO(), C_WRAPPER_PROTO(), COBOL_WRAPPER_PROTO()
-PUBLIC SCHEME_WRAPPER_PROTO()
         DEFINE('WRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL')
         DEFINE('C_WRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL',
+           'WRAPPER_PROTO')
         DEFINE('COBOL_WRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL',
+           'WRAPPER_PROTO')
         DEFINE('SCHEME_WRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL',
+           'WRAPPER_PROTO')                        :(WRAPPER_PROTO_END)
*
WRAPPER_PROTO
         $FN =
         $FN = '/* ' PROTO ' */'
         PROTO POS(0) WPNAME . NAME '(' =                      :F(WPERR)
         N = 0
         WPCOPY = 0
         TYPES = ARRAY('0:29')
         PROTO POS(0) ')' =                                  :S(WPEPARS)
WPLOOP   PROTO WPTYPES . TYPE WPEND . C =                      :F(WPERR)
         TYPES<N> = TYPE                                       :F(WPERR)
         N = N + 1
         WPCOPY = IDENT(TYPE, WPSTRTYPE) WPCOPY + 1
         IDENT(C, ')')                              :S(WPEPARS)F(WPLOOP)
WPERR    TERMINAL = 'ERROR IN PROTOTYPE: >' PROTO '<'         :(FRETURN)
WPEPARS  PROTO POS(0) WPRTYPES RPOS(0)                         :F(WPERR)
         I = 0
         $FN = NAME '( LA_ALIST ) LA_DCL'
         $FN = '{'
         EQ(WPCOPY, 0)                                      :S(WPNOSTRS)
*
WPLOOP2  IDENT(TYPES<I>, WPSTRTYPE)                          :F(WPNEXT2)
         $FN = WP4SP 'char arg' I '[' WPMAXSTR '];'
WPNEXT2  I = I + 1
         LT(I, N)                                            :S(WPLOOP2)
*
         I = 0
WPCOPY                                           :($('WPCPY_' TYPES<I>))
WPCPY_STRING
         $FN = WP4SP
+              'getstring(LA_PTR(' I '), arg' I ', sizeof(arg' I '));'
                                                              :(WPNCOPY)
WPCPY_LONG
WPCPY_INTEGER
WPCPY_REAL
WPCPY_POINTER
WPCPY_
WPNCOPY  I = I + 1
         LT(I, N)                                             :S(WPCOPY)
*
WPNOSTRS CALL = REPLACE(NAME, &UCASE, &LCASE) '('
         I = 0
WPCALL   GE(I, N)                                            :S(WPECALL)
         CALL = GT(I, 0) CALL ','                :($('WPARG_' TYPES<I>))
WPARG_POINTER
         CALL = CALL '(void *)(long)LA_INT(' I ')'            :(WPNCALL)
WPARG_LONG
         CALL = CALL '(long)LA_INT(' I ')'                    :(WPNCALL)
WPARG_INTEGER
         CALL = CALL '(int)LA_INT(' I ')'                     :(WPNCALL)
WPARG_REAL
         CALL = CALL '(double)LA_REAL(' I ')'                 :(WPNCALL)
WPARG_STRING
         CALL = CALL 'arg' I
WPNCALL  I = I + 1                                             :(WPCALL)
WPECALL  CALL = CALL ')'                            :($('WPRET_' PROTO))
*
WPRET_STRING
         $FN = WP4SP 'RETSTR((char *)' CALL ');'               :(WPDONE)
WPRET_STRING2
         $FN = WP4SP 'RETSTR2((char *)' CALL ',' LEN ');'      :(WPDONE)
WPRET_STRING_FREE
         $FN = WP4SP 'RETSTR_FREE((char *)' CALL ');'          :(WPDONE)
WPRET_POINTER
         $FN = WP4SP 'RETINT((long)' CALL ');'                 :(WPDONE)
WPRET_LONG
         $FN = WP4SP 'RETINT((long)' CALL ');'                 :(WPDONE)
WPRET_INTEGER
         $FN = WP4SP 'RETINT(' CALL ');'                       :(WPDONE)
WPRET_REAL
         $FN = WP4SP 'RETREAL(' CALL ');'                      :(WPDONE)
WPRET_PREDICATE
         $FN = WP4SP 'if (' CALL ')'
         $FN = WP8SP 'RETNULL;'
         $FN = WP4SP 'RETFAIL;'                                :(WPDONE)
* SYSTEM CALL (< 0 FOR FAILURE)
WPRET_SYSPRED
         $FN = WP4SP 'if (' CALL ' >= 0)'
         $FN = WP8SP 'RETNULL;'
         $FN = WP4SP 'RETFAIL;'                                :(WPDONE)
WPRET_
         $FN = WP4SP CALL ';'
         $FN = WP4SP 'RETNULL;'
* END OF FUNCTION
WPDONE   $FN = '}'                                             :(RETURN)
*
WRAPPER_PROTO_END
*
* FWRAPPER
*
* MAKE WRAPPER FOR FORTRAN FUNCTION
*
* SIMILAR TO C WRAPPER, BUT:
*
*     - ALL PARAMETERS NEED TO BE COPIED
*     - STRINGS ARE PASSED AS TWO PARAMETERS
*     - STRING RETURN IS AN ADDED PARAMETER ON THE FRONT OF THE ARG
*       LIST
*
* FWRAPPER_PROTO(PROTO,FN,LEN)
*
* PROTO:   A PROTOTYPE, AS PASSED TO SNOBOL LOAD() FUNCTION
*          FORTRAN FUNCTION TO CALL IS THE LOWERCASE VERSION
*          OF THE FUNCTION NAME WITH _ APPENDED.
* FN:      THE NAME (STRING) OF OUTPUT VARIABLE FOR C FILE
*
-PUBLIC FWRAPPER_PROTO(), FORTRAN_WRAPPER_PROTO()
         DEFINE('FWRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL')
         DEFINE('FORTRAN_WRAPPER_PROTO(PROTO,FN,LEN)TYPES,I,N,C,CALL',
+           'FWRAPPER_PROTO')                      :(FWRAPPER_PROTO_END)
*
FWRAPPER_PROTO
         $FN =
         $FN = '/* FORTRAN ' PROTO ' */'
         PROTO POS(0) WPNAME . NAME '(' =                      :F(WPERR)
         N = 0
         TYPES = ARRAY('0:29')
         PROTO POS(0) ')' =                                 :S(FWPEPARS)
FWPLOOP  PROTO WPTYPES . TYPE WPEND . C =                      :F(WPERR)
         TYPES<N> = TYPE                                       :F(WPERR)
         N = N + 1
         IDENT(C, ')')                            :S(FWPEPARS)F(FWPLOOP)
FWPEPARS WPCOPY = N
         PROTO POS(0) WPRTYPES RPOS(0)                         :F(WPERR)
         I = 0
         $FN = NAME '( LA_ALIST ) LA_DCL'
         $FN = '{'
         $FN = IDENT(PROTO, WPREALTYPE)
+           WP4SP 'double ' REPLACE(NAME, &UCASE, &LCASE) '_();'
         $FN = IDENT(PROTO, WPSTRTYPE)
+           WP4SP 'char result[' WPMAXSTR '];' 
         EQ(WPCOPY, 0)                                     :S(FWPNOSTRS)
*
FWPLOOP2 $FN = IDENT(TYPES<I>, WPSTRTYPE)
+           WP4SP 'char arg' I '[' WPMAXSTR '];'            :S(FWPNEXT2)
         $FN = IDENT(TYPES<I>, WPLONGTYPE)
+           WP4SP 'long arg' I ';'                          :S(FWPNEXT2)
         $FN = IDENT(TYPES<I>, WPINTTYPE)
+           WP4SP 'int arg' I ';'                           :S(FWPNEXT2)
         $FN = IDENT(TYPES<I>, WPREALTYPE)
+           WP4SP 'double arg' I ';'                        :S(FWPNEXT2)
FWPNEXT2 I = I + 1
         LT(I, N)                                           :S(FWPLOOP2)
*
         I = 0
FWPCOPY                                         :($('FWPCPY_' TYPES<I>))
FWPCPY_STRING
         $FN = WP4SP
+              'getstring(LA_PTR(' I '), arg' I ', sizeof(arg' I '));'
                                                             :(FWPNCOPY)
FWPCPY_LONG
         $FN = WP4SP 'arg' I ' = (long)LA_INT(' I ');'       :(FWPNCOPY)
FWPCPY_INTEGER
         $FN = WP4SP 'arg' I ' = (int)LA_INT(' I ');'        :(FWPNCOPY)
FWPCPY_REAL
         $FN = WP4SP 'arg' I ' = (double)LA_REAL(' I ');'    :(FWPNCOPY)
FWPCPY_
FWPNCOPY I = I + 1
         LT(I, N)                                            :S(FWPCOPY)
*
FWPNOSTRS
         CALL = REPLACE(NAME, &UCASE, &LCASE) '_('
         I = 0
FWPCALL  GE(I, N)                                           :S(FWPECALL)
         CALL = GT(I, 0) CALL ','               :($('FWPARG_' TYPES<I>))
FWPARG_LONG
FWPARG_INTEGER
FWPARG_REAL
         CALL = CALL '&arg' I                                :(FWPNCALL)
FWPARG_STRING
         CALL = CALL 'arg' I ', strlen(arg' I ')'
FWPNCALL I = I + 1                                            :(FWPCALL)
FWPECALL CALL = CALL ')'                           :($('FWPRET_' PROTO))
*
FWPRET_STRING
         LEN = 1024
FWPRET_STRING2
         CALL '()' = '(result, sizeof result)'             :S(FWPRETST2)
         CALL '(' = '(result, sizeof result,'
FWPRETST2
         CALL = CALL ', result'
         $FN = WP4SP 'RETSTR2((' CALL '), ' LEN ');'          :(FWPDONE)
FWPRET_LONG
FWPRET_INTEGER
         $FN = WP4SP 'RETINT(' CALL ');'                      :(FWPDONE)
FWPRET_REAL
         $FN = WP4SP 'RETREAL(' CALL ');'                     :(FWPDONE)
FWPRET_PREDICATE
         $FN = WP4SP 'if (' CALL ')'
         $FN = WP8SP 'RETNULL;'
         $FN = WP4SP 'RETFAIL;'                               :(FWPDONE)
* SYSTEM CALL (< 0 FOR FAILURE)
FWPRET_SYSPRED
         $FN = WP4SP 'if (' CALL ' >= 0)'
         $FN = WP8SP 'RETNULL;'
         $FN = WP4SP 'RETFAIL;'                               :(FWPDONE)
FWPRET_
         $FN = WP4SP CALL ';'
         $FN = WP4SP 'RETNULL;'
* END OF FUNCTION
FWPDONE  $FN = '}'                                             :(RETURN)
*
FWRAPPER_PROTO_END
@

<<unit_test>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-INCLUDE 'WRAPPER.INC'
         &CODE = 1
         &CODE = 0
END
@

<<>>=
-MODULE WRAPPER
<<INCLUDES>>
-STITL WRAPPER
-EJECT
*
************************************************************************
*                                                                      *
*    #     #  ######      #     ######   ######   #######  ######      *
*    #  #  #  #     #    # #    #     #  #     #  #        #     #     *
*    #  #  #  #     #   #   #   #     #  #     #  #        #     #     *
*    #  #  #  ######   #     #  ######   ######   #####    ######      *
*    #  #  #  #   #    #######  #        #        #        #   #       *
*    #  #  #  #    #   #     #  #        #        #        #    #      *
*     ## ##   #     #  #     #  #        #        #######  #     #     *
*                                                                      *
* WRAPPER   CREATE C CODE TO WRAP A FUNCTION FOR LOAD()'ING            *
*                                                                      *
* PHIL BUDNE, DECEMBER, 2001                                           *
*                                                                      *
************************************************************************
*
* WRAPPER.lss
*
* FMGW
*
*     STRING_FREE, FREE RETURNED STRING AFTER COPYING TO SNOBOL4
*     STRING2, REQUIRES LEN PARAMETER, COPY FIXED LENGTH
*     REMOVE HANDLE TYPE COMPLETELY
*
<<WRAPPER>>
*
* CE: .MSNOBOL4;
@
