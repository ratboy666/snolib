#!/usr/bin/bash
         exec "snobol4" "-r" "-s" "$0" "$@" 
-TITLE ASM
-INCLUDE 'FFI.INC'
-INCLUDE 'ASM.INC'
-INCLUDE 'READFILE.INC'
-INCLUDE 'LOGIC.INC'
-INCLUDE 'P64.INC'
-INCLUDE 'DDT.INC'
*
*        DDT()
*
* FOR DISASSEMBLY, REFERENCE TO SNOBOL4 EXECUTABLE, PREFERABLY NOT
* STRIPPED.
*
* INITIALIZE JIT
         INIT_JIT('/usr/local/bin/snobol4')
*
* READ "SOURCE CODE" (WHICH WE ALSO VIEW AS "OBJECT CODE")
*
         SRC = READFILE('TEST.JIT')
*
* CREATE NEW ASM OBJECT, AND PROCESS THE SOURCE (OBJECT) CODE
*
         CT = TIME()
         ASM = ASM_CREATE()
         ASM(ASM, SRC)                                           :F(END)
         CT = TIME() - CT
*
* NOW WE CAN GET THE PRINT THE LIGHTNING CODE, EMIT OBJECT CODE,
* OR DISASSEMBLE. WE CAN OBTAIN ENTRY POINTS DEFINED WITH THE 'ADDRESS'
* DIRECTIVE.
*
         JIT_SET_STATE(JIT(ASM))
*        JIT_PRINT()
*
         PROC = JIT_EMIT()
*        JIT_PRINT()
*
* WE CAN NOW OBTAIN THE 'ADDRESS' SYMBOLS. THESE CAN BE EXPORTED TO
* OTHER MODULES AS NEEDED.
*
         ENTRY = JIT_ADDRESS(SYMBOLS(ASM)<'ENTRY'>)
         TERMINAL = 'ENTRY = ' IH(ENTRY)
*        JIT_DISASSEMBLE()
         JIT_CLEAR_STATE()
*
* THE ONLY THING WE REALLY NEED ARE THE ENTRY POINT SYMBOLS. THESE
* SHOULD HAVE BEEN EXTRACTED. THEY CAN BE USED TO COMPILE OTHER
* ASM MODULES, AND TO GENERATE FFI() OBJECTS.
*
         T = TIME()
         FFI = FFI_NEW('D', 'V')
         FFI_SET_CALLP(FFI, ENTRY)
         R = FFI_CALL_REAL(FFI)
         OUTPUT = 'JIT TIME ' TIME() - T
         OUTPUT = 'ASM TIME ' CT
         OUTPUT = 'RESULT ' R
*
         FFI_FREE(FFI)
         ASM_DESTROY(ASM)
*
         FINISH_JIT()
*
END
