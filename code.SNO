#!/usr/bin/bash
         exec "snobol4" "-B" "-s" "-S 40000" "$0" "$@"
*
-LINE 639 "code.lss"
-PROGRAM CODE
-TITLE CODE
START_
-LINE 16 "code.lss"
-INCLUDE 'BQ.INC'
-INCLUDE 'CHARS.INC'
-INCLUDE 'HOST.INC'
-INCLUDE 'READLINE.INC'
-INCLUDE 'SEQ.INC'
-INCLUDE 'SLOAD.INC'
-INCLUDE 'VDIFFER.INC'
-STITL
-EJECT
*
************************************************************************
*                                                                      *
*                  #####   #######  ######   #######                   *
*                 #     #  #     #  #     #  #                         *
*                 #        #     #  #     #  #                         *
*                 #        #     #  #     #  #####                     *
*                 #        #     #  #     #  #                         *
*                 #     #  #     #  #     #  #                         *
*                  #####   #######  ######   #######                   *
*                                                                      *
* CODE              ENTER TEST SNOBOL4 STATEMENTS                      *
*                                                                      *
* (C) COPYRIGHT 1985, 1987 - CATSPAW, INCORPORATED                     *
*                                                                      *
* "THIS IS MY GRANDFATHER'S AXE. MY FATHER REPLACED THE HAFT, AND I    *
*  PUT A NEW HEAD ON IT. IT'S MY GRANDFATHER'S AXE."                   *
*                                                                      *
* ALSO PROVIDES A SIMPLISTIC RETAINED PROGRAM ENVIRONMENT (SIMILAR TO  *
* BASIC -- INSPIRED BY MTS)                                            *
*                                                                      *
************************************************************************
*
* code.lss
*
-LINE 26 "code.lss"
-LINE 608 "code.lss"
         TERMINAL = 'CODE (TUE NOV 26 12:25:23 EST 2013)'
         TERMINAL = 'ENTER SNOBOL4 STATEMENTS (TRY ? FOR HELP)'
-LINE 613 "code.lss"
         NMAX_ = 9999
         EDITOR = 'ED'
-LINE 618 "code.lss"
         RLAPPNAME('CODE')
         READ_HISTORY('.CODE')
         STIFLE_HISTORY(50)
-LINE 42 "code.lss"
         QQ_ = '"'
         Q_  = "'"
         WHITE_SPACE_ = CHARS_HT ' '
         OWS_         = SPAN(WHITE_SPACE_) | ''
         SF_PAT_      = FENCE ANY('SsFfEe')
+                       (ANY(WHITE_SPACE_) | RPOS(0))
         CMNT_PAT_    = FENCE ANY('*;|#!-')
         INPAT_       = FENCE '-' ((ANY('Ii') ('NCLUDE' | 'nclude')) |
+                                  (ANY('Cc') ('OPY' | 'opy')))
+                       BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . X
*
         RETNPAT_  = FENCE (SPAN(&DIGITS) . LN_)
+                    ((ANY(WHITE_SPACE_) REM . CODE) | '') RPOS(0)
         SAVEPAT_  = FENCE ANY('Ss') ('AVE' | 'ave')
+                    ((BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . FN_ LEN(1))
+                     | '')
+                    RPOS(0)
         LOADPAT_  = FENCE ANY('Ll') ('OAD' | 'oad')
+                    ((BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . FN_ LEN(1))
+                     | '')
+                    RPOS(0)
         NAMEPAT_  = FENCE ANY('Nn') ('AME' | 'ame')
+                    ((BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . FN2_ LEN(1))
+                     | '')
+                    RPOS(0)
         LISTPAT_  = FENCE ANY('Ll') ('IST' | 'ist')
+                    ((ANY(WHITE_SPACE_)
+                       ((OWS_ SPAN(&DIGITS) . N1_) | '')
+                       ((OWS_ ',' OWS_ SPAN(&DIGITS) . N2_) | '')
+                    ) | '') RPOS(0)
         RUNPAT_   = FENCE ANY('Rr') ('UN' | 'un')
+                    (ANY(WHITE_SPACE_) SPAN(&DIGITS) . LN_ | '')
+                    RPOS(0)
         EDITPAT_  = FENCE ANY('Ee') ('DIT' | 'dit')
+                    (ANY(WHITE_SPACE_) SPAN(&DIGITS) . LN_ | '')
+                    RPOS(0)
         RENUMPAT_ = FENCE ANY('Rr') ('ENUM' | 'enum')
+                    (ANY(WHITE_SPACE_) SPAN(&DIGITS) . LN_ | '')
+                    RPOS(0)
         QUITPAT_  = FENCE ANY('Qq') ('UIT' | 'uit') RPOS(0)
         NEWPAT_   = FENCE ANY('Ss') ('CRATCH' | 'cratch') RPOS(0)
         DDTPAT_   = FENCE ANY('Dd') ('DT' | 'dt') RPOS(0)
         EVALPAT_  = FENCE '=' REM . CODE
         EXECPAT_  = FENCE '!' REM . CODE
         HELPPAT_  = FENCE '?'
-LINE 582 "code.lss"
*
         DEFINE('ERRFUN_()')
         DEFINE('PRSLIN_()')
         DEFINE('CHECKLN_(N)')
         DEFINE('CLEAR_()')                                   :(FN_END_)
*
-LINE 595 "code.lss"
CHECKLN_ GT(N) LE(N, NMAX_)                                   :S(RETURN)
         TERMINAL = 'LINE NUMBER MUST BE 1 TO ' NMAX_         :(FRETURN)
-LINE 103 "code.lss"
CLEAR_   FN_ = 'SCRATCH'
         CODE('L__' NMAX_ + 1 ' :(E)')
         SRC_ = ARRAY(NMAX_)
         SEQ(" CODE(SRC_<N> 'L__' N ' :(L__' N + 1 ')')", .N)  :(RETURN)
*
FN_END_
-LINE 542 "code.lss"
-LINE 602 "code.lss"
         &TRACE = 999999999
         TRACE('ERRTYPE', 'KEYWORD',, 'ERRFUN_')
         CLEAR_()
NEWLIN_  SETEXIT('BRKFUN_')
         &TRACE = 999999999
         &ERRLIMIT = 999999999
         INPT_ = READLINE('CODE:')                             :F(EXIT_)
         INPT_ FENCE '!' REM . CODE                           :F(NEWL2_)
         CODE = HISTORY_EXPAND(CODE)
         INPT_ = '!' CODE                                      :(NEWL3_)
NEWL2_   INPT_ = HISTORY_EXPAND(INPT_)
NEWL3_   INPT_ = TRIM(INPT_)
         ADD_HISTORY(VDIFFER(INPT_))
         FL_ = &FNCLEVEL
         PRSLIN_()                                            :(NEWLIN_)
-LINE 560 "code.lss"
PRSLIN_  N1_ =
         N2_ =
         CODE =
         LN_ =
         FN2_ =
         INPT_ EVALPAT_                                        :S(EVAL_)
         INPT_ EXECPAT_                                        :S(EXEC_)
         INPT_ HELPPAT_                                        :S(HELP_)
         INPT_ LISTPAT_                                        :S(LIST_)
         INPT_ RUNPAT_                                          :S(RUN_)
         INPT_ EDITPAT_                                        :S(EDIT_)
         INPT_ QUITPAT_                                        :S(EXIT_)
         INPT_ NEWPAT_                                        :S(CLEAR_)
         INPT_ RENUMPAT_                                      :S(RENUM_)
         INPT_ SAVEPAT_                                        :S(SAVE_)
         INPT_ LOADPAT_                                        :S(LOAD_)
         INPT_ NAMEPAT_                                        :S(NAME_)
         INPT_ DDTPAT_                                         :S(DDT__)
         INPT_ RETNPAT_                                        :S(RETN_)
-LINE 114 "code.lss"
-LINE 137 "code.lss"
         INPT_ SF_PAT_                                       :S(SF_ERR_)
         CODE = CODE(INPT_ ' :S(S) F(F)')                       :S<CODE>
CPLERR_  TERMINAL = 'COMPILATION ERROR: ' &ERRTEXT
         TERMINAL = 'REENTER STATEMENT OR EDIT ' LN_           :(RETURN)
S        TERMINAL = 'SUCCESS'                                  :(RETURN)
F        TERMINAL = 'FAILURE'                                  :(RETURN)
SF_ERR_  TERMINAL = "CANNOT USE 'S', 'F', OR 'E' AS A LABEL WITH CODE"
+                                                              :(RETURN)
-LINE 195 "code.lss"
RETN_    CHECKLN_(LN_)                                        :F(RETURN)
         SRC_<LN_> = CODE
         CODE CMNT_PAT_                                        :S(CMNT_)
         CODE('L__' +LN_ ' LN_ = ' +LN_ ';' CODE '; :(L__' LN_ + 1 ')')
+                                                   :S(RETURN)F(CPLERR_)
CMNT_    CODE INPAT_                                          :F(CMNT2_)
         SLOAD(X)
CMNT2_   CODE('L__' LN_ ' :(L__' LN_ + 1 ')')                  :(RETURN)
-LINE 224 "code.lss"
EDIT_    DIFFER(LN_)                                          :S(EDIT2_)
         TEMP_ = BQ('mktemp')
         UNIT = IO_FINDUNIT()
         OUTPUT(.F, UNIT,, TEMP_)                            :F(FILERR_)
         SEQ(' F = VDIFFER(SRC_<N>); SRC_<N> ', .N)
         ENDFILE(UNIT)
         DETACH(.F)
         UNIT = IO_FINDUNIT()
         INPUT(.F, UNIT,, TEMP_)                             :F(FILERR_)
         HOST(HOST_SYSCMD, EDITOR ' ' TEMP_)
         FN2_ = FN_
         CLEAR_()
         FN_ = FN2_
         LN_ = 1
EDIT3_   INPT_ = LN_ ' ' F                                    :F(EDIT4_)
         PRSLIN_()
         LN_ = LN_ + 1                                         :(EDIT3_)
EDIT4_   ENDFILE(UNIT)
         DETACH(.F)
         DELETE(TEMP_)                                         :(RETURN)
EDIT2_   CHECKLN_(LN_)                                        :F(RETURN)
         INPT_ = EDITLINE('EDIT: ', LPAD(LN_, 4, '0') ' ' SRC_<LN_>)
+                                                             :(PRSLIN_)
-LINE 272 "code.lss"
DDT__    TERMINAL = 'STARTING DDT'
         TEMPSRC_ = BQ('mktemp')
         TEMPLST_ = BQ('mktemp')
         UNIT = IO_FINDUNIT()
         OUTPUT(.F, UNIT,, TEMPSRC_)                         :F(FILERR_)
         F = "-INCLUDE 'DDT.INC'"
         SEQ(' F = ?(SRC_<N> ? INPAT_) SRC_<N>; SRC_<N> ', .N)
         F = ' DDT()'
         F = 'CODE_RETAINED_PROGRAM'
         SEQ(' F = VDIFFER(SRC_<N>); SRC_<N> ', .N)
         F = 'E'
         F = 'END'
         ENDFILE(UNIT)
         DETACH(.F)
         HOST(HOST_SYSCMD, 'snobol4 -n -b -l ' TEMPLST_ ' ' TEMPSRC_)
         HOST(HOST_SYSCMD, 'LIST=' TEMPLST_ ' snobol4 -B -b ' TEMPSRC_)
         TERMINAL = 'DDT COMPLETED'
         DELETE(TEMPSRC_)
         DELETE(TEMPLST_)                                      :(RETURN)
-LINE 302 "code.lss"
RUN_     LN_ = IDENT(LN_) 1
         CHECKLN_(LN_)                                        :F(RETURN)
         &TRACE = 0                                      :($('L__' LN_))
-LINE 317 "code.lss"
LIST_    N2_ = IDENT(N2_) VDIFFER(N1_)
         SEQ(' TERMINAL = LPAD(N, 4, "0") " " VDIFFER(SRC_<N>); '
+            ' SRC_<N> ', .N, N1_, N2_)                        :(RETURN)
-LINE 330 "code.lss"
SAVE_    TERMINAL = 'SAVING TO ' FN_
         UNIT = IO_FINDUNIT()
         OUTPUT(.F, UNIT,, FN_)                              :F(FILERR_)
         SEQ(' F = LPAD(N, 4, "0") " " VDIFFER(SRC_<N>); '
+            ' SRC_<N> ', .N)
         ENDFILE(UNIT)
         DETACH(.F)                                            :(RETURN)
-LINE 350 "code.lss"
LOAD_    TERMINAL = 'LOADING FROM ' FN_
         UNIT = IO_FINDUNIT()
         INPUT(.F, UNIT,, FN_)                               :F(FILERR_)
LOAD2_   INPT_ = F                                            :F(LOAD3_)
         PRSLIN_()                                             :(LOAD2_)
LOAD3_   ENDFILE(UNIT)
         DETACH(.F)                                            :(RETURN)
FILERR_  TERMINAL = 'CANNOT OPEN FILE'                         :(RETURN)
-LINE 368 "code.lss"
NAME_    TERMINAL = IDENT(FN2_) 'FILE: ' FN_                  :S(RETURN)
         FN_ = FN2_                                            :(RETURN)
-LINE 382 "code.lss"
RENUM_   LN_ = IDENT(LN_) 10
         CHECKLN_(LN_)                                        :F(RETURN)
         SC = 0
         SEQ(' SC = DIFFER(SRC_<N>) SC + 1; SRC_<N> ', .N)
         EQ(SC)                                               :S(RETURN)
         Q = (NMAX_ - LN_) / SC
         TERMINAL =  LE(Q, 1) 'TOO MANY LINES TO RENUMBER'    :S(RETURN)
         INCR = 10
         INCR = GE(Q, 5) LT(Q, 10) 5
         INCR = GT(Q, 1) LT(Q, 5) Q
         TERMINAL = 'RENUMBERING BY ' INCR ' FROM ' LN_
         UNIT = IO_FINDUNIT()
         INPUT(.IN, UNIT, 'U', '/dev/tmpfile')
         OUTPUT(.OUT, UNIT, 'W')
         SEQ(' OUT = LN_ " " VDIFFER(SRC_<N>); '
+            ' LN_ = DIFFER(SRC_<N>) LN_ + INCR; SRC_<N> ', .N)
         FN2_ = FN_
         CLEAR_()
         FN_ = FN2_
         FN_ = VDIFFER(FN2_)
RENUM2_  INPT_ = IN                                          :F(RENUM3_)
         PRSLIN_()                                            :(RENUM2_)
RENUM3_  ENDFILE(UNIT)
         DETACH(.OUT)
         DETACH(.IN)                                           :(RETURN)
-LINE 412 "code.lss"
E        TERMINAL = 'PROGRAM COMPLETE'                         :(RETURN)
-LINE 422 "code.lss"
EVAL_    TERMINAL = EVAL(CODE)                                 :S(S)F(F)
-LINE 432 "code.lss"
EXEC_    HOST(HOST_SYSCMD, CODE)                               :(RETURN)
-LINE 442 "code.lss"
HELP_    TERMINAL = '=EXPRESSION    DISPLAY VALUE OF EXPRESSION'
         TERMINAL = '!COMMAND       SHELL OUT TO COMMAND'
         TERMINAL = '?              THIS HELP'
         TERMINAL = 'STATEMENT      EXECUTE STATEMENT'
         TERMINAL =
         TERMINAL = 'N STATEMENT    ENTER/REPLACE/DELETE PROGRAM LINE'
         TERMINAL = 'RUN [N]        RUN RETAINED PROGRAM'
         TERMINAL = 'DDT            DDT ON RETAINED PROGRAM'
         TERMINAL = 'LIST [[N][,M]] LIST RETAINED PROGRAM'
         TERMINAL = 'EDIT [N]       EDIT RETAINED PROGRAM'
         TERMINAL = "SAVE ['FILE']  SAVE RETAINED PROGRAM"
         TERMINAL = "LOAD ['FILE']  LOAD RETAINED PROGRAM"
         TERMINAL = "NAME ['FILE']  CHANGE OR DISPLAY NAME"
         TERMINAL = 'SCRATCH        CLEAR RETAINED PROGRAM'
         TERMINAL = 'RENUM [N]      RENUMBER RETAINED PROGRAM'
         TERMINAL = 'QUIT           EXIT CODE'
         TERMINAL =
         TERMINAL =
+ '-INCLUDE IS PROCESSED IMMEDIATELY ON ENTRY. CONTINUATION LINES ARE'
         TERMINAL =
+ 'NOT AVAILABLE. LINES ARE IN THE RANGE 1..' NMAX_
         TERMINAL =
         TERMINAL = 'S, F, AND E LABELS AVAILABLE'
         TERMINAL = 'SLOAD(' Q_ 'FILE' Q_ ') AVAILABLE'        :(RETURN)
-LINE 473 "code.lss"
ERRFUN_
         (NE(&ERRTYPE, 34) SETEXIT())
         EQ(&ERRTYPE, 34)                                     :S(RETURN)
         TERMINAL = 'EXECUTION ERROR #' &ERRTYPE ', ' &ERRTEXT
         TERMINAL = 'RETAINED PROGRAM LINE:' DIFFER(LN_)
         TERMINAL = LPAD(VDIFFER(LN_), 4, 0) ' ' SRC_<LN_>     :(RETURN)
-LINE 503 "code.lss"
BRKFUN_  ERRTYPE_ = &ERRTYPE
         ERRTEXT_ = &ERRTEXT
-LINE 521 "code.lss"
         EQ(ERRTYPE_, 0) EQ(&FNCLEVEL, FL_ + 1)               :S(RETURN)
         EQ(ERRTYPE_, 0)                                     :S(NEWLIN_)
         SETEXIT('BRKFUN_')
         &ERRLIMIT = 999999999
         TERMINAL = 'ERROR ' ERRTYPE_ ' (' ERRTEXT_ ')'
+           ' AT LEVEL ' &FNCLEVEL - FL_ - 1
         TERMINAL = 'RETAINED PROGRAM LINE:' DIFFER(LN_)
         TERMINAL = LPAD(VDIFFER(LN_), 4, 0) ' ' SRC_<LN_>
         EQ(&FNCLEVEL, FL_ + 1)                     :S(RETURN)F(NEWLIN_)
-LINE 624 "code.lss"
EXIT_    WRITE_HISTORY('.CODE')
         SETEXIT()
END START_
*
* CE: .MSNOBOL4;
