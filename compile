#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-TITLE COMPILE
-LINE 154 "compile.lss"
START
-LINE 29 "compile.lss"
-INCLUDE 'CRACK.INC'
-INCLUDE 'HOST.INC'
-INCLUDE 'TRIMB.INC'
-INCLUDE 'REPL.INC'
-STITL
-EJECT
*
************************************************************************
*                                                                      *
*       #####   #######  #     #  ######   ###  #        #######       *
*      #     #  #     #  ##   ##  #     #   #   #        #             *
*      #        #     #  # # # #  #     #   #   #        #             *
*      #        #     #  #  #  #  ######    #   #        #####         *
*      #        #     #  #     #  #         #   #        #             *
*      #     #  #     #  #     #  #         #   #        #             *
*       #####   #######  #     #  #        ###  #######  #######       *
*                                                                      *
* COMPILE  'COMPILE' A SNOBOL4 PROGRAM INTO A REAL EXECUTABLE          *
*                                                                      *
************************************************************************
*
* compile.lss
*
-LINE 36 "compile.lss"
         TERMINAL = 'COMPILE (THU DEC  5 12:10:58 EST 2013)'
*
         DEFINE('SQUISH(S)')
         DEFINE('PROCESS()')
         SNOBOL_LOC = '/export/home/fred/Projects/snobol4-1.5'
         QQ = '"'
         Q = "'"
         CC2 = '-EJECT' | '-eject' | '-LIST' | '-list' | '-HIDE' |
+              '-hide' | '-LINE' | '-line' | '-TITLE' | '-title' |
+              '-stitl' | '-STITL'
         CCPAT = FENCE (ANY('*#!|') | CC2 | RPOS(0))
         &TRIM =  1
*
         APP_ISTACK = 4000
         APP_PMSTACK = 8000
         APP_DYNAMIC = 524288
         OPT = 2
         INFILE =
         OUTFILE =
OPTLOOP  S = HOST(HOST_ARGN, OPT = OPT + 1)                    :F(USAGE)
         SW =
         SW = ?(S ? POS(0) '-S') .APP_ISTACK
         SW = ?(S ? POS(0) '-P') .APP_PMSTACK
         SW = ?(S ? POS(0) '-d') .APP_DYNAMIC
         IDENT(SW)                                                :S(FN)
         V = HOST(HOST_ARGN, OPT = OPT + 1)                    :F(USAGE)
         $SW = V                                             :S(OPTLOOP)
FN       S POS(0) '-'                                          :S(USAGE)
         INFILE = IDENT(INFILE) S                            :S(OPTLOOP)
         OUTFILE = IDENT(OUTFILE) S
         (DIFFER(INFILE) DIFFER(OUTFILE))                         :S(GO)
*
USAGE    TERMINAL = 'USAGE: COMPILE OPTIONS INFILE OUTFILE'
         TERMINAL =
         TERMINAL = 'OPTIONS: -S ISTACK (' APP_ISTACK ')'
         TERMINAL = '         -P PSTACK (' APP_PMSTACK ')'
         TERMINAL = '         -d DYNAMIC (' APP_DYNAMIC ')'
         TERMINAL =
         N = HOST(HOST_DESCR_BITS) / 8
         TERMINAL = 'VALUES ARE IN ' N ' BYTE DESCRIPTORS, SO THAT IS '
+                   APP_DYNAMIC * N / 1024 / 1024 'MB OF DYNAMIC SPACE'
+                                                                 :(END)
*
GO       TERMINAL = 'COMPILING ' INFILE ' TO ' OUTFILE
         TERMINAL = '  ISTACK  = ' LPAD(APP_ISTACK, 7)
         TERMINAL = '  PMSTACK = ' LPAD(APP_PMSTACK, 7)
         TERMINAL = '  DYNAMIC = ' LPAD(APP_DYNAMIC, 7)
         TERMINAL = 'PROCESSING SNOBOL4 CODE'
*
         OUNIT = IO_FINDUNIT()
         SUNIT = IO_FINDUNIT()
         OUTPUT(.OBJ, OUNIT,, SNOBOL_LOC '/lib/prog.inc')
         INPUT(.SRC, SUNIT,, INFILE)                             :S(GO2)
         TERMINAL = "CAN'T OPEN " INFILE                          :(END)
GO2      PROCESS()
         ENDFILE(OUNIT)
         ENDFILE(SUNIT)
         DETACH(.OBJ)
         DETACH(.SRC)
*
* WE SHOULD CHECK THE CONFIGURATION (IN CONFIG.H), AND IF OUR CHANGES
* ARE THERE WE CAN SKIP THE CLEAN AND CONFIG. WE SHOULD ALSO CHECK
* IF OUR PATCHED INIT.C FILE IS THERE AND PLACE IT IF NEEDED.
*
         TERMINAL = 'CONFIGURING FOR COMPILATION'
         HOST(HOST_SYSCMD, '(cd ' SNOBOL_LOC '; make clean)'
+                          ' > compile.log 2>&1')
         HOST(HOST_SYSCMD,
+              '(cd ' SNOBOL_LOC ';'
+               './configure --add-define=MEM_IO'
+                          ' --add-define=MEM_IO_TEST'
+                          ' --add-define=APP_ISTACK='  APP_ISTACK
+                          ' --add-define=APP_PMSTACK=' APP_PMSTACK
+                          ' --add-define=APP_DYNAMIC=' APP_DYNAMIC
+              ') >> compile.log 2>&1')
*
         TERMINAL = 'COMPILING'
         HOST(HOST_SYSCMD, '(cd ' SNOBOL_LOC '; make)'
+                          ' >> compile.log 2>&1')
*
         TERMINAL = 'CREATING EXECUTABLE'
         HOST(HOST_SYSCMD, '(cp ' SNOBOL_LOC '/xsnobol4 ' OUTFILE
+                ') >> compile.log 2>&1')
*
         TERMINAL = 'A LOG FILE IS IN compile.log'                :(END)
*
PROCESS  L = SRC                                              :F(RETURN)
*
* IGNORE COMMENTS, EMPTY LINES, MOST CONTROL CARDS
*
         L CCPAT                                             :S(PROCESS)
*
* CONVERT EACH LINE INTO A C STRING - QUOTE " AND \, ADD A NEWLINE
* AND WRAP IN "". ALSO, SQUISH SPACES/TABS THAT ARE NOT QUOTED TO
* SINGLE SPACES, SAVING SPACE FOR THE C COMPILER. I HAVE TESTED GCC
* WITH A STRING CONSTANT OF UP TO 256000 CHARACTERS, BUT WE SHOULD
* TRY TO CONSERVE THIS.
*
         L = REPL(L, '\', '\\')
         L = REPL(L, '"', '\"')
         R = L
         S =
SS       R ARB . L (Q | QQ) $ DELIM ARB . M *DELIM REM . R      :F(DONE)
         S = S SQUISH(L) DELIM M DELIM                             :(SS)
DONE     S = QQ S SQUISH(R) '\n' QQ
         OBJ = S                                              :(PROCESS)
*
SQUISH   S = REPL(S, CHARS_TAB, ' ')
SQUISH2  S '  ' = ' '                                        :S(SQUISH2)
         SQUISH = S                                            :(RETURN)
*
END START
*
* CE: .MSNOBOL4;
