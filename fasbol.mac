; fasbol.mac
;
; STACKS, BREAK TABLES, STRINGS, STORAGE.
;
; CE: .M.ASM;
; CE: 0.T 10.H 24.H 42.H;
;
         NAME          'FASTBOL'
;
; ALL REGISTERS - PRUNE TO ACTUAL WHEN KNOWN
;
         USES          '%R0,%R1,%R2,%R3,%V0,%V1,%V2,%V3,%FP'
         USES          '%F0,%F1,%F2,%F3,%F4,%F5,%F6,%F7'
;
; THE "C" CONCEPT OF A NEWLINE. THIS HELPS US BUILD DEBUG DISPLAY
; STRINGS FOR FPRINTF.
;
         EXPORT        NL
NL       DEFINE        (ORD(CHARS_NL))
;
; BRING IN SOME USEFUL FUNCTIONS FROM THE "C" LIBRARY. THESE CAN
; BE USED FOR DEBUGGING AND MAY BE USEFUL OTHERWISE. WE ARE BUILDING
; RUN-TIME SUPPRORT FOR FASBOL, AND THIS MAY BE IMPORTANT. NOTE THAT
; WE EXPORT THESE SYMBOLS, AND MAY PROMOTE TO THE "GLOBALS" TABLE
; IN RUN (IF WE END UP RELYING ON ANY OF THESE).
;
         EXPORT        MALLOC
MALLOC   EXTERN        'malloc'
         EXPORT        REALLOC
REALLOC  EXTERN        'realloc'
         EXPORT        FREE
FREE     EXTERN        'free'
         EXPORT        PRINTF
PRINTF   EXTERN        'printf'
         EXPORT        FPRINTF
FPRINTF  EXTERN        'fprintf'
         EXPORT        STDOUT
STDOUT   EXTERN        'stdout'
         EXPORT        STDERR
STDERR   EXTERN        'stderr'
         EXPORT        EXIT
EXIT     EXTERN        'exit'
;
; PLAY WITH SOME DATA
;
STRING   DD            1                 ; ONE DESCRIPTOR NEEDED
         DD            TYPE_STRING
         DD            4                 ; LEN 4
         DS            'ABCD'            ; DATA
;
INTEGER  DD            1
         DD            TYPE_INTEGER
         DQ            5
;
REAL     DD            1
         DD            TYPE_REAL
         DQ            1.5
;
BRKT     DD            3
         DD            TYPE_BREAK
         DQ            0
         DQ            0
         DQ            0
         DQ            0
;
PFMT     DS            'F = %016lX %ld'
         DB            NL
         DB            0
;
         EXPORT        .MAIN.
.MAIN.   ADDRESS
         PROLOG
         PREPARE
           FINISHI     INIT_STORAGE
;
; ALLOCATE 17 DESCRIPTORS. RETURNS INDEX INTO STORAGE
;
         PREPARE
           PUSHARGI    17
           FINISHI     ALLOCATE
           RETVAL      %V0
;
; CONVERT TO ADDRESS. STORAGE + 16 * INDEX.
;
         LDI_L         %V1, STORAGE
         LSHI          %V0, %V0, 4
         ADDR          %V1, %V1, %V0
;
; ADDRESS OF DESCRIPTOR IN V1. DISPLAY IT
;
         PREPARE
           PUSHARGI    PFMT
           ELLIPSIS
           PUSHARGR    %V1
           PUSHARGR    %V1
           FINISHI     PRINTF
;
; V1 NOW POINTS TO NEW DESCRIPTOR. ADJUST FLAGS. NOTE THAT SETTING
; GCT TO T_FREE WILL FREE STORAGE ON NEXT GC. ALSO, IF THE STORAGE
; IS NOT MARKED ROOT, AND IT IS NOT REFERENCED, IT WILL BE RELEASED ON
; GC. POSSIBLY THE ROOT BIT SHOULD BE SET BY ALLOCATE? WE WILL SEE
; DURING THE CONSTRUCTION OF THE CODE GENERATOR.
;
         LDR_UI        %R1, %V1
         ORI           %R1, %R1, GC_ROOT    ; SET ROOT
         ANDI          %R1, %R1, 0X3FFFFFFF ; CLEAR GCT
; --- BUG WHEN OR IMMEDIATE WITH 0, SO DON'T (WE DON'T HAVE TO)
;;;      ORI           %R1, GCT_T_BYTES     ; GCT = T_BYTE
         STR_I         %V1, %R1
;
; LOOKING AT END_STORE GIVES US THE END DESCRIPTOR WHICH CONTAINS
; ALL FREE STORAGE AFTER GC. SIZE(END_STORE) - 2 IS THE NUMBER OF
; DESCRIPTORS THAT CAN HOLD DATA (MAXIMUM). THIS * 16 IS AVAILABLE
; BYTES.
;
         PREPARE
           FINISHI     GC
         PREPARE
           FINISHI     PRSTORAGE
         MOVI          %R0, 1
         PUSH          SS, %R0
         MOVI          %R0, 2
         PUSH          SS, %R0
;
; PRSTACK, PRSTRING, ETC. ARE FOR DEBUGGING. AS A RESULT, THEY DO NOT
; QUALIFY FOR PROMOTION TO SUPPORTED "UUO" OR "INSTRUCTION".
;
         PREPARE
           PUSHARGI    SS
           FINISHI     PRSTACK
;
         POP           SS, %R0
;
         PREPARE
           PUSHARGI    SS
           FINISHI     PRSTACK
;
         PREPARE
           PUSHARGI    STRING
           FINISHI     PRSTRING
;
         RETI          0
         EPILOG
         END
