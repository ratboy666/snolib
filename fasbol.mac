; fasbol.mac
;
; RUNTIME FOR FASBOL
;
; WE NEED PUSH AND POP FOR MULTIPLE STACKS
;
         NAME        'FASBOL'
;
         USES        '%R0,%R1,%R2,%R3,%V0,%V1,%V2,%V3,%FP'
         USES        '%F0,%F1,%F2,%F3,%F4,%F5,%F6,%F7'
;
PRINTF   EXTERN      'printf'
MALLOC   EXTERN      'malloc'
REALLOC  EXTERN      'realloc'
;
SS       RESQ                     ; SYSTEM STACK
ES       RESQ                     ; EXPRESSION STACK
PS       RESQ                     ; PATTERN STACK (DURING PATTERN MATCHES)
DT       RESQ                     ; DATA BLOCK POINTER
CR       RESQ                     ; CURSOR POSITION (DURING PATTERN MATCHES)
RC       RESQ                     ; REMAINING CHARACTERS (DURIN PATTERN MATCHES)
AS       RESQ                     ; ASSIGNMENT STACK (DURING PATTERN MATCHES)
CS       RESQ                     ; CONDITIONAL STACK (DURING PATTERN MATCHES)
;
P$SSSZ   DEFINE      32           ; INITIAL SS SIZE (30 ELEMENTS)
P$SSXT   DEFINE      8            ; SS EXTENSION SIZE
P$ESSZ   DEFINE      32           ; INITIAL ES SIZE (30 ELEMENTS)
P$ESXT   DEFINE      8            ; ES EXTENSION SIZE
P$PSSSZ  DEFINE      16           ; INITIAL PS SIZE (14 ELEMENTS)
P$PSXT   DEFINE      4            ; PS EXTENSION SIZE
P$ASSZ   DEFINE      8            ; INITIAL AS SIZE (6 ELEMENTS)
P$ASXT   DEFINE      4            ; AS EXTENSION SIZE
P$CSSZ   DEFINE      9            ; INITIAL CS SIZE (3 COND. VAL.)
P$CSXT   DEFINE      4            ; CS EXTENSION SIZE
;
; BUT, EACH LINE OF CODE WON'T BE A PROCEDURE. IT WILL ALL BE IN
; ONE FLAT PROLOG/EPILOG BLOCK. INTERNAL REFERENCES WILL BE VIA
; MOVI R,LABEL. EXTERNAL REFERENCES VIA DATA BLOCKS CONSTRUCTED
; WITH DA. THE ENTRIES TABLE HAS ALL THE ADDRESS OBJECTS IN IT,
; MAYBE WE NEED A DSS/BSS - MAYBE ADDRESS RENAMED CODE (CODE__)
; THEN, BSS/DSS NAMES TRANSFERRED TO ENTRIES.
;
; GLOBAL DECLARATION. PUBLISHES FINAL ADDRESS INTO GLOBALS. EXPORT?
; ADDRESS MATCHES DA.
; ANY SYMBOL CAN BE EXPORT. IF DSS OR BSS, CAPTURE AT ALLOCATION
; TIME. IF ADDRESS, CAPTURE AT ENTRIES CREATION TIME. CANNOT DO LABEL
; IN GENERAL, THOUGH. ONLY BSS, DSS OR ADDRESS.
;
; WE ARE MISSING SYMBOL1 PLUS OR MINUS AN ADDRESS. THIS COULD BE
; ACCOMODATED WITH EQU - BUT BOTH EQU AND SYMBOL1 LABELS ARE
; DEFINED ON PHASE1. WE NEED AN EXPRESSION LIKE (EXPRESSION)
; THAT FUNCTIONS ON PHASE2, AND YIELDS SYMBOL1 WITH OFFSET
; EXPRESSION. *NAME+-... OR SOMETHING. $ CANNOT BE USED, BECAUSE
; PDP-10 ASSMEMBLER USES THAT AS A VALID IDENTIFIER CHARACTER.
; WE COULD USE NAME+... AND NAME-... FOLLOWED BY AN INTEGER.
; THIS FOLLOWS THE PDP-10 USAGE CLOSELY. ALSO, THIS ALLOWS
; MALLOC+8, ETC. THIS ONLY AFFECTS PARAMETER SCANNING, AND
; ONLY PARAMETERS FROM SYMBOL1 TABLE, SO ITS ISOLATED.
; FOR MAXIMUM PORTABILITY, ALLOW NAME+NAME, NAME+NUMBER,
; NAME-NAME AND NAME-NUMBER, ALLOWING SIZEOF ELEMENTS IN SYMBOL1
; PRESEED BYTE, WORD, DWORD, QWORD, FLOAT AND DOUBLE INTO
; SYMBOL1 (1, 2, 4, 8). WHAT ABOUT CHAINED CALCS? BETTER TO
; JUST EVAL THE MESS, THEN.
;
         EXPORT      .INIT.
         EXPORT      D
.INIT.   ADDRESS
         PROLOG
         PREPARE
         PUSHARGR    %R0
         FINISHI     MALLOC
         RETVAL      %V0
         EPILOG         
;
         RESQ
D        RESQ ; ALLOW D+ OR - QWORD TO BE VALID ADDRESS
         RESQ ; THIS FOLLOWS FASBOL FAIL CONVENTIONS
;
D2       DQ          5
F2       DD          1.5
DBL2     DQ          2.1
         DA          .MAIN.
;
NL       DEFINE      (ORD(CHARS_NL))
STR      DS          'hello, world %d %g %g %d'
         DB          NL
         DB          0
;
.MAIN.   ADDRESS
         PROLOG
         PREPARE
         PUSHARGI    STR
         ELLIPSIS
         LDI         %R0, D2
         PUSHARGR    %R0
         LDI_F       %F0, F2
         EXTR_F_D    %F0, %F0
         PUSHARGR_D  %F0
         LDI_D       %F0, DBL2
         PUSHARGR_D  %F0
         PUSHARGR    %R0
         FINISHI     PRINTF
         RETVAL      %V0
;
         LDI         %R0, D2
         STI         D, %R0
         STI         D-QWORD, %R0
         STI         D+QWORD, %R0
;
         LDI_D       %F0, DBL2
         LDI_F       %F1, F2
         EXTR_F_D    %F1, %F1
         ADDR_D      %F0, %F0, %F1
         RETR_D      %F0
;
         EPILOG
         END
