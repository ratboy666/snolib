#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-TITLE IFS
-LINE 349 "ifs.lss"
START
-LINE 61 "ifs.lss"
-STITL CHARS
-EJECT
*
-LINE 87 "CHARS.lss"
************************************************************************
*                                                                      *
*              #####   #     #     #     ######    #####               *
*             #     #  #     #    # #    #     #  #     #              *
*             #        #     #   #   #   #     #  #                    *
*             #        #######  #     #  ######    #####               *
*             #        #     #  #######  #   #          #              *
*             #     #  #     #  #     #  #    #   #     #              *
*              #####   #     #  #     #  #     #   #####               *
*                                                                      *
* CHARS             SYMBOLIC NAMES FOR CHARACTERS                      *
*                                                                      *
* PHIL BUDNE <PHIL@ULTIMATE.COM>                                       *
* DECEMBER 2001                                                        *
*                                                                      *
************************************************************************
*
* CHARS.lss
*
-LINE 10 "CHARS.lss"
CHARS    CHARS_NUL = CHAR( 0)
         CHARS_SOH = CHAR( 1)
         CHARS_STX = CHAR( 2)
         CHARS_ETX = CHAR( 3)
         CHARS_EOT = CHAR( 4)
         CHARS_ENQ = CHAR( 5)
         CHARS_ACK = CHAR( 6)
         CHARS_BEL = CHAR( 7)
         CHARS_BS  = CHAR( 8)
         CHARS_HT  = CHAR( 9)
         CHARS_NL  = CHAR(10)
         CHARS_VT  = CHAR(11)
         CHARS_NP  = CHAR(12)
         CHARS_CR  = CHAR(13)
         CHARS_SO  = CHAR(14)
         CHARS_SI  = CHAR(15)
         CHARS_DLE = CHAR(16)
         CHARS_DC1 = CHAR(17)
         CHARS_DC2 = CHAR(18)
         CHARS_DC3 = CHAR(19)
         CHARS_DC4 = CHAR(20)
         CHARS_NAK = CHAR(21)
         CHARS_SYN = CHAR(22)
         CHARS_ETB = CHAR(23)
         CHARS_CAN = CHAR(24)
         CHARS_EM  = CHAR(25)
         CHARS_SUB = CHAR(26)
         CHARS_ESC = CHAR(27)
         CHARS_FS  = CHAR(28)
         CHARS_GS  = CHAR(29)
         CHARS_RS  = CHAR(30)
         CHARS_US  = CHAR(31)
         CHARS_SP  = CHAR(32)
         CHARS_DEL = CHAR(127)
-LINE 55 "CHARS.lss"
*
         CHARS_TAB   = CHARS_HT
         CHARS_SPACE = CHARS_SP
         CHARS_FF    = CHARS_NP
         CHARS_LF    = CHARS_NL
-LINE 65 "CHARS.lss"
*
         &ALPHABET LEN(32) .  CHARS_CONTROL
+                  LEN(95) .  CHARS_PRINTABLE
+                  LEN(129) . CHARS_HIGH
*
         CODE('CHARS')
*
*
* CE: .MSNOBOL4;
-STITL HOST
-EJECT
*
-LINE 130 "HOST.lss"
************************************************************************
*                                                                      *
*                 #     #  #######   #####   #######                   *
*                 #     #  #     #  #     #     #                      *
*                 #     #  #     #  #           #                      *
*                 #######  #     #   #####      #                      *
*                 #     #  #     #        #     #                      *
*                 #     #  #     #  #     #     #                      *
*                 #     #  #######   #####      #                      *
*                                                                      *
* HOST               HOST() FUNCTION CODES                             *
*                                                                      *
************************************************************************
*
* HOST.lss
*
-LINE 6 "HOST.lss"
HOST
-LINE 10 "HOST.lss"
*
* MACRO SPITBOL
*
* ARCH:OS:SNOBOL_VERSION
         HOST_SYSINFO = ''
* ARGUMENT FROM -u OR ENTIRE COMMAND LINE
         HOST_PARAMS = 0
*
* CATSPAW SPITBOL
*
* EXEC ARG AS SHELL COMMAND, RETURN STATUS
         HOST_SYSCMD = 1
* N'TH TOKEN ON COMMAND LINE (INTEGER)
         HOST_ARGN = 2
* INDEX OF 1ST USER COMMAND LINE ARG TOKEN
         HOST_FIRSTARG = 3
* RETURNS ENVIRONMENT VARIABLE, OR FAILS
         HOST_GETENV = 4
*
* DEFAULT SNOLIB DIR (-INCLUDE, LOAD())
         HOST_SNOLIB_DIR = 2200
*
* C COMPILER USED TO BUILD CSNOBOL4
         HOST_CC = 2202
* C OPTIMIZER FLAGS USED TO BUILD CSNOBOL4
         HOST_COPT = 2203
*
* DYNAMIC LOADABLE LIBRARY EXTENSION
         HOST_DL_EXT = 2208
* C COMPILER FLAGS FOR DYNAMIC LOADABLES
         HOST_DL_CFLAGS = 2209
* DYNAMIC LOADABLE FILE LOAD COMMAND
         HOST_DL_LD = 2210
* DYNAMIC LOADABLE FILE LOAD SWITCHES
         HOST_DL_LDFLAGS = 2211
*
* DIRECTORY SEPARATOR CHAR (MAY BE EMPTY)
         HOST_DIR_SEP = 2212
* PATH SEPARATOR CHARACTER
         HOST_PATH_SEP = 2213
*
* CSNOBOL4 1.5
*
* DEFAULT LIBRARY SEARCH PATH
         HOST_DEF_SNOPATH = 2214
* PATH FOR C HEADERS
         HOST_INCLUDE_DIR = 2215
*
* NUMBER OF BITS FOR SNOBOL4 INTEGER TYPE
         HOST_INTEGER_BITS = 2300
* NUMBER OF BITS FOR SNOBOL4 REAL TYPE
         HOST_REAL_BITS = 2301
* NUMBER OF BITS FOR C POINTER TYPE
         HOST_POINTER_BITS = 2302
* NUMBER OF BITS FOR C LONG TYPE
         HOST_LONG_BITS = 2303
* NUMBER OF BITS FOR SIL 'DESCRIPTOR' TYPE
         HOST_DESCR_BITS = 2304
* NUMBER OF BITS FOR SIL 'SPECIFIER' TYPE
         HOST_SPEC_BITS = 2305
* NUMBER OF BITS FOR C CHAR TYPE
         HOST_CHAR_BITS = 2306
*
* SIZE OF 'DYNAMIC' STORAGE IN DESCRIPTORS
         HOST_DYNAMIC_SIZE = 2400
* SIZE OF PATTERN MATCH STACK IN DESCRS
         HOST_PMSTACK_SIZE = 2401
* SIZE OF INTERPRETER STACK IN DESCRIPTORS
         HOST_ISTACK_SIZE = 2402
*
    CODE('HOST')
*
HOST_END
*
* CE: .MSNOBOL4;
-LINE 16 "CRACK.lss"
-STITL COUNT
-EJECT
*
-LINE 31 "COUNT.lss"
************************************************************************
*                                                                      *
*               #####   #######  #     #  #     #  #######             *
*              #     #  #     #  #     #  ##    #     #                *
*              #        #     #  #     #  # #   #     #                *
*              #        #     #  #     #  #  #  #     #                *
*              #        #     #  #     #  #   # #     #                *
*              #     #  #     #  #     #  #    ##     #                *
*               #####   #######   #####   #     #     #                *
*                                                                      *
* COUNT              COUNT STRING OCCURRENCES                          *
*                                                                      *
* COUNT(S1,S2) COUNTS THE NUMBER OF OCCURRENCES OF STRING S2 IN STRING *
* S1.                                                                  *
*                                                                      *
************************************************************************
*
* COUNT.lss
*
-LINE 6 "COUNT.lss"
         DEFINE('COUNT(S1,S2)FIRST,REST,P')                 :(COUNT_END)
*
COUNT    COUNT = 0
         S2 LEN(1) . FIRST REM . REST                         :F(RETURN)
         P = POS(0) BREAKX(FIRST) S2
COUNT_1  S1 P = REST                                          :F(RETURN)
         COUNT = COUNT + 1                                    :(COUNT_1)
*
COUNT_END
*
* CE: .MSNOBOL4;
-STITL CRACK
-EJECT
-LINE 61 "CRACK.lss"
*
************************************************************************
*                                                                      *
*               #####   ######      #      #####   #    #              *
*              #     #  #     #    # #    #     #  #   #               *
*              #        #     #   #   #   #        #  #                *
*              #        ######   #     #  #        ###                 *
*              #        #   #    #######  #        #  #                *
*              #     #  #    #   #     #  #     #  #   #               *
*               #####   #     #  #     #   #####   #    #              *
*                                                                      *
* CRACK                    STRING TO ARRAY                             *
*                                                                      *
************************************************************************
*
* CRACK.lss
*
-LINE 20 "CRACK.lss"
         DEFINE('CRACK_1(S)P')
         DEFINE('CRACK(S,B,F)I,PAT,N')
         DEFINE('CRACK_4(S)')
         OPSYN('%', 'CRACK_1', 1)                           :(CRACK_END)
*
CRACK_1  P = IDENT(P) ','
         CRACK_1 = CRACK(S, P)                                 :(RETURN)
*
CRACK    F = IDENT(F) 'CRACK_4'
         IDENT(B, NULL)                                      :S(CRACK_3)
         S RTAB(1) B ABORT | REM . S = S B
         N = COUNT(S, B)
         EQ(N, 0)                                             :S(RETURN)
         CRACK = ARRAY(N)
         PAT = BREAK(B) . *CRACK<I> LEN(1)
CRACK_2  I = I + 1
         S PAT =                                              :F(RETURN)
         CRACK<I> = APPLY(F, CRACK<I>)             :S(CRACK_2)F(FRETURN)
CRACK_3  N = SIZE(S)
         EQ(N, 0)                                             :S(RETURN)
         CRACK = ARRAY(N)
         PAT = LEN(1) . *CRACK<I>                             :(CRACK_2)
*
CRACK_4  CRACK_4 = S                                           :(RETURN)
*
CRACK_END
*
* CE: .MSNOBOL4;
-LINE 20 "FASTBAL.lss"
-LINE 24 "UNIQUE.lss"
-STITL REPL
-EJECT
*
-LINE 38 "REPL.lss"
************************************************************************
*                                                                      *
*                   ######   #######  ######   #                       *
*                   #     #  #        #     #  #                       *
*                   #     #  #        #     #  #                       *
*                   ######   #####    ######   #                       *
*                   #   #    #        #        #                       *
*                   #    #   #        #        #                       *
*                   #     #  #######  #        #######                 *
*                                                                      *
* REPL                   REPLACE STRINGS                               *
*                                                                      *
************************************************************************
*
* REPL.lss
*
-LINE 11 "REPL.lss"
         DEFINE('REPL(S1,S2,S3)C,T,FINDC')                   :(REPL_END)
*
REPL     S2 LEN(1) . C =                                     :F(FRETURN)
         FINDC = BREAK(C) . T LEN(1)
         S2 = POS(0) S2
REPL_1   S1 FINDC =                                           :F(REPL_2)
         S1 S2 =                                              :F(REPL_3)
         REPL = REPL T S3                                      :(REPL_1)
REPL_3   REPL = REPL T C                                       :(REPL_1)
REPL_2   REPL = REPL S1                                        :(RETURN)
*
REPL_END
*
* CE: .MSNOBOL4;
-STITL UNIQUE
-EJECT
-LINE 70 "UNIQUE.lss"
*
************************************************************************
*                                                                      *
*           #     #  #     #  ###   #####   #     #  #######           *
*           #     #  ##    #   #   #     #  #     #  #                 *
*           #     #  # #   #   #   #     #  #     #  #                 *
*           #     #  #  #  #   #   #     #  #     #  #####             *
*           #     #  #   # #   #   #   # #  #     #  #                 *
*           #     #  #    ##   #   #    #   #     #  #                 *
*            #####   #     #  ###   #### #   #####   #######           *
*                                                                      *
* UNIQUE                 GENERATE UNIQUE NAME                          *
*                                                                      *
************************************************************************
*
* UNIQUE.lss
*
-LINE 28 "UNIQUE.lss"
         DEFINE('MAKE_UNIQUE(SUF)S')
         MAKE_UNIQUE()                                     :(UNIQUE_END)
*
MAKE_UNIQUE
         S =
+ 'UNIQUESUF  UNIQUESUF_ = IDENT(I) UNIQUESUF_ + 1 :F(UNIQUECSUF);'
+ '           UNIQUESUF = "USUF" UNIQUESUF_ "_"         :(RETURN);'
+ 'UNIQUECSUF $("USUF" UNIQUESUF_ "_") = '
+ '           ?(UNIQUESUF_ = GT(UNIQUESUF_,0) UNIQUESUF_ - 1)'
+ '                                       :S(UNIQUECSUF)F(RETURN);'
         CODE(REPL(S, 'SUF', SUF))
         DEFINE('UNIQUE' SUF '(I)')                            :(RETURN)
*
UNIQUE_END
*
* CE: .MSNOBOL4;
-STITL FASTBAL
-EJECT
-LINE 97 "FASTBAL.lss"
*
************************************************************************
*                                                                      *
*    #######     #      #####   #######  ######      #     #           *
*    #          # #    #     #     #     #     #    # #    #           *
*    #         #   #   #           #     #     #   #   #   #           *
*    #####    #     #   #####      #     ######   #     #  #           *
*    #        #######        #     #     #     #  #######  #           *
*    #        #     #  #     #     #     #     #  #     #  #           *
*    #        #     #   #####      #     ######   #     #  #######     *
*                                                                      *
* FASTBAL                                                              *
*                                                                      *
************************************************************************
*
* FASTBAL.lss
*
-LINE 24 "FASTBAL.lss"
         DEFINE('FASTBAL(PARENS,QTS,S)NAME,IBAL,SPCHARS,ELEM'
+               ',LPS,Q,LP,RP')                           :(FASTBAL_END)
*
FASTBAL  NAME = UNIQUE()
         IBAL = CONVERT(NAME, 'EXPRESSION')
         IBAL = DIFFER(S, NULL) FASTBAL(PARENS, QTS)
         SPCHARS = PARENS QTS S
-LINE 38 "FASTBAL.lss"
         ELEM = NOTANY(PARENS QTS) BREAK(SPCHARS)
-LINE 46 "FASTBAL.lss"
FASTBAL_1
         QTS LEN(1) . Q  =                                 :F(FASTBAL_2)
         ELEM = Q BREAK(Q) Q | ELEM                         :(FASTBAL_1)
-LINE 57 "FASTBAL.lss"
FASTBAL_2
         PARENS LEN(1) . LP RTAB(1) . PARENS LEN(1) . RP   :F(FASTBAL_3)
         ELEM = LP IBAL RP | ELEM                           :(FASTBAL_2)
-LINE 77 "FASTBAL.lss"
FASTBAL_3
         FASTBAL = BREAK(SPCHARS) ARBNO(ELEM)
         $NAME = FASTBAL                                       :(RETURN)
*
FASTBAL_END
*
* CE: .MSNOBOL4;
-STITL SYSTEM
-EJECT
*
-LINE 92 "SYSTEM.lss"
************************************************************************
*                                                                      *
*          #####   #     #   #####   #######  #######  #     #         *
*         #     #   #   #   #     #     #     #        ##   ##         *
*         #          # #    #           #     #        # # # #         *
*          #####      #      #####      #     #####    #  #  #         *
*               #     #           #     #     #        #     #         *
*         #     #     #     #     #     #     #        #     #         *
*          #####      #      #####      #     #######  #     #         *
*                                                                      *
* SYSTEM            DETERMINE KIND OF SNOBOL4                          *
*                                                                      *
************************************************************************
*
* SYSTEM.lss
*
-LINE 29 "SYSTEM.lss"
         DEFINE('SYSTEM()K')
         DEFINE('ISSPITBOL()')
         DEFINE('ISSNOBOL4()')
         DEFINE('ISASCII()')
         DEFINE('ISEBCDIC()')
         DEFINE('ISCDC_DISPLAY_CODE()')                    :(SYSTEM_END)
*
ISASCII  &ALPHABET '()'                             :S(RETURN)F(FRETURN)
*
* LLT('A',1)
ISEBCDIC &ALPHABET '(+'                             :S(RETURN)F(FRETURN)
*
ISCDC_DISPLAY_CODE
         &ALPHABET ')*'                             :S(RETURN)F(FRETURN)
*
ISSPITBOL
         DIFFER(.NAME, 'NAME')                      :S(RETURN)F(FRETURN)
*
ISSNOBOL4
         IDENT(.NAME, 'NAME')                       :S(RETURN)F(FRETURN)
*
SYSTEM   IDENT(DATATYPE(.X), 'STRING')                      :F(SYSTEM_2)
         K = SIZE(&ALPHABET)
         SYSTEM = EQ(K,512) 'HONEYWELL MAINBOL'               :S(RETURN)
         SYSTEM = EQ(K,256) 'IBM MAINBOL'                   :S(SYSTEM_0)
         SYSTEM = EQ(K,128) 'PDP-10 MAINBOL'                  :S(RETURN)
         SYSTEM =           'CDC MAINBOL'
         ISASCII()                                          :S(SYSTEM_1)
         SYSTEM =           'UNIVAC MAINBOL'                   :(RETURN)
*
* DISTINGUISH IBM MAINBOL AND CSNOBOL, ASSUME ASCII FOR CSNOBOL4.
* NOTE THAT AFTER 1.5, CSNOBOL4 WILL LIKELY SUPPORT BLOCKS AS WELL.
*
SYSTEM_0 ISASCII()                                          :F(SYSTEM_1)
         SYSTEM = 'CSNOBOL4'
*
SYSTEM_1 OPSYN('OLD_SHARP', '#', 2)
         OPSYN('#', '+', 2)
         T = 1 5 # 5
         OPSYN('#', 'OLD_SHARP', 2)
         EQ(T, 110)                                           :S(RETURN)
         SYSTEM = SYSTEM ' WITH BLOCKS'                        :(RETURN)
*
SYSTEM_2 SYSTEM = DIFFER(SUBSTR('ABC', 2, 1), 'B') 'FASBOL'   :S(RETURN)
         SYSTEM = EQ(SIZE(&ALPHABET), 128)         'SITBOL'   :S(RETURN)
         SYSTEM =                                  'SPITBOL'   :(RETURN)
*
SYSTEM_END
*
* CE: .MSNOBOL4;
-STITL
-EJECT
*
************************************************************************
*                                                                      *
*                         ###  #######   #####                         *
*                          #   #        #     #                        *
*                          #   #        #                              *
*                          #   #####     #####                         *
*                          #   #              #                        *
*                          #   #        #     #                        *
*                         ###  #         #####                         *
*                                                                      *
* IFS              PREPROCESS FOR %IF CONDITIONALS                     *
*                                                                      *
* CONVERTED FROM IF.SPT                                                *
*                                                                      *
************************************************************************
*
* ifs.lss
*
-LINE 69 "ifs.lss"
-PLUSOPS 1
*
         TERMINAL = 'IFS (WED NOV  6 13:40:26 EST 2013)'
*
* SYSTEM() FAILS IF ANCHORED
*
         SYSTEM = SYSTEM()
*
         &ANCHOR = 1
         &CODE = 1
*
* USEFUL CONSTANTS
*
         LC = '%'
         LC = HOST(HOST_GETENV, 'IFSLC')
         WHITE = SPAN(' ' CHARS_HT)
         OPT_WS = WHITE | NULL
         NAME = ANY(&LCASE &UCASE)
+               (SPAN(&LCASE &UCASE &DIGITS '_.') | NULL)
*
* SYMTBL TRACKS DEFINED CONDITIONAL SYMBOLS. (UNDEFINED SYMBOLS ARE
* ASSIGNED NULL VALUES IN SYMTBL.)
*
         SYMTBL = TABLE(101)
*
* STATESTK MAINTAINS ALL STATE INFORMATION WHILE PROCESSING CONDITIONAL
* STATEMENTS. NESTLEVEL INDEXES THE TOP ENTRY. ANOTHER VARIABLE, TOP,
* HAS A COPY OF SAVESTK<NESTLEVEL>.
*
         STATESTK = TABLE()
         INCNAME = TABLE()
         INCSTACK = TABLE()
         INCLNNO = TABLE()
         NESTLEVEL = 0
         TOP =
*
* EACH STATE ENTRY IN STATESTK CONTAINS STATE INFORMATION ABOUT THE
* PROCESSING FOR EACH ACTIVE %IF. THE STATE IS MAINTAINED AS 2 FIELDS:
*
*     RESULT  THE RESULT OF THE %IF EXPRESSION EVALUATION-
*             TRUE, FALSE, OR BYPASS
*
*     MODE    WHETHER PROCESSING THEN OR ELSE PORTION OF %IF
*
         DATA('STATE(RESULT,MODE)')
         FALSE = 0
         TRUE = 1
         BYPASS = 2
         ELSE = 0
         THEN = 1
*
* PROCESSREC IS INDEXED BY THE CURRENT RESULT AND MODE TO DETERMINE
* WHETHER OR NOT A STATEMENT SHOULD BE PROCESSED AND WRITTEN TO THE
* OUTPUT FILE. DEFAULT VALUE IS 0 -- IGNORE STATEMENT.
*
        PROCESSREC = ARRAY(FALSE ':' BYPASS ',' ELSE ':' THEN, 0)
        PROCESSREC<TRUE, THEN> = 1
        PROCESSREC<FALSE, ELSE> = 1
*
*  FUNCTIONS
*
*
*  OUTPUT = PROCESS(INPUT)
*
*  PROCESS LINE IN THE CONTEXT OF CURRENT CONDITIONALS.
*  FAILS IF LINE IS TO BE IGNORED. OTHERWISE IT RETURNS THE INPUT.
*
        DEFINE('PROCESS(PROCESS)CONDCMD,CONDEXP')
*
*  P_CONDASM BREAKS UP CONDITIONAL ASSEMBLY DIRECTIVES.
*
         P_CONDASM = OPT_WS LC (
+           (('IF' | 'if') . CONDCMD OPT_WS BAL . CONDEXP
+                            OPT_WS RPOS(0)) |
+           (('ENDIF' | 'endif') . CONDCMD) |
+           (('ELSE' | 'else') . CONDCMD) )               :(PROCESS_END)
*
PROCESS PROCESS ? P_CONDASM                                 :S($CONDCMD)
*
*  PROCESS STATEMENTS OTHER THAN CONDITIONAL DIRECTIVES.
*
         EQ(NESTLEVEL, 0)                                     :S(RETURN)
         EQ(PROCESSREC<RESULT(TOP), MODE(TOP)>, 0)  :S(FRETURN)F(RETURN)
*
*  PROCESS %IF (EXPRESSION)
*
IF       EQ(NESTLEVEL)                                          :S(IFOK)
*
* HERE FOR NESTED %IF
*
         NE(PROCESSREC<RESULT(TOP), MODE(TOP)>)                 :S(IFOK)
         NESTLEVEL = NESTLEVEL + 1
         TOP = STATESTK<NESTLEVEL> = STATE(BYPASS, THEN)      :(FRETURN)
*
* HERE FOR %IF TO BE PROCESSED NORMALLY.
*
IFOK     NESTLEVEL = NESTLEVEL + 1
         TOP = STATESTK<NESTLEVEL> = STATE(
+           (EQ(EVALUATE(CONDEXP), 1) TRUE, FALSE),
+           THEN)                                             :(FRETURN)
*
* PROCESS %ELSE
*
ELSE     MODE(TOP) = NE(NESTLEVEL) ELSE                      :S(FRETURN)
         TERMINAL = LC 'ELSE ENCOUNTERED OUTSIDE OF ' LC 'IF,' REPORT()
+                                                                 :(END)
*
* PROCESS %ENDIF
*
ENDIF    NESTLEVEL = NE(NESTLEVEL) NESTLEVEL - 1           :F(ENDIF_ERR)
         TOP = (NE(NESTLEVEL) STATESTK<NESTLEVEL>, '')        :(FRETURN)
ENDIF_ERR
         TERMINAL = LC 'ENDIF ENCOUNTERED OUTSIDE OF ' LC 'IF,'
+           REPORT()                                              :(END)
*
PROCESS_END
*
* EVALUATE AN ARGUMENT OF THE FORM '(OPERAND OPR OPERAND)'
*
         DEFINE('EVALUATE(EXP)ARG1,ARG2,OPERATOR')
         P_OPERAND = NAME | SPAN(&DIGITS) | BAL
         P_OPERATOR = 'OR' | 'or' | 'AND' | 'and' | 'NE' 'ne' |
+                     'EQ' | 'eq'
         P_EV1 = P_OPERAND . ARG1 WHITE P_OPERATOR . OPERATOR
+           WHITE P_OPERAND . ARG2
         P_EV2 = P_OPERAND . ARG1 '' . OPERATOR . ARG2
         P_EV3 = '(' OPT_WS (P_EV1 | P_EV2) OPT_WS ')' RPOS(0)
                                                         :(EVALUATE_END)
EVALUATE EXP ? P_EV3                                         :F(EVAL_ER)
         EVALUATE = (DIFFER(OPERATOR)
+           APPLY(OPERATOR '.', OPER(ARG1), OPER(ARG2)),
+           OPER(ARG1))                                        :(RETURN)
EVAL_ER  TERMINAL = 'BAD EXPRESSION: ' EXP REPORT()               :(END)
EVALUATE_END
*
* EVALUATE AN OPERAND TO PRODUCE VALUE OF 0 OR 1
* IF ARGUMENT IS NAME, GET ITS VALUE FROM THE SYMTABLE. OTHERWISE
* IF IT IS A SIMPLE INTEGER, RETURN IT. OTHERWISE IT MUST BE
* A PARENTHESIZED EXPRESSION. CALL EVALUATE.
*
         DEFINE('OPER(ARG)')                                 :(OPER_END)
OPER     OPER = INTEGER(ARG) ARG                              :S(RETURN)
         IDENT(SUBSTR(ARG, 1, 1), '(')                        :S(OPER.1)
         OPER = SYMTBL<ARG>
         DIFFER(OPER)                                         :S(RETURN)
         TERMINAL = 'UNDEFINED OPERAND: ' ARG REPORT()            :(END)
OPER.1   OPER = EVALUATE(ARG)                                  :(RETURN)
OPER_END
*
* EQ OPERATOR -- RETURNS 0 OR 1
*
         DEFINE('EQ.(A,B)')                                    :(EQ.END)
EQ.      EQ. = (EQ(A, B) 1, 0)                                 :(RETURN)
EQ.END
*
* NE OPERATOR -- RETURNS 0 OR 1
*
         DEFINE('NE.(A,B)')                                    :(NE.END)
NE.      NE. = (EQ(A, B) 0, 1)                                 :(RETURN)
NE.END
*
* OR OPERATOR -- RETURNS 0 OR 1
*
         DEFINE('OR.(A,B)')                                    :(OR.END)
OR.      OR. = (EQ(A) EQ(B) 0, 1)                              :(RETURN)
OR.END
*
* AND OPERATOR -- RETURNS 0 OR 1
*
         DEFINE('AND.(A,B)')                                  :(AND.END)
AND.     AND. = (EQ(A, 1) EQ(B, 1) 1, 0)                       :(RETURN)
AND.END
*
* RETURN CURRENT LINE NUMBER AND FILE NAME.
*
         DEFINE('REPORT()')                                :(REPORT_END)
REPORT   REPORT = ' IN FILE ' INNAME ', LINE ' +LINENO         :(RETURN)
REPORT_END
*
* HERE'S THE 'MAIN' PROGRAM.
*
         P_SET = OPT_WS LC ('SET' | 'set') OPT_WS '(' OPT_WS NAME . ARG1
+           OPT_WS ','
+           OPT_WS FASTBAL('(<[]>)', "'" '"', ',)') . ARG2 OPT_WS ')'
         P_INCLUDE = OPT_WS LC ('INCLUDE' | 'include') OPT_WS
+           '(' BREAK(')') . ARG1 ')'
         P_COMMENT = OPT_WS LC '*' OPT_WS '(' BREAK(')') ')'
*
* LOOP UNTIL END OF INPUT.
*
* READS STANDARD INPUT, WRITES STANDARD OUTPUT.
*
         LSSTYPE = HOST(4, 'LSS')
         FN = HOST(2, HOST(3))
         INPUT(.INPUT, 10,, FN)                               :F(NONAME)
NONAME   INVAR  = .INPUT
         INNAME = 'STDIN'
         FILELEVEL = 0
*
         LINELEAD =
         LINELEAD = ?(LSSTYPE ? 'SNOBOL4') '-LINE 1'
         LINELEAD = ?(LSSTYPE ? 'C') '#line 1'
         LINELEAD = ?(LSSTYPE ? 'ASM') '%LINE 1'
         OUTPUT = VDIFFER(LINELEAD) ' "' VDIFFER(FN) '"'
*
* MAIN LOOP READING AND WRITING FILES
*
LOOP     LINE = $INVAR                                           :F(EOF)
         LINENO = LINENO + 1
         RESULT = PROCESS(LINE)                                 :F(LOOP)
         RESULT ? P_COMMENT                                     :S(LOOP)
*
* INPUT LINE TO BE RETAINED. LOOK FOR %SET COMMAND. IF FOUND, DEFINE
* THE SYMBOL AND OMIT THE LINE FROM THE OUTPUT FILE.
*
         RESULT ? P_SET                                   :F(CK_INCLUDE)
         V = EVAL(ARG2)
         SYMTBL<ARG1> = INTEGER(V) +V                           :S(LOOP)
         TERMINAL = LC 'SET NON-NUMERIC VALUE: ' ARG2 REPORT()    :(END)
*
* CHECK FOR %INCLUDE COMMAND. STRIP ANY SURROUNDING QUOTE MARKS.
*
CK_INCLUDE
         RESULT ? P_INCLUDE                                   :F(PUTOUT)
         ARG1 ? "'" BREAK("'") . ARG1 "'" RPOS(0)
         FILELEVEL = FILELEVEL + 1
         INCSTACK<FILELEVEL> = INVAR
         INCNAME<FILELEVEL> = INNAME
         INCLNNO<FILELEVEL> = LINENO
         INVAR = 'INPUT' FILELEVEL
*
* TRY THE CURRENT DIRECTORY; IF THE FILE IS NOT THERE, TRY IFSDIR
* AND THEN SNOLIB. SHOULD DO PATH SEARCH (SEE LSINC).
*
         DS = HOST(HOST_DIR_SEP)
         INPUT(INVAR, FILELEVEL + 19,, ARG1)                    :S(INC1)
         X = HOST(HOST_GETENV, 'IFSDIR')                        :F(INC3)
         INPUT(INVAR, FILELEVEL + 19,, X DS ARG1)               :S(INC1)
INC3     X = HOST(HOST_GETENV, 'SNOLIB')                        :S(INC2)
         X = HOST(HOST_SNOLIB_DIR)
INC2     INPUT(INVAR, FILELEVEL + 19,, X DS ARG1)               :S(INC1)
         TERMINAL = LC 'INCLUDE FILE NOT FOUND: ' "'" ARG1 "'" REPORT()
+                                                                 :(END)
INC1     INNAME = ARG1
         LINELEAD =
         LINELEAD = ?(LSSTYPE ? 'SNOBOL4') '-LINE 1 "'
         LINELEAD = ?(LSSTYPE ? 'C') '#line 1 "'
         LINELEAD = ?(LSSTYPE ? 'ASM') '%LINE 1 "'
         OUTPUT = VDIFFER(LINELEAD) INNAME '"'
INC4     LINENO = 0                                              :(LOOP)
*
* OUTPUT THE PROCESSED LINE
*
PUTOUT   OUTPUT = RESULT                                         :(LOOP)
*
* HERE ON EOF. CHECK IF INSIDE AN INCLUDE FILE.
*
EOF      EQ(FILELEVEL, 0)                                       :S(EOF2)
         ENDFILE(FILELEVEL + 19)
         INVAR = INCSTACK<FILELEVEL>
         INNAME = INCNAME<FILELEVEL>
         LINENO = INCLNNO<FILELEVEL>
         LINELEAD =
         LINELEAD = ?(LSSTYPE ? 'SNOBOL4') '-LINE '
         LINELEAD = ?(LSSTYPE ? 'C') '#line '
         LINELEAD = ?(LSSTYPE ? 'ASM') '%LINE '
         OUTPUT = VDIFFER(LINELEAD) LINENO + 1 ' "' INNAME '"'
         FILELEVEL = FILELEVEL - 1                               :(LOOP)
*
EOF2     TERMINAL = NE(NESTLEVEL) 'EOF IN NESTED IF AT LEVEL ' NESTLEVEL
+                                                                :S(END)
         &CODE = 0                                                :(END)
*
END START
*
* CE: .MSNOBOL4;
