#!/usr/bin/bash
         exec "snobol4" "-d8m" "-b" "$0" "$@"
*
************************************************************************
*                                                                      *
*                                                                      *
*                      ######   #     #  #     #                       *
*                      #     #  #     #  ##    #                       *
*                      #     #  #     #  # #   #                       *
*                      ######   #     #  #  #  #                       *
*                      #   #    #     #  #   # #                       *
*                      #    #   #     #  #    ##                       *
*                      #     #   #####   #     #                       *
*                                                                      *
*                                                                      *
************************************************************************
*
* THIS IS THE RUN-TIME LOADER. IT READS, ASSEMBLES AND COMBINES THE
* FILES ON THE COMMAND LINE.
*
* ESTABLISHES THE ASSEMBLER/LOAD ENVIRONMENT, LOADS (ASSEMBLES) EACH
* .MAC FILE NAMED, AND EXECUTES THE LOADED CODE FROM SYMBOL '.MAIN.'.
*
-TITLE RUN
-INCLUDE 'CHARS.INC'
-INCLUDE 'REPL.INC'
-INCLUDE 'JIT.INC'
-INCLUDE 'FFI.INC'
-INCLUDE 'ASM.INC'
-INCLUDE 'READFILE.INC'
-INCLUDE 'HOST.INC'
-INCLUDE 'MERGET.INC'
-INCLUDE 'MBUG.INC'
-INCLUDE 'UNIX.INC'
-INCLUDE 'MKTEMP.INC'
-STITL
-IN72
*
         TERMINAL = 'RUN (TUE JUN 24 19:53:25 EDT 2014)'
*
         INIT_JIT('/usr/local/bin/snobol4')
         GLOBALS = TABLE()
*
* ADD RUNUTL.SO SYMBOLS
*
         H = DLOPEN('runutl.so', RTLD_NOW)
         TERMINAL = IDENT(H) DLERROR()                           :S(END)
*
* STACK OPERATIONS
*
         GLOBALS<'PUSH..'>    = DLSYM(H, 'push')
         GLOBALS<'POP..'>     = DLSYM(H, 'pop')
         GLOBALS<'PRSTACK..'> = DLSYM(H, 'prstack')
*
* STACKS IN RUNUTL - SS.. IS THE "SYSTEM STACK"
*
         GLOBALS<'SS..'> = DLSYM(H, 'SS')
*
* OFFSETS FOR STACK STRUCTURE. SINCE WE VIEW STACKS AS A PRIMITIVE
* OPERAITON/STRUCTURE, WE ARE UNLIKELY TO CARE ABOUT THIS.
*
         GLOBALS<'SPT..'> =  0 ;* DQ POINTER TO STACK DATA
         GLOBALS<'SIX..'> =  8 ;* DW CURRENT STACK INDEX
         GLOBALS<'SFR..'> = 10 ;* DW FREE ITEMS IN STACK
         GLOBALS<'SSZ..'> = 12 ;* DW INITIAL/CURRENT SIZE
         GLOBALS<'SXT..'> = 14 ;* DW NUMBER OF ITEMS TO GROW BY
*
* ASM DIRECTIVES - EXPANSIONS FOR PUSH STACK,REG AND POP STACK,REG
*
         DEFINE('PUSH__(P1,P2,P3)S')
         DEFINE('POP__(P1,P2,P3)S')
*
* OPTIONALLY ADD ANY NEEDED SYMBOLS TO GLOBALS TABLE TO ESTABLISH
* ENVIRONMENT FOR ASM() CODE.
*
* READ "OBJECT" FILES, MUST BE "LORD" ORDER. EACH COMPONENT CONTRIBUTES
* TO GLOBAL SYMBOLS, WHICH ARE THEN AVAILABLE TO THE REMAINING PARTS.
*
* INDEX OF THE NEXT COMMAND LINE ARGUMENT
*
         PN = 0
*
* CLEAR FLAGS (-m, -p AND -d) AND SET FILE COUNT TO 0
         DISASSEMBLE =
         PRINT =
         MBUG =
         FC = 0
*
* GET NEXT ARGUMENT. THIS WILL BE EITHER A FLAG (-p, -d, -m) OR A
* FILENAME TO PROCESS
*
ASM_LOAD FN = HOST(HOST_ARGN, HOST(HOST_FIRSTARG) + PN)      :F(ASM_RUN)
*
* OPTIONS
*
* -p "PRINTS" THE NEXT MODULE AFTER ASM COMPLETES. PRINT IS VIEW OF
*    THE CODE IN LIGHTNING FORMAT
* -d DISASSEMBLE THE NEXT MODULE AFTER ASM COMLETES. THIS IS A
*    DISASSEMBLY OF THE ACTUAL MACHINE INSTRUCTIONS.
* -m STARTS THE CODE UNDER MBUG
* -h HELP
*
         PRINT = IDENT(FN, '-p') 1                           :F(ASM_LD2)
         PN = PN + 1                                         :(ASM_LOAD)
ASM_LD2  DISASSEMBLE = IDENT(FN, '-d') 1                     :F(ASM_LD3)
         PN = PN + 1                                         :(ASM_LOAD)
ASM_LD3  MBUG = IDENT(FN, '-m') 1                            :F(ASM_LD4)
         PN = PN + 1                                         :(ASM_LOAD)
         IDENT(FN, '-h')                                    :S(ASM_HELP)
*
* PROCESS A FILE. READ THE ENTIRE FILE.
*
ASM_LD4  SRC = READFILE(FN)                                   :F(FILERR)
*
* CREATE A NEW ASM() OBJECT. PASS IN GLOBALS UP TO NOW.
*
         A = ASM_CREATE(GLOBALS)
*
* ASSEMBLE (LOAD) THIS FILE. THIS RESULTS IN A NEW MACHINE CODE BLOCK
* IN MEMORY (WHICH MAY HAVE RERENCES TO ANY PREVIOUS MACHINE CODE AS
* PUBLISHED IN GLOBALS).
*
         ASM(A, SRC)                                          :F(ASMERR)
*
* "PRINT" THE RESULT, IF THE -p FLAG WAS GIVEN
*
         DIFFER(PRINT) JIT_PRINT()
         PRINT =
*
* DISASSEMBLE THE RESULT, IF THE -d OR -m FLAG WAS GIVEN
*
         (IDENT(DISASSEMBLE) IDENT(MBUG))                       :S(RUN5)
         T = MKTEMP()
         PID = FORK()
         TERMINAL = LT(PID) PERROR('FORK')                       :S(END)
         NE(PID)                                                :S(RUN4)
*
* IN CHILD PROCESS, REDIRECT AND CAPTURE DISASSEMBLY.
*
         CLOSE(1)
         FD = CREAT(T, DIB('644', 8))
         JIT_DISASSEMBLE()                                        :(END)
*
* WAIT FOR CHILD PROCESS TO COMPLETE. READ DISASSEMBLY FILE. APPEND TO
* DISASSEMBLY ALREADY COLLECTED. IF -d USED, OUTPUT THE DISASSEMBLY TO
* STANDARD ERROR. REMOVE FILE USED TO CAPTURE DISASSEMBLY.
*
RUN4     WAIT()
         S = READFILE(T)
         DELETE(T)
         TERMINAL = DIFFER(DISASSEMBLE) S
         DIS = DIS S
         DISASSEMBLE =
*
* MERGE THE GLOBALS TABLE WITH THE NEW EXPORTS FROM THIS ASM BLOCK.
* NOTE THAT NEW EXPORTS TAKE PRECEDENCE (WHICH IS THE 'LEAST SURPRISING'
* BEHAVIOUR).
*
RUN5     FC = FC + 1
         GLOBALS = MERGET(GLOBALS, EXPORTS(A))
*
         INIT = GLOBALS<'.INIT.'>
         IDENT(INIT)                                            :S(RUN6)
*
* IF .INIT. HAS BEEN EXPORTED FROM THIS MODULE, RUN IT. DON'T LEAVE IT
* IN THE GLOBALS TABLE (OR IT WILL BE RUN AGAIN IF THE NEXT MODULE DOES
* NOT HAVE .INIT.). IF .INIT. DOES NOT RETURN 0, DISPLAY THE RETURN
* CODE AND EXIT.
*
         GLOBALS<'.INIT.'> =
         FFI = FFI_NEW('I', 'V')
         FFI_SET_CALLP(FFI, INIT)
         R = FFI_CALL_INTEGER(FFI)
         TERMINAL = NE(R) FN ' .INIT. RETURNED ' R               :S(END)
*
RUN6     PN = PN + 1                                         :(ASM_LOAD)
*
* ERRORS - FILE COULDN'T BE READ, ASM DIDN'T LIKE THE FILE, THERE IS NO
* .MAIN. ENTRY POINT, OR NO .MAC FILES HAVE BEEN LOADED.
*
FILERR   TERMINAL = "CAN'T READ FILE " FN                         :(END)
ASMERR   TERMINAL = "ASM ERROR IN FILE " FN                       :(END)
MAINERR  TERMINAL = "MISSING .MAIN."                              :(END)
NOFERR   TERMINAL = 'NO FILES LOADED'                             :(END)
*
* EXECUTE THE CODE THAT HAS BEEN LOADED. EXECUTION BEGINS AT ENTRY POINT
* .MAIN.
*
ASM_RUN  EQ(FC, 0)                                            :S(NOFERR)
         MAIN = GLOBALS<'.MAIN.'>
         IDENT(MAIN)                                         :S(MAINERR)
*
* CREATE A NEW FFI OBJECT. .MAIN. HAS NO PARAMETERS AND RETURNS A STATUS
* (INTEGER) TO RETURN TO THE OPERATING SYSTEM (IN &CODE).
*
         FFI = FFI_NEW('I', 'V')
*
* SET THE CALL POINTER OF THE FFI OBJECT TO .MAIN.
*
         FFI_SET_CALLP(FFI, MAIN)
*
* CALL THE FFI (.MAIN.), RETURNING INTEGER R
*
* ENTER MACHINE DEBUGGER (MBUG). PASS MBUG GLOBAL SYMBOLS TABLE AND
* DISASSEMBLY. MBUG WILL DO DISASSEMBLY FOR INSTRUCTIONS NOT FOUND
* IN DIS. ALL ADDRESSES ARE ABSOLUTE -- ALL RELOCATIONS HAVE BEEN
* DONE (IN CASE YOU WANT TO ADD SYMBOLS INTO THE GLOBALS TABLE).
*
         DIFFER(MBUG) MBUG(GLOBALS, DIS)
         R = FFI_CALL_INTEGER(FFI)
*
* WE COULD, BUT DON'T, BOTHER WITH FREEING ANYTHING. WE ARE NOT EVEN
* TRACKING THE ASM OBJECTS (WE COULD PUT THEM INTO A TABLE, AND FREE
* THEM). IT IS PRESUMED THAT THIS PARTICULAR KIND OF CODE GENERATION
* WILL BE DONE AT STARTUP, AND THE CODE REUSED DURING EXECUTION.
*
* WITH PERHAPS A TIGHTER COUPLING WITH MBUG, "LOCAL" SYMBOLS COULD
* BE PROVIDED. THIS IS NOT DONE BECAUSE WE ASSUME THAT MBUG IS USED
* TO PROVIDE DEBUGGING TO A SINGLE ".MAC" CONSTRUCT AT A TIME. IT
* IS PROBABLY PRUDENT TO HAVE AN OLD-FASHIONED PRINT-OUT OF THE CODE
* PRIOR TO ATTEMPTING A DEBUG SESSION.
*
*        FFI_FREE(FFI)
*        FINISH_JIT()
*
* ASSIGN RESULT R INTO &CODE, AND EXIT TO THE OPERATING SYSTEM.
*
         &CODE = R                                                :(END)
*
* EXTRA OPERATIONS FOR ASM.INC. NOTE THAT THE ASM() FUNCTION IS
* EXTENSIBLE. ANY OPERATOR CAN BE ADDED BY DEFINING IT AS A FUNCTION.
* 'OPERATOR' IN ASM (MAC CODE) WILL CALL FUNCTION OPERATOR__, ASSUMING
* THAT OPERATOR__ HAS BEEN DEFINED.
*
* THIS LETS US ADD OPERATORS TO THE ASM CODE, BRINGING IT TO THE
* LEVEL NEEDED FOR A PARTICULAR APPLICATION. IN THIS CASE, WE ADD
* 'PUSH' AND 'POP' INSTRUCTIONS.
*
* AS SHOWN THE THE FUNCTIONS 'PUSH__' AND 'POP__', ONE WAY OF HANDLING
* THESE CASES IS BY SIMPLY CREATING A CODE EXPANSION, AND SPLICING
* CODE INTO THE INPUT SOURCE (VERY LISPISH MACRO SUPPORT).
*
* PUSH STACK,REG
*
* EXPAND TO CALL. WE WILL SPLICE IN REPLACEMENT CODE. IT WOULD BE FASTER
* TO JUST GENERATE THE SEQUENCES, BUT LESS CONVENIENT.
*
* THIS APPROACH LETS US CHANGE THE CODE GENERATOR MORE READILY, WHICH
* IS IMPORTANT AT THIS STAGE. RIGHT NOW, WE ARE MOVING BETWEEN "C"
* PIECES, EXPANSIONS ("MACROS" AND "PSEUDO-OPS") AND CODE GENERATED
* TO THE ".MAC" FILES.
*
PUSH__   S = ' PREPARE'        CHARS_NL
+            ' PUSHARGI {1}'   CHARS_NL
+            ' PUSHARGR {2}'   CHARS_NL
+            ' FINISHI PUSH..' CHARS_NL
*
SPLICE   S = REPL(S, '{1}', P1)
         S = REPL(S, '{2}', P2)
         S = REPL(S, '{3}', P3)
         SRC POS(BL) LEN(0) = S                                :(RETURN)
*
* POP STACK,REG
*
* AGAIN, JUST SPLICE IN THE REPLACEMENT CODE. NOTE THAT {1} AND {2}
* WILL BE REPLACED BY THE ACTUAL P1 AND P2 PARAMETERS SPECIFIED
* (THIS IS DONE IN THE "SPLICE" FUNCTION, AS IS THE ACTUAL SPLICING
* OF THE NEW CODE INTO THE INPUT STREAM).
*
POP__    S = ' PREPARE'        CHARS_NL
+            ' PUSHARGI {1}'   CHARS_NL
+            ' FINISHI POP..'  CHARS_NL
+            ' RETVAL {2}'     CHARS_NL                        :(SPLICE)
*
* HELP FOR RUN
*
ASM_HELP TERMINAL = 'run - load and run mac files'
         TERMINAL =
         TERMINAL = 'usage: run options and files...'
         TERMINAL =
         TERMINAL = '-p display lightning code for next file'
         TERMINAL = '-d display disassembly for next file'
         TERMINAL = '-m use MBUG (must be first option'
         TERMINAL = '-h help'
         TERMINAL =
         TERMINAL = 'Input files must be in "lord" (library order)'
*
* CE: .MSNOBOL4;
*
END
