#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-PROGRAM SCAN
-LINE 61 "scan.lss"
-TITLE SCAN
START
-LINE 53 "scan.lss"
-MODULE HOST
-LINE 8 "HOST.lss"
-IN72
-LINE 162 "HOST.lss"
-STITL HOST
-EJECT
*
************************************************************************
*                                                                      *
*                 #     #  #######   #####   #######                   *
*                 #     #  #     #  #     #     #                      *
*                 #     #  #     #  #           #                      *
*                 #######  #     #   #####      #                      *
*                 #     #  #     #        #     #                      *
*                 #     #  #     #  #     #     #                      *
*                 #     #  #######   #####      #                      *
*                                                                      *
* HOST               HOST() FUNCTION CODES                             *
*                                                                      *
************************************************************************
*
* HOST.lss
*
-LINE 11 "HOST.lss"
HOST
*
*
* MACRO SPITBOL
*
-PUBLIC HOST_SYSINFO, HOST_PARAMS
*
* ARCH:OS:SNOBOL_VERSION
         HOST_SYSINFO = ''
* ARGUMENT FROM -u OR ENTIRE COMMAND LINE
         HOST_PARAMS = 0
*
* CATSPAW SPITBOL
*
-PUBLIC HOST_SYSCMD, HOST_ARGN, HOST_FIRSTARG, HOST_GETENV
*
* EXEC ARG AS SHELL COMMAND, RETURN STATUS
         HOST_SYSCMD = 1
* N'TH TOKEN ON COMMAND LINE (INTEGER)
         HOST_ARGN = 2
* INDEX OF 1ST USER COMMAND LINE ARG TOKEN
         HOST_FIRSTARG = 3
* RETURNS ENVIRONMENT VARIABLE, OR FAILS
         HOST_GETENV = 4
*
-PUBLIC HOST_SNOLIB_DIR
*
* DEFAULT SNOLIB DIR (-INCLUDE, LOAD())
         HOST_SNOLIB_DIR = 2200
*
-PUBLIC HOST_CC, HOST_COPT
*
* C COMPILER USED TO BUILD CSNOBOL4
         HOST_CC = 2202
* C OPTIMIZER FLAGS USED TO BUILD CSNOBOL4
         HOST_COPT = 2203
*
-PUBLIC HOST_DL_EXT, HOST_DL_CFLAGS, HOST_DL_LD,HOST_DL_LDFLAGS
*
* DYNAMIC LOADABLE LIBRARY EXTENSION
         HOST_DL_EXT = 2208
* C COMPILER FLAGS FOR DYNAMIC LOADABLES
         HOST_DL_CFLAGS = 2209
* DYNAMIC LOADABLE FILE LOAD COMMAND
         HOST_DL_LD = 2210
* DYNAMIC LOADABLE FILE LOAD SWITCHES
         HOST_DL_LDFLAGS = 2211
*
-PUBLIC HOST_DIR_SEP, HOST_PATH_SEP
*
* DIRECTORY SEPARATOR CHAR (MAY BE EMPTY)
         HOST_DIR_SEP = 2212
* PATH SEPARATOR CHARACTER
         HOST_PATH_SEP = 2213
*
* CSNOBOL4 1.5
*
-PUBLIC HOST_DEF_SNOPATH, HOST_INCUDE_DIR
*
* DEFAULT LIBRARY SEARCH PATH
         HOST_DEF_SNOPATH = 2214
* PATH FOR C HEADERS
         HOST_INCLUDE_DIR = 2215
*
-PUBLIC HOST_INTEGER_BITS, HOST_REAL_BITS, HOST_POINTER_BITS
-PUBLIC HOST_LONG_BITS, HOST_DESCR_BITS, HOST_SPEC_BITS, HOST_CHAR_BITS
*
* NUMBER OF BITS FOR SNOBOL4 INTEGER TYPE
         HOST_INTEGER_BITS = 2300
* NUMBER OF BITS FOR SNOBOL4 REAL TYPE
         HOST_REAL_BITS = 2301
* NUMBER OF BITS FOR C POINTER TYPE
         HOST_POINTER_BITS = 2302
* NUMBER OF BITS FOR C LONG TYPE
         HOST_LONG_BITS = 2303
* NUMBER OF BITS FOR SIL 'DESCRIPTOR' TYPE
         HOST_DESCR_BITS = 2304
* NUMBER OF BITS FOR SIL 'SPECIFIER' TYPE
         HOST_SPEC_BITS = 2305
* NUMBER OF BITS FOR C CHAR TYPE
         HOST_CHAR_BITS = 2306
*
-PUBLIC HOST_DYNAMIC_SIZE, HOST_PMSTACK_SIZE, HOST_ISTACK_SIZE
*
* SIZE OF 'DYNAMIC' STORAGE IN DESCRIPTORS
         HOST_DYNAMIC_SIZE = 2400
* SIZE OF PATTERN MATCH STACK IN DESCRS
         HOST_PMSTACK_SIZE = 2401
* SIZE OF INTERPRETER STACK IN DESCRIPTORS
         HOST_ISTACK_SIZE = 2402
*
    CODE('HOST')
*
HOST_END
*
* CE: .MSNOBOL4;
-LINE 12 "SLOAD.lss"
-MODULE CRACK
-LINE 16 "CRACK.lss"
-MODULE COUNT
-LINE 8 "COUNT.lss"
-IN72
-LINE 38 "COUNT.lss"
-STITL COUNT
-EJECT
*
************************************************************************
*                                                                      *
*               #####   #######  #     #  #     #  #######             *
*              #     #  #     #  #     #  ##    #     #                *
*              #        #     #  #     #  # #   #     #                *
*              #        #     #  #     #  #  #  #     #                *
*              #        #     #  #     #  #   # #     #                *
*              #     #  #     #  #     #  #    ##     #                *
*               #####   #######   #####   #     #     #                *
*                                                                      *
* COUNT              COUNT STRING OCCURRENCES                          *
*                                                                      *
* COUNT(S1,S2) COUNTS THE NUMBER OF OCCURRENCES OF STRING S2 IN STRING *
* S1.                                                                  *
*                                                                      *
************************************************************************
*
* COUNT.lss
*
-LINE 11 "COUNT.lss"
-PUBLIC COUNT()
*
         DEFINE('COUNT(S1,S2)FIRST,REST,P')                 :(COUNT_END)
*
COUNT    COUNT = 0
         S2 LEN(1) . FIRST REM . REST                         :F(RETURN)
         P = POS(0) BREAKX(FIRST) S2
COUNT_1  S1 P = REST                                          :F(RETURN)
         COUNT = COUNT + 1                                    :(COUNT_1)
*
COUNT_END
*
* CE: .MSNOBOL4;
-IN72
-LINE 63 "CRACK.lss"
-STITL CRACK
-EJECT
*
************************************************************************
*                                                                      *
*               #####   ######      #      #####   #    #              *
*              #     #  #     #    # #    #     #  #   #               *
*              #        #     #   #   #   #        #  #                *
*              #        ######   #     #  #        ###                 *
*              #        #   #    #######  #        #  #                *
*              #     #  #    #   #     #  #     #  #   #               *
*               #####   #     #  #     #   #####   #    #              *
*                                                                      *
* CRACK                    STRING TO ARRAY                             *
*                                                                      *
************************************************************************
*
* CRACK.lss
*
-LINE 20 "CRACK.lss"
-PUBLIC CRACK(), %1
*
         DEFINE('CRACK_1(S)P')
         DEFINE('CRACK(S,B,F)I,PAT,N')
         DEFINE('CRACK_4(S)')
         OPSYN('%', 'CRACK_1', 1)                           :(CRACK_END)
*
CRACK_1  P = IDENT(P) ','
         CRACK_1 = CRACK(S, P)                                 :(RETURN)
*
CRACK    F = IDENT(F) 'CRACK_4'
         IDENT(B, NULL)                                      :S(CRACK_3)
         S RTAB(1) B ABORT | REM . S = S B
         N = COUNT(S, B)
         EQ(N, 0)                                             :S(RETURN)
         CRACK = ARRAY(N)
         PAT = BREAK(B) . *CRACK<I> LEN(1)
CRACK_2  I = I + 1
         S PAT =                                              :F(RETURN)
         CRACK<I> = APPLY(F, CRACK<I>)             :S(CRACK_2)F(FRETURN)
CRACK_3  N = SIZE(S)
         EQ(N, 0)                                             :S(RETURN)
         CRACK = ARRAY(N)
         PAT = LEN(1) . *CRACK<I>                             :(CRACK_2)
*
CRACK_4  CRACK_4 = S                                           :(RETURN)
*
CRACK_END
*
* CE: .MSNOBOL4;
-STITL TRIMB
-EJECT
*
-LINE 35 "TRIMB.lss"
************************************************************************
*                                                                      *
*               #######  ######   ###  #     #  ######                 *
*                  #     #     #   #   ##   ##  #     #                *
*                  #     #     #   #   # # # #  #     #                *
*                  #     ######    #   #  #  #  ######                 *
*                  #     #   #     #   #     #  #     #                *
*                  #     #    #    #   #     #  #     #                *
*                  #     #     #  ###  #     #  ######                 *
*                                                                      *
* TRIMB            TRIM BOTH LEFT AND RIGHT OF STRING                  *
*                                                                      *
************************************************************************
*
* TRIMB.lss
*
-LINE 11 "TRIMB.lss"
-MODULE TRIMB
-PUBLIC TRIMB()
         DEFINE('TRIMB(S)')                                 :(TRIMB_END)
*
TRIMB    TRIMB = REVERSE(TRIM(REVERSE(TRIM(S))))               :(RETURN)
*
TRIMB_END
*
* CE: .MSNOBOL4;
-STITL SLOAD
-EJECT
-LINE 112 "SLOAD.lss"
*
************************************************************************
*                                                                      *
*              #####   #        #######     #     ######               *
*             #     #  #        #     #    # #    #     #              *
*             #        #        #     #   #   #   #     #              *
*              #####   #        #     #  #     #  #     #              *
*                   #  #        #     #  #######  #     #              *
*             #     #  #        #     #  #     #  #     #              *
*              #####   #######  #######  #     #  ######               *
*                                                                      *
* SLOAD                LOAD SNOBOL4 SOURCE                             *
*                                                                      *
* (C) COPYRIGHT 1985, 1987 - CATSPAW, INCORPORATED                     *
*                                                                      *
* MODIFIED TO SUPPORT /DEV FILES, SEARCH CSNOBOL4 PATHS                *
*                                                                      *
************************************************************************
*
* SLOAD.lss
*
-LINE 18 "SLOAD.lss"
-MODULE SLOAD
-PUBLIC SLOAD()
         DEFINE('SLOAD(FILENAME)'
+               'LIB,CODE,PATH,X,A,I,P,PS,DS,TRIM_SAV,POSITION,UNIT')
         Q_ = "'"
         QQ_ = '"'
         SLOAD_STMT = ARBNO(Q_ BREAK(Q_) Q_ | QQ_ BREAK(QQ_) QQ_ |
+                     NOTANY(Q_ QQ_) BREAK(Q_ QQ_ ';')) ';'
         SLOAD_STMTS = FENCE (';' ARBNO(SLOAD_STMT)) . X '*' REM
* NOTE THAT ; FOLLOWED BY ANYTHING OTHER THAN . OR + IS ALSO A COMMENT
         SLOAD_CCPAT = FENCE ('*' | '-' | '#' | '!' | '|' | RPOS(0))
         SLOAD_CNPAT = FENCE (';.' | ';+')
         SLOAD_INPAT = FENCE '-' ((ANY('Ii') ('NCLUDE' | 'nclude')) |
+                                (ANY('Cc') ('OPY' | 'opy')))
+                      BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . X
         SLOAD_TAB = TABLE()                                :(SLOAD_END)
*
* FUNCTION TO READ AND COMPILE SNOBOL4 FUNCTIONS FROM A DISK FILE.
* THE FILENAME IS SPECIFIED AS THE ARGUMENT TO FUNCTION SLOAD.
*
SLOAD    UNIT = IO_FINDUNIT()
         PATH = FILENAME
         INPUT(.LIB, UNIT,, PATH)                            :S(SLOAD_0)
         DS = HOST(HOST_DIR_SEP)
         PS = HOST(HOST_PATH_SEP)
         X = HOST(HOST_GETENV, 'SNOPATH')                    :S(SLOAD_8)
         X = HOST(HOST_GETENV, 'SNOLIB')                     :S(SLOAD_8)
         X = HOST(HOST_SNOLIB_DIR)                           :F(FRETURN)
SLOAD_8  A = CRACK(X, PS)
         I = 1
SLOAD_10 P = TRIMB(A<I>)                                     :F(FRETURN)
         PATH = P DS FILENAME
         INPUT(.LIB, UNIT,, PATH)                            :S(SLOAD_0)
         I = I + 1                                           :(SLOAD_10)
*
SLOAD_0  TRIM_SAV = &TRIM
         &TRIM = 1
*
SLOAD_1  X = LIB                                             :F(SLOAD_2)
         X SLOAD_CCPAT                                       :S(SLOAD_4)
         X = ';' X
         X SLOAD_CNPAT = ' '
         X SLOAD_STMTS
         CODE = CODE X                                        :(SLOAD_1)
*
SLOAD_4  X SLOAD_INPAT                                       :F(SLOAD_1)
         DIFFER(SLOAD_TAB<X>)                                :S(SLOAD_1)
*
         POSITION = SET(UNIT, 0, 1)
         ENDFILE(UNIT)
         DETACH(.LIB)
*
         SLOAD(X)                                            :F(FRETURN)
*
         INPUT(.LIB, UNIT,, PATH)                            :F(FRETURN)
*
         SLOAD_TAB<X> = 1
         FILENAME FENCE '/dev/'                              :S(SLOAD_1)
         EQ(SET(UNIT, POSITION, 0), POSITION)      :S(SLOAD_1)F(FRETURN)
*
SLOAD_2  ENDFILE(UNIT)
         DETACH(.LIB)
         CODE = CODE(CODE '; :(SLOAD_3)')                       :S<CODE>
         TERMINAL = 'COMPILATION ERROR, FILE: ' FILENAME
*
* ERROR. TAKE CODE APART STATEMENT BY STATEMENT TO FIND THE PROBLEM.
* FIRST REMOVE FROM INCLUDE FILE TABLE, THEN REMOVE INITIAL ';'
*
         SLOAD_TAB<X> =
         CODE = SUBSTR(CODE, 2)
SLOAD_6  CODE FENCE SLOAD_STMT . X =                         :F(SLOAD_7)
         CODE(X)                                             :S(SLOAD_6)
         X RTAB(1) . TERMINAL
SLOAD_7  &TRIM = TRIM_SAV
         TERMINAL = &ERRTEXT                                  :(FRETURN)
*
SLOAD_3  &TRIM = TRIM_SAV                                      :(RETURN)
*
SLOAD_END
*
* CE: .MSNOBOL4;
-STITL
-EJECT
*
************************************************************************
*                                                                      *
*                                                                      *
*                   #####    #####      #     #     #                  *
*                  #     #  #     #    # #    ##    #                  *
*                  #        #         #   #   # #   #                  *
*                   #####   #        #     #  #  #  #                  *
*                        #  #        #######  #   # #                  *
*                  #     #  #     #  #     #  #    ##                  *
*                   #####    #####   #     #  #     #                  *
*                                                                      *
* SCAN                  SCAN LINES FOR PATTERN                         *
*                                                                      *
************************************************************************
*
* scan.lss
*
         TERMINAL = 'SCAN (MON JAN 27 14:19:34 EST 2014)'
*
         &CODE = 1
         SLOAD('SCAN.INC')
         LINE_NUMBER =
         LAST_LINE = 1
         N = HOST(HOST_FIRSTARG)
* POSSIBLE /G ARGUMENT
         O = HOST(HOST_ARGN, N)                                  :F(END)
         O POS(0) '/'                                            :F(CLL)
         N = N + 1
         G = ?(O ? ANY('Gg')) 1
                                                                 :(CLL2)
* COLLECT FIND OR SUBSTITUTE STATEMENT. IF '=' IS ARGUMENT THEN
* COMMAND IS SUBSTITUTE
CLL      SUB = ?(O ? (POS(0) '=' RPOS(0))) 1                    :S(ADDS)
         O POS(0) '%'                                           :F(ADDS)
         O POS(0) LEN(1) REM . O
         O = "'" O "'"
ADDS     S = S ' ' O
         N = N + 1
CLL2     O = HOST(HOST_ARGN, N)                                  :S(CLL)
*
TOPAT    TERMINAL = IDENT(SUB) 'FIND: ' S
         TERMINAL = DIFFER(SUB) IDENT(G) 'SUBSTITUTE: ' S
         TERMINAL = DIFFER(SUB) DIFFER(G) 'SUBSTITUTE GLOBAL: ' S
* EMPTY STATEMENT IS NO OPERATION
         S = TRIM(S)
         IDENT(S)                                                :S(END)
* COMPILE STATEMENT AS A NON-G COMMAND FIRST. ADDS LABELS
         LB = DIFFER(SUB) ' :(BTM)'
         LB = IDENT(SUB) ' :S(BTM)F(TOP)'
         C = CODE(' LINE ' S LB)                              :F(SYNTAX)
         IDENT(SUB)                                              :S(TOP)
         IDENT(G)                                                :S(TOP)
* IF S AND G, ADD LOCAL LOOP.
         C = CODE('LUP LINE ' S ' :S(LUP)F(BTM)')             :F(SYNTAX)
*
TOP      LINE = INPUT                                            :F(END)
         LINE_NUMBER = LINE_NUMBER + 1                              :<C>
*
BTM      &CODE = 0
         OUTPUT = DIFFER(SUB) LINE                              :S(BTM2)
         OUTPUT = LINE_NUMBER - LAST_LINE
         LAST_LINE = LINE_NUMBER
BTM2     DIFFER(SUB)                                             :S(TOP)
         IDENT(G)                                          :S(END)F(TOP)
SYNTAX   TERMINAL = 'SYNTAX ERROR IN ' S
END
*
* CE: .MSNOBOL4;
