<H1>scan - Scan extension for cpmed</H1>

Use passed pattern to scan input. Output line deltas to next match
line.

Usage: as an editor command for [[cpmed]], try:

[[
b-#.!scan /G %LAST
.n$
&amp;l
&amp;l
]]

This sequence sets the current point to the beginning of the buffer.
All lines are piped to the [[scan]] command with an argument of
[['LAST']].  The output which is the line deltas to each matching
line are save to file [[$]] (the default transfer file). Set the index
file to [[$]].  Read the index file, and move forward that many lines,
positioning to the first occurence of [['LAST']]. Repeat.

Using <i>scan</i> from <i>cpmed</i> is slightly automated. The |
command in <i>cpmed</i> calls the scan command. This feature is still
being refined.

Command quoting is a bit tricky, because [[shell]] must be accomodated.
Also, only a single file can be edited by [[cpmed]] at a time. The
transfer file is automatically erased by [[cpmed]]. Any SNOBOL4
pattern can be used.

We ease quoting the following way. If an argument begins with %, we
strip the % and surround the argument with single quotes ('). Since
arguments are delimited by spaces and we put a single space between
when assembling the command, this works well (saves many 3 characters
per literal).

The first argument can be / which is followed by G. If /G is specified
for a FIND, all matching lines numbers are output.

A substitute is identified if one of the arguments is =.  If substitute
then substituted line is output, else relative line from top of file,
followed by relative line from current line (cpmed L arguments).

G for substitute means substitute on all lines, all occurences on each
line. Not using G only substitutes the first occurence on each of the
lines.

<h2>Uses</h2>
<a href="HOST.html">HOST</a><br>
<a href="SLOAD.html">SLOAD</a><br>

<<INCLUDES>>=
-INCLUDE 'HOST.INC'
-INCLUDE 'SLOAD.INC'
@

<<>>=
#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"
-PROGRAM SCAN
-TITLE SCAN
START
<<INCLUDES>>
-STITL
-EJECT
*
************************************************************************
*                                                                      *
*                                                                      *
*                   #####    #####      #     #     #                  *
*                  #     #  #     #    # #    ##    #                  *
*                  #        #         #   #   # #   #                  *
*                   #####   #        #     #  #  #  #                  *
*                        #  #        #######  #   # #                  *
*                  #     #  #     #  #     #  #    ##                  *
*                   #####    #####   #     #  #     #                  *
*                                                                      *
* SCAN                  SCAN LINES FOR PATTERN                         *
*                                                                      *
************************************************************************
*
* scan.lss
*
         TERMINAL = 'SCAN (MON JAN 27 14:19:34 EST 2014)'
*
         &CODE = 1
         SLOAD('SCAN.INC')
         LINE_NUMBER =
         LAST_LINE = 1
         N = HOST(HOST_FIRSTARG)
* POSSIBLE /G ARGUMENT
         O = HOST(HOST_ARGN, N)                                  :F(END)
         O POS(0) '/'                                            :F(CLL)
         N = N + 1
         G = ?(O ? ANY('Gg')) 1
                                                                 :(CLL2)
* COLLECT FIND OR SUBSTITUTE STATEMENT. IF '=' IS ARGUMENT THEN
* COMMAND IS SUBSTITUTE
CLL      SUB = ?(O ? (POS(0) '=' RPOS(0))) 1                    :S(ADDS)
         O POS(0) '%'                                           :F(ADDS)
         O POS(0) LEN(1) REM . O
         O = "'" O "'"
ADDS     S = S ' ' O
         N = N + 1
CLL2     O = HOST(HOST_ARGN, N)                                  :S(CLL)
*
TOPAT    TERMINAL = IDENT(SUB) 'FIND: ' S
         TERMINAL = DIFFER(SUB) IDENT(G) 'SUBSTITUTE: ' S
         TERMINAL = DIFFER(SUB) DIFFER(G) 'SUBSTITUTE GLOBAL: ' S
* EMPTY STATEMENT IS NO OPERATION
         S = TRIM(S)
         IDENT(S)                                                :S(END)
* COMPILE STATEMENT AS A NON-G COMMAND FIRST. ADDS LABELS
         LB = DIFFER(SUB) ' :(BTM)'
         LB = IDENT(SUB) ' :S(BTM)F(TOP)'
         C = CODE(' LINE ' S LB)                              :F(SYNTAX)
         IDENT(SUB)                                              :S(TOP)
         IDENT(G)                                                :S(TOP)
* IF S AND G, ADD LOCAL LOOP.
         C = CODE('LUP LINE ' S ' :S(LUP)F(BTM)')             :F(SYNTAX)
*
TOP      LINE = INPUT                                            :F(END)
         LINE_NUMBER = LINE_NUMBER + 1                              :<C>
*
BTM      &CODE = 0
         OUTPUT = DIFFER(SUB) LINE                              :S(BTM2)
         OUTPUT = LINE_NUMBER - LAST_LINE
         LAST_LINE = LINE_NUMBER
BTM2     DIFFER(SUB)                                             :S(TOP)
         IDENT(G)                                          :S(END)F(TOP)
SYNTAX   TERMINAL = 'SYNTAX ERROR IN ' S
END
*
* CE: .MSNOBOL4;
@
