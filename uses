#!/usr/bin/bash
         exec "snobol4" "-b" "$0" "$@"

* uses
*
* build includes necessary. it is preferred to do this on the .INC
* file instead of the .lss file, but, with care, the .lss will work
* as well.

-INCLUDE 'ARRAY0.INC'
-INCLUDE 'HOST.INC'
-INCLUDE 'JSON.INC'
-INCLUDE 'KEYST.INC'
-INCLUDE 'MERGET.INC'
-INCLUDE 'READFILE.INC'
-INCLUDE 'SDIFF.INC'

* ce: .msnobol4;

         define('merge_idx()') :(end_merge_idx)

merge_idx
nxttbl   t = json_decode(f)                                   :f(return)
         f = json_rest
         functions = ident(t<'#'>, 'FUNCTIONS')
+           merget(functions, t)                              :s(nxttbl)
         variables = ident(t<'#'>, 'VARIABLES')
+           merget(variables, t)                              :s(nxttbl)
         classes = ident(t<'#'>, 'CLASSES')
+           merget(classes, t)                                :s(nxttbl)
         methods = ident(t<'#'>, 'METHODS')
+           merget(methods, t)                                :s(nxttbl)
         operators = ident(t<'#'>, 'OPERATORS')
+           merget(operators, t)                               :(nxttbl)
end_merge_idx


         fn = host(HOST_ARGN, HOST(HOST_FIRSTARG))             :f(stdin)
         ident(fn)                                             :s(stdin)
         input(.input, 20,, fn)                                  :f(end)
stdin

         fc = &ucase
         ss = sdiff(&alphabet, &ucase '0123456789_')
         define('process(s)')
         functions = table()
         variables = table()
         classes = table()
         methods = table()
         operators = table()
         f = readfile('SYSIDX')
         merge_idx()
         f = readfile('IDX');
         merge_idx()
pats     functions<'#'> =
         variables<'#'> =
         classes<'#'> =
         methods<'#'> =
         operators<'#'> =

* build variable pattern
         k = keyst(variables)                                    :f(end)
         i = 1
nxtv     k<i>                                                   :f(endv)
         s = '"' k<i> '"' ' . e *?(f = "' variables<k<i>> '")'
         vp = (differ(vp) (eval(s) | vp), eval(s))
         i = i + 1                                               :(nxtv)
endv     vp = (pos(0) | any(ss)) @bp vp @ep (any(ss) | rpos(0))

* build function pattern
         k = keyst(functions)                                   : f(end)
         i = 1
nxtf     k<i>                                                   :f(endf)
         m = k<i>
         m ')' =
         s = '"' m '"' ' . e *?(f = "' functions<k<i>> '")'
         fp = (differ(fp) (eval(s) | fp), eval(s))
         i = i + 1                                               :(nxtf)
endf     fp = (pos(0) | any(ss)) @bp fp @ep

         incs = table()
         weak = table()

         q = "'"
         qq = '"'

top      r = input                                            :f(incout)

* If its a -WEAK declaration, add the functions and variables to
* the weak() table. This table is used to filter potential include
* additions

         r fence '-' ('weak' | 'WEAK') rem . r                  :f(uses)
         fc = &ucase &lcase
         sc = fc '0123456789_.'
         symbol = any(fc) (span(sc) | null)
         function = symbol '()'
         variable = symbol
         ws = span(' ' char(9)) | null
         element = ws (function | variable) . e ws (',' | rpos(0))
weak2    r element =                                             :f(top)
         e ')' =
         weak<e> = 1                                            :(weak2)

* -USES control cards are just analyzed as a statement. Note that
* this is wrong for operators (FIXME), classes and methods. But
* it works for functions and variables
uses     r fence '-' ('uses' | 'USES') rem . r                  :s(loop)

* if the line is a comment or control card, skip it
         r fence (any('*#;|!-') | '//')                          :s(top)

* loop skipping quoted strings, pass the remaining fragments to
* process
loop     r arb . l (q | qq) $ delim arb *delim rem . r          :f(done)
         process(l)                                              :(loop)
done     process(r)                                               :(top)

* output the includes
incout   incs<fn> =
         fn '.'                                              :f(incout2)
         fn '.lss' rpos(0) =
         fn '.INC' rpos(0) =
         incs<fn '.INC'> = differ(fn)
incout2  output =
+           json_encode((sort(keyst(incs)), array0))             :s(end)

* process string s looking for functions/variables
process  &fullscan = 1
         s = replace(s, &lcase, &ucase)
* the match will be from a separator or pos(0) and includes the
* terminating separator or rpos(0). we don't want to remove braces
* and such, but just the actual variable. so, be and ep (begin and
* end position) are captured in the vp pattern. this is not a
* concern for functions -- there 'name(' is taken out, will a possible
* character in the lead. since we have removed the variables, it
* is impossible that the edit will leave a matching signature.
* 'xxx)' won't match anything in fp.
proc_1   s vp                                                 :f(proc_2)
         s pos(bp) len(ep - bp) =
         differ(weak<e>)                                      :s(proc_1)
         incs<f> = 1                                           :(proc_1)
proc_2   s fp =                                               :f(return)
         differ(weak<e>)                                      :s(proc_2)
         incs<f> = 1                                           :(proc_2)
end
